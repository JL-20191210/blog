"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[35221],{66262:(s,a)=>{a.A=(s,a)=>{const i=s.__vccOpts||s;for(const[s,n]of a)i[s]=n;return i}},37554:(s,a,i)=>{i.r(a),i.d(a,{comp:()=>e,data:()=>d});var n=i(20641);const l={},e=(0,i(66262).A)(l,[["render",function(s,a){return(0,n.uX)(),(0,n.CE)("div",null,a[0]||(a[0]=[(0,n.Fv)('<h1 id="_1-1《深入理解-jvm-架构组成与执行流程》" tabindex="-1"><a class="header-anchor" href="#_1-1《深入理解-jvm-架构组成与执行流程》"><span>1.1《深入理解 JVM：架构组成与执行流程》</span></a></h1><hr><h2 id="🧠-什么是-jvm" tabindex="-1"><a class="header-anchor" href="#🧠-什么是-jvm"><span>🧠 什么是 JVM？</span></a></h2><p>JVM（Java Virtual Machine，Java 虚拟机）是 Java 技术的核心，它实现了“编译一次，到处运行”的跨平台特性。JVM 是一个运行 Java 字节码的抽象计算机，通过将 <code>.class</code> 文件加载并执行，实现 Java 程序在各种硬件和操作系统上的兼容性。</p><hr><h2 id="🧱-jvm-架构图" tabindex="-1"><a class="header-anchor" href="#🧱-jvm-架构图"><span>🧱 JVM 架构图</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>┌────────────────────────────┐</span></span>\n<span class="line"><span>│         Java 程序源码       │</span></span>\n<span class="line"><span>├────────────────────────────┤</span></span>\n<span class="line"><span>│        Java 编译器 (javac)   │</span></span>\n<span class="line"><span>├────────────────────────────┤</span></span>\n<span class="line"><span>│        字节码 (.class 文件) │</span></span>\n<span class="line"><span>├────────────────────────────┤</span></span>\n<span class="line"><span>│         JVM 运行时架构       │</span></span>\n<span class="line"><span>│ ┌────────────────────────┐ │</span></span>\n<span class="line"><span>│ │ 类加载子系统            │ │</span></span>\n<span class="line"><span>│ │ 执行引擎                │ │</span></span>\n<span class="line"><span>│ │ 内存结构（方法区、堆等）│ │</span></span>\n<span class="line"><span>│ │ 本地接口                │ │</span></span>\n<span class="line"><span>│ │ 本地方法库              │ │</span></span>\n<span class="line"><span>│ └────────────────────────┘ │</span></span>\n<span class="line"><span>└────────────────────────────┘</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="🔍-jvm-架构主要组件详解" tabindex="-1"><a class="header-anchor" href="#🔍-jvm-架构主要组件详解"><span>🔍 JVM 架构主要组件详解</span></a></h2><table><thead><tr><th>组件</th><th>说明</th></tr></thead><tbody><tr><td><strong>类加载子系统</strong></td><td>加载 <code>.class</code> 文件，生成 <code>Class</code> 对象</td></tr><tr><td><strong>执行引擎</strong></td><td>将字节码解释或编译成本地机器码执行</td></tr><tr><td><strong>运行时数据区</strong></td><td>包括方法区、堆、虚拟机栈、本地方法栈、程序计数器等</td></tr><tr><td><strong>本地接口</strong></td><td>调用本地方法（如 C/C++ 编写的库）</td></tr><tr><td><strong>本地方法库</strong></td><td>被调用的本地代码实现，如 JNI</td></tr></tbody></table><hr><h2 id="🧠-jvm-运行时数据区结构" tabindex="-1"><a class="header-anchor" href="#🧠-jvm-运行时数据区结构"><span>🧠 JVM 运行时数据区结构</span></a></h2><table><thead><tr><th>区域</th><th>特性</th><th>说明</th></tr></thead><tbody><tr><td>程序计数器</td><td>每个线程私有</td><td>记录当前线程执行字节码的位置</td></tr><tr><td>Java 虚拟机栈</td><td>每个线程私有</td><td>存储栈帧（局部变量、操作数栈等）</td></tr><tr><td>本地方法栈</td><td>每个线程私有</td><td>调用本地方法所使用的栈空间</td></tr><tr><td>堆</td><td>所有线程共享</td><td>存储对象和数组，是 GC 的主要管理区域</td></tr><tr><td>方法区（元空间）</td><td>所有线程共享</td><td>存储类信息、常量、静态变量等</td></tr></tbody></table><hr><h2 id="⚙️-jvm-执行流程总结" tabindex="-1"><a class="header-anchor" href="#⚙️-jvm-执行流程总结"><span>⚙️ JVM 执行流程总结</span></a></h2><ol><li>编译 Java 文件为 <code>.class</code></li><li>类加载器将 <code>.class</code> 文件加载到内存</li><li>类信息存入方法区，实例对象分配在堆中</li><li>虚拟机栈执行方法调用，执行引擎逐条解释字节码</li><li>调用本地方法接口时跳转到 C/C++ 实现</li></ol><hr><h2 id="✅-示例代码说明执行过程" tabindex="-1"><a class="header-anchor" href="#✅-示例代码说明执行过程"><span>✅ 示例代码说明执行过程</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HelloWorld</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello, JVM&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行流程：</p><ul><li><code>javac</code> 编译为 <code>HelloWorld.class</code></li><li>JVM 通过类加载器加载该类</li><li>方法区存储类元信息，堆中创建字符串对象</li><li>虚拟机栈执行 <code>main</code> 方法，输出内容</li></ul><hr><h2 id="📌-面试高频问题" tabindex="-1"><a class="header-anchor" href="#📌-面试高频问题"><span>📌 面试高频问题</span></a></h2><ol><li>JVM 架构有哪些核心组件？</li><li>程序计数器和虚拟机栈的区别？</li><li>方法区与堆的区别？</li><li>JVM 为什么需要本地方法接口？</li></ol><hr><h2 id="📝-小结" tabindex="-1"><a class="header-anchor" href="#📝-小结"><span>📝 小结</span></a></h2><ul><li>JVM 架构以类加载器、执行引擎、内存模型为核心</li><li>各内存区域职责清晰、配合完成字节码的执行</li><li>理解 JVM 执行流程是掌握性能调优与 GC 分析的基础</li></ul><hr><p>👉 下一篇：[1.2 类加载机制详解（含双亲委派）]</p>',29)]))}]]),d=JSON.parse('{"path":"/JVM/%E4%B8%93%E6%A0%8F%E5%90%88%E9%9B%86/1.%20JVM%20%E6%9E%B6%E6%9E%84%E4%B8%8E%E7%B1%BB%E5%8A%A0%E8%BD%BD/1.1%E6%9E%B6%E6%9E%84%E7%BB%84%E6%88%90%E4%B8%8E%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.html","title":"1.1《深入理解 JVM：架构组成与执行流程》","lang":"zh-CN","frontmatter":{"gitInclude":[]},"headers":[{"level":2,"title":"🧠 什么是 JVM？","slug":"🧠-什么是-jvm","link":"#🧠-什么是-jvm","children":[]},{"level":2,"title":"🧱 JVM 架构图","slug":"🧱-jvm-架构图","link":"#🧱-jvm-架构图","children":[]},{"level":2,"title":"🔍 JVM 架构主要组件详解","slug":"🔍-jvm-架构主要组件详解","link":"#🔍-jvm-架构主要组件详解","children":[]},{"level":2,"title":"🧠 JVM 运行时数据区结构","slug":"🧠-jvm-运行时数据区结构","link":"#🧠-jvm-运行时数据区结构","children":[]},{"level":2,"title":"⚙️ JVM 执行流程总结","slug":"⚙️-jvm-执行流程总结","link":"#⚙️-jvm-执行流程总结","children":[]},{"level":2,"title":"✅ 示例代码说明执行过程","slug":"✅-示例代码说明执行过程","link":"#✅-示例代码说明执行过程","children":[]},{"level":2,"title":"📌 面试高频问题","slug":"📌-面试高频问题","link":"#📌-面试高频问题","children":[]},{"level":2,"title":"📝 小结","slug":"📝-小结","link":"#📝-小结","children":[]}],"readingTime":{"minutes":2.29,"words":687},"filePathRelative":"JVM/专栏合集/1. JVM 架构与类加载/1.1架构组成与执行流程.md","excerpt":"\\n<hr>\\n<h2>🧠 什么是 JVM？</h2>\\n<p>JVM（Java Virtual Machine，Java 虚拟机）是 Java 技术的核心，它实现了“编译一次，到处运行”的跨平台特性。JVM 是一个运行 Java 字节码的抽象计算机，通过将 <code>.class</code> 文件加载并执行，实现 Java 程序在各种硬件和操作系统上的兼容性。</p>\\n<hr>\\n<h2>🧱 JVM 架构图</h2>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>┌────────────────────────────┐</span></span>\\n<span class=\\"line\\"><span>│         Java 程序源码       │</span></span>\\n<span class=\\"line\\"><span>├────────────────────────────┤</span></span>\\n<span class=\\"line\\"><span>│        Java 编译器 (javac)   │</span></span>\\n<span class=\\"line\\"><span>├────────────────────────────┤</span></span>\\n<span class=\\"line\\"><span>│        字节码 (.class 文件) │</span></span>\\n<span class=\\"line\\"><span>├────────────────────────────┤</span></span>\\n<span class=\\"line\\"><span>│         JVM 运行时架构       │</span></span>\\n<span class=\\"line\\"><span>│ ┌────────────────────────┐ │</span></span>\\n<span class=\\"line\\"><span>│ │ 类加载子系统            │ │</span></span>\\n<span class=\\"line\\"><span>│ │ 执行引擎                │ │</span></span>\\n<span class=\\"line\\"><span>│ │ 内存结构（方法区、堆等）│ │</span></span>\\n<span class=\\"line\\"><span>│ │ 本地接口                │ │</span></span>\\n<span class=\\"line\\"><span>│ │ 本地方法库              │ │</span></span>\\n<span class=\\"line\\"><span>│ └────────────────────────┘ │</span></span>\\n<span class=\\"line\\"><span>└────────────────────────────┘</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}')}}]);