"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[79832],{66262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,e]of s)a[i]=e;return a}},55183:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>h,data:()=>l});var e=a(20641);const n={},h=(0,a(66262).A)(n,[["render",function(i,s){return(0,e.uX)(),(0,e.CE)("div",null,s[0]||(s[0]=[(0,e.Fv)('<h1 id="java-的引用传递机制-以及四种引用类型对-gc-的影响" tabindex="-1"><a class="header-anchor" href="#java-的引用传递机制-以及四种引用类型对-gc-的影响"><span>Java 的引用传递机制，以及四种引用类型对 GC 的影响</span></a></h1><hr><h2 id="🌀-一、java-是值传递还是引用传递" tabindex="-1"><a class="header-anchor" href="#🌀-一、java-是值传递还是引用传递"><span>🌀 一、Java 是值传递还是引用传递？</span></a></h2><p>这个问题常让人困惑——<strong>Java 永远是值传递（pass by value）！</strong></p><h3 id="👇-区分关键" tabindex="-1"><a class="header-anchor" href="#👇-区分关键"><span>👇 区分关键：</span></a></h3><ul><li>对于 <strong>基本类型</strong>，传的是值的副本（直接数据）。</li><li>对于 <strong>引用类型</strong>，传的是对象引用的副本（对象地址的拷贝）。</li></ul><h3 id="✍️-示例说明" tabindex="-1"><a class="header-anchor" href="#✍️-示例说明"><span>✍️ 示例说明：</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> change</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> p) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;张三&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     // 改变的是堆中对象的字段 ✅</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    p </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Person</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 改变的是引用本身 ❌（只在方法内有效）</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;李四&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> person </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Person</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">person</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;原名&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">change</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(person)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">person</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 输出：张三</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>🔎 解释：</p><ul><li><code>p.name = &quot;张三&quot;</code> 作用到了原对象。</li><li><code>p = new Person()</code> 只改变了 p 的地址副本，<code>person</code> 本身不受影响。</li></ul><hr><h2 id="🌪️-二、java-中的四种引用类型-jdk-1-2-引入" tabindex="-1"><a class="header-anchor" href="#🌪️-二、java-中的四种引用类型-jdk-1-2-引入"><span>🌪️ 二、Java 中的四种引用类型（JDK 1.2 引入）</span></a></h2><p>Java 的 <code>java.lang.ref</code> 包定义了四种引用类型，对象被 GC 的时机取决于引用的强弱程度：</p><table><thead><tr><th>引用类型</th><th>类名</th><th>是否会阻止 GC</th><th>常用场景</th></tr></thead><tbody><tr><td><strong>强引用</strong></td><td>普通变量（默认）</td><td>✅ 是</td><td>常规对象</td></tr><tr><td><strong>软引用</strong></td><td><code>SoftReference&lt;T&gt;</code></td><td>❌ 内存不足才回收</td><td>缓存，如图片缓存、对象池</td></tr><tr><td><strong>弱引用</strong></td><td><code>WeakReference&lt;T&gt;</code></td><td>❌ 下一次 GC 即回收</td><td>ThreadLocal、Map key 等</td></tr><tr><td><strong>虚引用</strong></td><td><code>PhantomReference&lt;T&gt;</code></td><td>❌ 不可访问</td><td>与 <code>ReferenceQueue</code> 配合，做资源回收监控</td></tr></tbody></table><hr><h3 id="✅-强引用-strong-reference-——-默认的引用类型" tabindex="-1"><a class="header-anchor" href="#✅-强引用-strong-reference-——-默认的引用类型"><span>✅ 强引用（Strong Reference）—— 默认的引用类型</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> p </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Person</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>只要有强引用指向对象，它就<strong>绝不会被回收</strong>。</li></ul><hr><h3 id="✅-软引用-soft-reference" tabindex="-1"><a class="header-anchor" href="#✅-软引用-soft-reference"><span>✅ 软引用（Soft Reference）</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">SoftReference</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> sr </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SoftReference</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Person</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">())</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>如果内存不足，GC 会尝试回收软引用指向的对象。</li><li>常用于<strong>缓存机制</strong>（如图片缓存、网页缓存）。</li></ul><hr><h3 id="✅-弱引用-weak-reference" tabindex="-1"><a class="header-anchor" href="#✅-弱引用-weak-reference"><span>✅ 弱引用（Weak Reference）</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">WeakReference</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> wr </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> WeakReference</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Person</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">())</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>下一次 GC 就会回收</strong>（即使内存足够）。</li><li>用于内存敏感场景，如： <ul><li><code>ThreadLocalMap</code> 中的 key</li><li>防止内存泄漏</li></ul></li></ul><hr><h3 id="✅-虚引用-phantom-reference" tabindex="-1"><a class="header-anchor" href="#✅-虚引用-phantom-reference"><span>✅ 虚引用（Phantom Reference）</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ReferenceQueue</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> queue </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ReferenceQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">PhantomReference</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> pr </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> PhantomReference</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Person</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> queue)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对象无法通过虚引用获取（<code>get()</code> 总是返回 null）。</li><li>常用于<strong>对象回收后清理资源</strong>，类似 C++ 的析构器。</li></ul><hr><h2 id="🚀-三、gc-roots-的判定标准-决定对象是否存活" tabindex="-1"><a class="header-anchor" href="#🚀-三、gc-roots-的判定标准-决定对象是否存活"><span>🚀 三、GC Roots 的判定标准（决定对象是否存活）</span></a></h2><p>以下对象被视为 GC Roots，只有 <strong>没有任何 GC Root 引用路径的对象</strong> 才可能被回收：</p><ul><li>当前线程栈中的引用（局部变量）</li><li>静态字段引用（类加载器相关）</li><li>JNI（本地代码）中的引用</li><li>活跃线程引用</li></ul><hr><h2 id="🧠-总结图示-引用强度对-gc-的影响" tabindex="-1"><a class="header-anchor" href="#🧠-总结图示-引用强度对-gc-的影响"><span>🧠 总结图示（引用强度对 GC 的影响）</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>引用强度:   强 &gt; 软 &gt; 弱 &gt; 虚</span></span>\n<span class="line"><span>回收时机:   不回收 &gt; 内存紧张时 &gt; 下一次GC &gt; 到达ReferenceQueue</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="📌-实战应用建议" tabindex="-1"><a class="header-anchor" href="#📌-实战应用建议"><span>📌 实战应用建议</span></a></h2><table><thead><tr><th>应用场景</th><th>建议使用引用类型</th></tr></thead><tbody><tr><td>对象绝不能被回收</td><td>强引用（默认）</td></tr><tr><td>内存充足时可用，不足时回收</td><td>软引用</td></tr><tr><td>需要防止内存泄漏</td><td>弱引用</td></tr><tr><td>需要监控对象是否被回收</td><td>虚引用 + 引用队列</td></tr></tbody></table>',40)]))}]]),l=JSON.parse('{"path":"/Java/%E9%9A%8F%E7%AC%94/Java%20%E7%9A%84%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6.html","title":"Java 的引用传递机制，以及四种引用类型对 GC 的影响","lang":"zh-CN","frontmatter":{"gitInclude":[]},"headers":[{"level":2,"title":"🌀 一、Java 是值传递还是引用传递？","slug":"🌀-一、java-是值传递还是引用传递","link":"#🌀-一、java-是值传递还是引用传递","children":[{"level":3,"title":"👇 区分关键：","slug":"👇-区分关键","link":"#👇-区分关键","children":[]},{"level":3,"title":"✍️ 示例说明：","slug":"✍️-示例说明","link":"#✍️-示例说明","children":[]}]},{"level":2,"title":"🌪️ 二、Java 中的四种引用类型（JDK 1.2 引入）","slug":"🌪️-二、java-中的四种引用类型-jdk-1-2-引入","link":"#🌪️-二、java-中的四种引用类型-jdk-1-2-引入","children":[{"level":3,"title":"✅ 强引用（Strong Reference）—— 默认的引用类型","slug":"✅-强引用-strong-reference-——-默认的引用类型","link":"#✅-强引用-strong-reference-——-默认的引用类型","children":[]},{"level":3,"title":"✅ 软引用（Soft Reference）","slug":"✅-软引用-soft-reference","link":"#✅-软引用-soft-reference","children":[]},{"level":3,"title":"✅ 弱引用（Weak Reference）","slug":"✅-弱引用-weak-reference","link":"#✅-弱引用-weak-reference","children":[]},{"level":3,"title":"✅ 虚引用（Phantom Reference）","slug":"✅-虚引用-phantom-reference","link":"#✅-虚引用-phantom-reference","children":[]}]},{"level":2,"title":"🚀 三、GC Roots 的判定标准（决定对象是否存活）","slug":"🚀-三、gc-roots-的判定标准-决定对象是否存活","link":"#🚀-三、gc-roots-的判定标准-决定对象是否存活","children":[]},{"level":2,"title":"🧠 总结图示（引用强度对 GC 的影响）","slug":"🧠-总结图示-引用强度对-gc-的影响","link":"#🧠-总结图示-引用强度对-gc-的影响","children":[]},{"level":2,"title":"📌 实战应用建议","slug":"📌-实战应用建议","link":"#📌-实战应用建议","children":[]}],"readingTime":{"minutes":2.36,"words":709},"filePathRelative":"Java/随笔/Java 的引用传递机制.md","excerpt":"\\n<hr>\\n<h2>🌀 一、Java 是值传递还是引用传递？</h2>\\n<p>这个问题常让人困惑——<strong>Java 永远是值传递（pass by value）！</strong></p>\\n<h3>👇 区分关键：</h3>\\n<ul>\\n<li>对于 <strong>基本类型</strong>，传的是值的副本（直接数据）。</li>\\n<li>对于 <strong>引用类型</strong>，传的是对象引用的副本（对象地址的拷贝）。</li>\\n</ul>\\n<h3>✍️ 示例说明：</h3>\\n<div class=\\"language-java line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"java\\" data-title=\\"java\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">public</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> void</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> change</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">(</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\">Person</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> p) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">    p</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">name</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> \\"张三\\"</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">     // 改变的是堆中对象的字段 ✅</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">    p </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> new</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> Person</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">()</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">    // 改变的是引用本身 ❌（只在方法内有效）</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">    p</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">name</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> \\"李四\\"</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\">Person</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\"> person </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> new</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> Person</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">()</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">person</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">name</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> \\"原名\\"</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">change</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">(person)</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">System</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">out</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">println</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">person</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">name</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">);</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"> // 输出：张三</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}')}}]);