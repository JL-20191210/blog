"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[89387],{66262:(l,t)=>{t.A=(l,t)=>{const e=l.__vccOpts||l;for(const[l,a]of t)e[l]=a;return e}},78458:(l,t,e)=>{e.r(t),e.d(t,{comp:()=>n,data:()=>i});var a=e(20641);const r={},n=(0,e(66262).A)(r,[["render",function(l,t){const e=(0,a.g2)("RouteLink");return(0,a.uX)(),(0,a.CE)("div",null,[t[2]||(t[2]=(0,a.Lk)("h1",{id:"🔧-7-1-jvm-调优实战总结与案例分析",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#🔧-7-1-jvm-调优实战总结与案例分析"},[(0,a.Lk)("span",null,"🔧 7.1 JVM 调优实战总结与案例分析")])],-1)),t[3]||(t[3]=(0,a.Lk)("p",null,"本章总结常见 JVM 调优方法，结合真实项目案例，分享性能优化思路、实践技巧和常见误区，助力开发者快速提升应用性能与稳定性。",-1)),t[4]||(t[4]=(0,a.Lk)("hr",null,null,-1)),(0,a.Q3)(" more "),t[5]||(t[5]=(0,a.Fv)('<h2 id="🚦-典型调优方向" tabindex="-1"><a class="header-anchor" href="#🚦-典型调优方向"><span>🚦 典型调优方向</span></a></h2><table><thead><tr><th>方向</th><th>目标与内容</th></tr></thead><tbody><tr><td>堆内存调整</td><td>堆大小、新生代与老年代比例优化</td></tr><tr><td>垃圾收集策略</td><td>选择合适的收集器及参数配置</td></tr><tr><td>线程调优</td><td>线程池大小、工作线程及异步处理优化</td></tr><tr><td>内存泄漏排查</td><td>监控堆内存、ThreadLocal、资源关闭</td></tr><tr><td>日志与监控</td><td>GC 日志采集、性能监控、异常预警</td></tr></tbody></table><hr><h2 id="📌-案例一-堆内存不足导致频繁-full-gc" tabindex="-1"><a class="header-anchor" href="#📌-案例一-堆内存不足导致频繁-full-gc"><span>📌 案例一：堆内存不足导致频繁 Full GC</span></a></h2><p><strong>症状</strong>：系统响应变慢，Full GC 频繁，停顿时间长 <strong>解决方案</strong>：</p><ul><li>增大堆内存 <code>-Xmx</code>，保证足够内存</li><li>使用 G1 收集器，设置 <code>-XX:MaxGCPauseMillis</code> 限制停顿时间</li><li>调整晋升阈值，减少老年代压力</li></ul><hr><h2 id="📌-案例二-线程池配置不合理导致请求阻塞" tabindex="-1"><a class="header-anchor" href="#📌-案例二-线程池配置不合理导致请求阻塞"><span>📌 案例二：线程池配置不合理导致请求阻塞</span></a></h2><p><strong>症状</strong>：请求延迟增加，线程堆积，CPU 利用率偏低 <strong>解决方案</strong>：</p><ul><li>增加 Tomcat 或应用线程池最大线程数</li><li>优化业务逻辑，避免线程长时间阻塞</li><li>使用异步处理减少同步阻塞</li></ul><hr><h2 id="📌-案例三-内存泄漏导致-oom" tabindex="-1"><a class="header-anchor" href="#📌-案例三-内存泄漏导致-oom"><span>📌 案例三：内存泄漏导致 OOM</span></a></h2><p><strong>症状</strong>：应用运行一段时间后内存占用持续升高，最终崩溃 <strong>解决方案</strong>：</p><ul><li>开启堆转储分析，使用 MAT 定位泄漏对象</li><li>检查静态集合和 ThreadLocal 使用</li><li>及时关闭数据库连接、IO 资源</li></ul><hr><h2 id="📝-小结" tabindex="-1"><a class="header-anchor" href="#📝-小结"><span>📝 小结</span></a></h2><ul><li>JVM 调优需系统化思考，结合业务场景与硬件条件</li><li>日志与监控是调优的重要依据，切勿盲目调整参数</li><li>结合实际案例学习，积累经验，提升调优效率</li></ul><hr>',18)),(0,a.Lk)("p",null,[t[1]||(t[1]=(0,a.eW)("👉 下一篇推荐：")),(0,a.bF)(e,{to:"/JVM/%E4%B8%80%E5%91%BD%E9%80%9F%E9%80%9A/8.%20JVM%E9%AB%98%E7%BA%A7%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/8.1JVM%20%E9%AB%98%E7%BA%A7%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D.html"},{default:(0,a.k6)((()=>t[0]||(t[0]=[(0,a.eW)("8.1 JVM 高级性能分析工具介绍")]))),_:1})])])}]]),i=JSON.parse('{"path":"/JVM/%E4%B8%80%E5%91%BD%E9%80%9F%E9%80%9A/7.%20JVM%E8%B0%83%E4%BC%98%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93%E4%B8%8E%E6%A1%88%E4%BE%8B/7.1JVM%20%E8%B0%83%E4%BC%98%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93%E4%B8%8E%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90.html","title":"7.1 JVM 调优实战总结与案例分析","lang":"zh-CN","frontmatter":{"title":"7.1 JVM 调优实战总结与案例分析","icon":"fa-solid fa-wrench","date":"2025-07-10T00:00:00.000Z","author":"JeanHu","category":["JVM","性能调优"],"tag":["JVM","调优实战","性能分析","GC调优","案例分析"],"summary":"本文总结 JVM 调优过程中的关键思路与典型实战案例，涵盖 GC 调优、内存参数配置、诊断工具使用等内容，帮助开发者系统掌握性能优化技能。","gitInclude":[]},"headers":[{"level":2,"title":"🚦 典型调优方向","slug":"🚦-典型调优方向","link":"#🚦-典型调优方向","children":[]},{"level":2,"title":"📌 案例一：堆内存不足导致频繁 Full GC","slug":"📌-案例一-堆内存不足导致频繁-full-gc","link":"#📌-案例一-堆内存不足导致频繁-full-gc","children":[]},{"level":2,"title":"📌 案例二：线程池配置不合理导致请求阻塞","slug":"📌-案例二-线程池配置不合理导致请求阻塞","link":"#📌-案例二-线程池配置不合理导致请求阻塞","children":[]},{"level":2,"title":"📌 案例三：内存泄漏导致 OOM","slug":"📌-案例三-内存泄漏导致-oom","link":"#📌-案例三-内存泄漏导致-oom","children":[]},{"level":2,"title":"📝 小结","slug":"📝-小结","link":"#📝-小结","children":[]}],"readingTime":{"minutes":2.03,"words":610},"filePathRelative":"JVM/一命速通/7. JVM调优实战总结与案例/7.1JVM 调优实战总结与案例分析.md","localizedDate":"2025年7月10日","excerpt":"\\n<p>本章总结常见 JVM 调优方法，结合真实项目案例，分享性能优化思路、实践技巧和常见误区，助力开发者快速提升应用性能与稳定性。</p>\\n<hr>\\n"}')}}]);