"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[1779],{66262:(s,i)=>{i.A=(s,i)=>{const a=s.__vccOpts||s;for(const[s,n]of i)a[s]=n;return a}},9552:(s,i,a)=>{a.r(i),a.d(i,{comp:()=>W,data:()=>V});var n=a(20641);const e=a.p+"assets/img/MySQL体系结构.e8e9af1c.png",l=a.p+"assets/img/MySQL体系结构层级含义.2a96599d.png",t=a.p+"assets/img/逻辑存储结构.1f963d0b.png",p=a.p+"assets/img/二叉树.14779c95.png",d=a.p+"assets/img/红黑树.af0ea22a.png",r=a.p+"assets/img/B-Tree结构.fc88d31d.png",h=a.p+"assets/img/B+Tree结构图.87b83263.png",c=a.p+"assets/img/结构图.e9ca34b0.png",k=a.p+"assets/img/原理图.9f42e0d0.png",o=a.p+"assets/img/演示图.60c240c9.png",g=a.p+"assets/img/视图等内容的总结.2bb0626c.png",u=a.p+"assets/img/51083972978.1a5924fb.png",v=a.p+"assets/img/fqweqwegqg.606426e8.png",b=a.p+"assets/img/qrer231r123r.382f4777.png",A=a.p+"assets/img/qewf23f.55bd4564.png",m=a.p+"assets/img/qweg2431123qw.2eae8c14.png",y=a.p+"assets/img/qwegfqew24.d4ed916a.png",B=a.p+"assets/img/ewqqeg423.a39dd9dd.png",f=a.p+"assets/img/ewqg1341.aaeaa592.png",D=a.p+"assets/img/qewg13g423f.26828ea4.png",F=a.p+"assets/img/qwef12t132r.42145a3f.png",_=a.p+"assets/img/910310644164.15d3653d.png",E=a.p+"assets/img/2633356152.d4038bfe.png",C=a.p+"assets/img/21810694716.19de5ffe.png",x=a.p+"assets/img/71896219103.c5f966cf.png",L=a.p+"assets/img/6345845897.8b3d1754.png",S=a.p+"assets/img/1192969375.49dccab0.png",T=a.p+"assets/img/10723932987.2d55a527.png",I=a.p+"assets/img/7521579557.5eaa91f4.png",w=a.p+"assets/img/9225237599.800d8e8c.png",R=a.p+"assets/img/921810810932.83f940f7.png",N=a.p+"assets/img/84711022753.89f76425.png",q=a.p+"assets/img/6934998817.11fa588f.png",O=a.p+"assets/img/3233394951.16121400.png",M=a.p+"assets/img/10103131010198.929c9e11.png",U=a.p+"assets/img/1285451886.fd4f0502.png",Q=a.p+"assets/img/8210310352105.55106af2.png",H=a.p+"assets/img/479211610103.872a605c.png",z=a.p+"assets/img/34108898837.287ccd0f.png",P={},W=(0,a(66262).A)(P,[["render",function(s,i){return(0,n.uX)(),(0,n.CE)("div",null,i[0]||(i[0]=[(0,n.Fv)('<h1 id="_2-进阶篇" tabindex="-1"><a class="header-anchor" href="#_2-进阶篇"><span>2.进阶篇</span></a></h1><h2 id="_2-1-存储引擎" tabindex="-1"><a class="header-anchor" href="#_2-1-存储引擎"><span>2.1 存储引擎</span></a></h2><p>MySQL体系结构：</p><p><img src="'+e+'" alt="结构图" loading="lazy"><img src="'+l+'" alt="层级描述" loading="lazy"></p><p>存储引擎就是存储数据、建立索引、更新/查询数据等技术的实现方式。存储引擎是基于表而不是基于库的，所以存储引擎也可以被称为表引擎。 默认存储引擎是InnoDB。</p><p>相关操作：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-- 查询建表语句</span></span>\n<span class="line"><span>show create table account;</span></span>\n<span class="line"><span>-- 建表时指定存储引擎</span></span>\n<span class="line"><span>CREATE TABLE 表名(</span></span>\n<span class="line"><span>\t...</span></span>\n<span class="line"><span>) ENGINE=INNODB;</span></span>\n<span class="line"><span>-- 查看当前数据库支持的存储引擎</span></span>\n<span class="line"><span>show engines;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-1-1-innodb" tabindex="-1"><a class="header-anchor" href="#_2-1-1-innodb"><span>2.1.1 InnoDB</span></a></h3><p>InnoDB 是一种兼顾高可靠性和高性能的通用存储引擎，在 MySQL 5.5 之后，InnoDB 是默认的 MySQL 引擎</p><p>特点：</p><ul><li>DML 操作遵循 ACID 模型，支持<strong>事务</strong></li><li><strong>行级锁</strong>，提高并发访问性能</li><li>支持<strong>外键</strong>约束，保证数据的完整性和正确性</li></ul><p>文件：</p><ul><li>xxx.ibd: xxx代表表名，InnoDB 引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm、sdi）、数据和索引。</li></ul><p>参数：innodb_file_per_table，决定多张表共享一个表空间还是每张表对应一个表空间</p><p>知识点：</p><p>查看 Mysql 变量： <code>show variables like &#39;innodb_file_per_table&#39;;</code></p><p>从idb文件提取表结构数据： （在cmd运行） <code>ibd2sdi xxx.ibd</code></p><p>InnoDB 逻辑存储结构： <img src="'+t+'" alt="InnoDB逻辑存储结构" loading="lazy"></p><h3 id="_2-1-2-myisam" tabindex="-1"><a class="header-anchor" href="#_2-1-2-myisam"><span>2.1.2 MyISAM</span></a></h3><p>MyISAM 是 MySQL 早期的默认存储引擎。</p><p>特点：</p><ul><li>不支持事务，不支持外键</li><li>支持表锁，不支持行锁</li><li>访问速度快</li></ul><p>文件：</p><ul><li>xxx.sdi: 存储表结构信息</li><li>xxx.MYD: 存储数据</li><li>xxx.MYI: 存储索引</li></ul><h3 id="_2-1-3-memory" tabindex="-1"><a class="header-anchor" href="#_2-1-3-memory"><span>2.1.3 Memory</span></a></h3><p>Memory 引擎的表数据是存储在内存中的，受硬件问题、断电问题的影响，只能将这些表作为临时表或缓存使用。</p><p>特点：</p><ul><li>存放在内存中，速度快</li><li>hash索引（默认）</li></ul><p>文件：</p><ul><li>xxx.sdi: 存储表结构信息</li></ul><h3 id="_2-1-4-存储引擎特点" tabindex="-1"><a class="header-anchor" href="#_2-1-4-存储引擎特点"><span>2.1.4 存储引擎特点</span></a></h3><table><thead><tr><th>特点</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>存储限制</td><td>64TB</td><td>有</td><td>有</td></tr><tr><td>事务安全</td><td>支持</td><td>-</td><td>-</td></tr><tr><td>锁机制</td><td>行锁</td><td>表锁</td><td>表锁</td></tr><tr><td>B+tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash索引</td><td>-</td><td>-</td><td>支持</td></tr><tr><td>全文索引</td><td>支持（5.6版本之后）</td><td>支持</td><td>-</td></tr><tr><td>空间使用</td><td>高</td><td>低</td><td>N/A</td></tr><tr><td>内存使用</td><td>高</td><td>低</td><td>中等</td></tr><tr><td>批量插入速度</td><td>低</td><td>高</td><td>高</td></tr><tr><td>支持外键</td><td>支持</td><td>-</td><td>-</td></tr></tbody></table><h3 id="_2-1-5-存储引擎的选择" tabindex="-1"><a class="header-anchor" href="#_2-1-5-存储引擎的选择"><span>2.1.5 存储引擎的选择</span></a></h3><p>在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。</p><ul><li>InnoDB: 如果应用对事物的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，则 InnoDB 是比较合适的选择</li><li>MyISAM: 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不高，那这个存储引擎是非常合适的。</li><li>Memory: 将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。Memory 的缺陷是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性</li></ul><p>电商中的足迹和评论适合使用 MyISAM 引擎，缓存适合使用 Memory 引擎。</p><h2 id="_2-2-索引" tabindex="-1"><a class="header-anchor" href="#_2-2-索引"><span>2.2 索引</span></a></h2><p>索引是帮助 MySQL <strong>高效获取数据</strong>的<strong>数据结构（有序）</strong>。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查询算法，这种数据结构就是索引。</p><p>优缺点：</p><p>优点：</p><ul><li>提高数据检索效率，降低数据库的IO成本</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU的消耗</li></ul><p>缺点：</p><ul><li>索引列也是要占用空间的</li><li>索引大大提高了查询效率，但降低了更新的速度，比如 INSERT、UPDATE、DELETE</li></ul><h3 id="_2-2-1-索引结构" tabindex="-1"><a class="header-anchor" href="#_2-2-1-索引结构"><span>2.2.1 索引结构</span></a></h3><table><thead><tr><th>索引结构</th><th>描述</th></tr></thead><tbody><tr><td>B+Tree</td><td>最常见的索引类型，大部分引擎都支持B+树索引</td></tr><tr><td>Hash</td><td>底层数据结构是用哈希表实现，只有精确匹配索引列的查询才有效，不支持范围查询</td></tr><tr><td>R-Tree(空间索引)</td><td>空间索引是 MyISAM 引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少</td></tr><tr><td>Full-Text(全文索引)</td><td>是一种通过建立倒排索引，快速匹配文档的方式，类似于 Lucene, Solr, ES</td></tr></tbody></table><table><thead><tr><th>索引</th><th>InnoDB</th><th>MyISAM</th><th>Memory</th></tr></thead><tbody><tr><td>B+Tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>Hash索引</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>R-Tree索引</td><td>不支持</td><td>支持</td><td>不支持</td></tr><tr><td>Full-text</td><td>5.6版本后支持</td><td>支持</td><td>不支持</td></tr></tbody></table><h4 id="_2-2-1-1-b-tree" tabindex="-1"><a class="header-anchor" href="#_2-2-1-1-b-tree"><span>2.2.1.1 B-Tree</span></a></h4><figure><img src="'+p+'" alt="二叉树" tabindex="0" loading="lazy"><figcaption>二叉树</figcaption></figure><p>二叉树的缺点可以用红黑树来解决： <img src="'+d+'" alt="红黑树" loading="lazy"> 红黑树也存在大数据量情况下，层级较深，检索速度慢的问题。</p><p>为了解决上述问题，可以使用 B-Tree 结构。 B-Tree (多路平衡查找树) 以一棵最大度数（max-degree，指一个节点的子节点个数）为5（5阶）的 b-tree 为例（每个节点最多存储4个key，5个指针）</p><figure><img src="'+r+'" alt="B-Tree结构" tabindex="0" loading="lazy"><figcaption>B-Tree结构</figcaption></figure><blockquote><p>B-Tree 的数据插入过程动画参照：https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68 演示地址：https://www.cs.usfca.edu/~galles/visualization/BTree.html</p></blockquote><h4 id="_2-2-1-2-b-tree" tabindex="-1"><a class="header-anchor" href="#_2-2-1-2-b-tree"><span>2.2.1.2 B+Tree</span></a></h4><p>结构图：</p><figure><img src="'+h+'" alt="B+Tree结构图" tabindex="0" loading="lazy"><figcaption>B+Tree结构图</figcaption></figure><blockquote><p>演示地址：https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html</p></blockquote><p>与 B-Tree 的区别：</p><ul><li>所有的数据都会出现在叶子节点</li><li>叶子节点形成一个单向链表</li></ul><p>MySQL 索引数据结构对经典的 B+Tree 进行了优化。在原 B+Tree 的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的 B+Tree，提高区间访问的性能。</p><figure><img src="'+c+'" alt="MySQL B+Tree 结构图" tabindex="0" loading="lazy"><figcaption>MySQL B+Tree 结构图</figcaption></figure><h4 id="_2-2-1-3-hash" tabindex="-1"><a class="header-anchor" href="#_2-2-1-3-hash"><span>2.2.1.3 Hash</span></a></h4><p>哈希索引就是采用一定的hash算法，将键值换算成新的hash值，映射到对应的槽位上，然后存储在hash表中。 如果两个（或多个）键值，映射到一个相同的槽位上，他们就产生了hash冲突（也称为hash碰撞），可以通过链表来解决。</p><p>特点：</p><ul><li>Hash索引只能用于对等比较（=、in），不支持范围查询（betwwn、&gt;、&lt;、…）</li><li>无法利用索引完成排序操作</li><li>查询效率高，通常只需要一次检索就可以了，效率通常要高于 B+Tree 索引</li></ul><p>存储引擎支持：</p><ul><li>Memory</li><li>InnoDB: 具有自适应hash功能，hash索引是存储引擎根据 B+Tree 索引在指定条件下自动构建的</li></ul><h4 id="_2-2-1-4-面试题" tabindex="-1"><a class="header-anchor" href="#_2-2-1-4-面试题"><span>2.2.1.4 面试题</span></a></h4><ol><li>为什么 InnoDB 存储引擎选择使用 B+Tree 索引结构？</li></ol><ul><li>相对于二叉树，层级更少，搜索效率高</li><li>对于 B-Tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储的键值减少，指针也跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低</li><li>相对于 Hash 索引，B+Tree 支持范围匹配及排序操作</li></ul><h3 id="_2-2-2-索引分类" tabindex="-1"><a class="header-anchor" href="#_2-2-2-索引分类"><span>2.2.2 索引分类</span></a></h3><table><thead><tr><th>分类</th><th>含义</th><th>特点</th><th>关键字</th></tr></thead><tbody><tr><td>主键索引</td><td>针对于表中主键创建的索引</td><td>默认自动创建，只能有一个</td><td>PRIMARY</td></tr><tr><td>唯一索引</td><td>避免同一个表中某数据列中的值重复</td><td>可以有多个</td><td>UNIQUE</td></tr><tr><td>常规索引</td><td>快速定位特定数据</td><td>可以有多个</td><td></td></tr><tr><td>全文索引</td><td>全文索引查找的是文本中的关键词，而不是比较索引中的值</td><td>可以有多个</td><td>FULLTEXT</td></tr></tbody></table><p>在 InnoDB 存储引擎中，根据索引的存储形式，又可以分为以下两种：</p><table><thead><tr><th>分类</th><th>含义</th><th>特点</th></tr></thead><tbody><tr><td>聚集索引(Clustered Index)</td><td>将数据存储与索引放一块，索引结构的叶子节点直接存储行数据。<strong>数据表的行数据本身是按照聚集索引的顺序存储的</strong></td><td>必须有，而且只有一个。一般是主键</td></tr><tr><td>二级索引(Secondary Index)</td><td>将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键</td><td>可以存在多个</td></tr></tbody></table><p>演示图：</p><p><img src="'+k+'" alt="大致原理" loading="lazy"><img src="'+o+'" alt="演示图" loading="lazy"></p><p>聚集索引选取规则：</p><ul><li>如果存在主键，主键索引就是聚集索引</li><li>如果不存在主键，将使用第一个唯一(UNIQUE)索引作为聚集索引</li><li>如果表没有主键或没有合适的唯一索引，则 InnoDB 会自动生成一个 rowid 作为隐藏的聚集索引</li></ul><h4 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题"><span>思考题</span></a></h4><ol><li>以下 SQL 语句，哪个执行效率高？为什么？</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>select * from user where id = 10;</span></span>\n<span class="line"><span>select * from user where name = &#39;Arm&#39;;</span></span>\n<span class="line"><span>-- 备注：id为主键，name字段创建的有索引</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>答：第一条语句，因为第二条需要回表查询，相当于两个步骤。</p><ol start="2"><li>InnoDB 主键索引的 B+Tree 高度为多少？</li></ol><p>答：假设一行数据大小为1k，一页中可以存储16行这样的数据。InnoDB 的指针占用6个字节的空间，主键假设为bigint，占用字节数为8. 可得公式：<code>n * 8 + (n + 1) * 6 = 16 * 1024</code>，其中 8 表示 bigint 占用的字节数，n 表示当前节点存储的key的数量，(n + 1) 表示指针数量（比key多一个）。算出n约为1170。</p><p>如果树的高度为2，那么他能存储的数据量大概为：<code>1171 * 16 = 18736</code>； 如果树的高度为3，那么他能存储的数据量大概为：<code>1171 * 1171 * 16 = 21939856</code>。</p><p>另外，如果有成千上万的数据，那么就要考虑分表，涉及运维篇知识。</p><h3 id="_2-2-3-语法" tabindex="-1"><a class="header-anchor" href="#_2-2-3-语法"><span>2.2.3 语法</span></a></h3><p>创建索引： <code>CREATE [ UNIQUE | FULLTEXT ] INDEX index_name ON table_name (index_col_name, ...);</code> 如果不加 CREATE 后面不加索引类型参数，则创建的是常规索引</p><p>查看索引： <code>SHOW INDEX FROM table_name;</code></p><p>删除索引： <code>DROP INDEX index_name ON table_name;</code></p><p>案例：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-- name字段为姓名字段，该字段的值可能会重复，为该字段创建索引</span></span>\n<span class="line"><span>create index idx_user_name on tb_user(name);</span></span>\n<span class="line"><span>-- phone手机号字段的值非空，且唯一，为该字段创建唯一索引</span></span>\n<span class="line"><span>create unique index idx_user_phone on tb_user (phone);</span></span>\n<span class="line"><span>-- 为profession, age, status创建联合索引</span></span>\n<span class="line"><span>create index idx_user_pro_age_stat on tb_user(profession, age, status);</span></span>\n<span class="line"><span>-- 为email建立合适的索引来提升查询效率</span></span>\n<span class="line"><span>create index idx_user_email on tb_user(email);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>-- 删除索引</span></span>\n<span class="line"><span>drop index idx_user_email on tb_user;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-4-sql性能分析" tabindex="-1"><a class="header-anchor" href="#_2-2-4-sql性能分析"><span>2.2.4 SQL性能分析</span></a></h3><h4 id="查看执行频次" tabindex="-1"><a class="header-anchor" href="#查看执行频次"><span>查看执行频次</span></a></h4><p>查看当前数据库的 INSERT, UPDATE, DELETE, SELECT 访问频次： <code>SHOW GLOBAL STATUS LIKE &#39;Com_______&#39;;</code> 或者 <code>SHOW SESSION STATUS LIKE &#39;Com_______&#39;;</code> 例：<code>show global status like &#39;Com_______&#39;</code></p><h4 id="慢查询日志" tabindex="-1"><a class="header-anchor" href="#慢查询日志"><span>慢查询日志</span></a></h4><p>慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有SQL语句的日志。 MySQL的慢查询日志默认没有开启，需要在MySQL的配置文件（/etc/my.cnf）中配置如下信息： # 开启慢查询日志开关 slow_query_log=1 # 设置慢查询日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志 long_query_time=2 更改后记得重启MySQL服务，日志文件位置：/var/lib/mysql/localhost-slow.log</p><p>查看慢查询日志开关状态： <code>show variables like &#39;slow_query_log&#39;;</code></p><h4 id="profile" tabindex="-1"><a class="header-anchor" href="#profile"><span>profile</span></a></h4><p>show profile 能在做SQL优化时帮我们了解时间都耗费在哪里。通过 have_profiling 参数，能看到当前 MySQL 是否支持 profile 操作： <code>SELECT @@have_profiling;</code> profiling 默认关闭，可以通过set语句在session/global级别开启 profiling： <code>SET profiling = 1;</code> 查看所有语句的耗时： <code>show profiles;</code> 查看指定query_id的SQL语句各个阶段的耗时： <code>show profile for query query_id;</code> 查看指定query_id的SQL语句CPU的使用情况 <code>show profile cpu for query query_id;</code></p><h4 id="explain" tabindex="-1"><a class="header-anchor" href="#explain"><span>explain</span></a></h4><p>EXPLAIN 或者 DESC 命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。 语法： # 直接在select语句之前加上关键字 explain / desc EXPLAIN SELECT 字段列表 FROM 表名 HWERE 条件;</p><p>EXPLAIN 各字段含义：</p><ul><li>id：select 查询的序列号，表示查询中执行 select 子句或者操作表的顺序（id相同，执行顺序从上到下；id不同，值越大越先执行）</li><li>select_type：表示 SELECT 的类型，常见取值有 SIMPLE（简单表，即不适用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION中的第二个或者后面的查询语句）、SUBQUERY（SELECT/WHERE之后包含了子查询）等</li><li>type：表示连接类型，性能由好到差的连接类型为 NULL、system、const、eq_ref、ref、range、index、all</li><li>possible_key：可能应用在这张表上的索引，一个或多个</li><li>Key：实际使用的索引，如果为 NULL，则没有使用索引</li><li>Key_len：表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好</li><li>rows：MySQL认为必须要执行的行数，在InnoDB引擎的表中，是一个估计值，可能并不总是准确的</li><li>filtered：表示返回结果的行数占需读取行数的百分比，filtered的值越大越好</li></ul><h3 id="_2-2-5-使用规则" tabindex="-1"><a class="header-anchor" href="#_2-2-5-使用规则"><span>2.2.5 使用规则</span></a></h3><h4 id="_2-2-5-1-最左前缀法则" tabindex="-1"><a class="header-anchor" href="#_2-2-5-1-最左前缀法则"><span>2.2.5.1 最左前缀法则</span></a></h4><p>联合索引是由多个列（字段）组成的，而在查询时，数据库通常只会使用联合索引的前缀部分进行匹配。最左前缀法则的意思是，当查询条件中包含多个列时，数据库会从联合索引的最左列（第一个列）开始匹配，依次向右扩展，只要查询条件的列与索引的前缀列顺序一致，索引就能被有效使用。</p><p><strong>具体规则</strong>：</p><ol><li><strong>顺序一致</strong>：当查询条件的列顺序与联合索引中的列<strong>顺序一致</strong>时，联合索引会<strong>完全有效</strong>。</li><li><strong>前缀匹配</strong>：联合索引只会有效地使用索引的前缀部分。换句话说，如果查询条件的列顺序与联合索引的最左部分匹配，那么该索引能够被利用；否则，就<strong>不能完全</strong>利用索引。</li><li><strong>不跳跃列</strong>：联合索引中的列顺序不能跳跃。例如，如果联合索引是 <code>(A, B, C)</code>，查询条件是 <code>A = 1 AND C = 3</code>，则即使索引中包含 <code>A</code> 和 <code>C</code>，也不能使用索引，必须按顺序包含 <code>A</code> 和 <code>B</code>，因为 <code>B</code> 是 <code>A</code> 和 <code>C</code> 之间的列。</li></ol><p><strong>注意点</strong></p><ul><li>联合索引中尽量在业务允许的前提下使用&lt;=或&gt;=</li></ul><h4 id="_2-2-5-2-索引失效情况" tabindex="-1"><a class="header-anchor" href="#_2-2-5-2-索引失效情况"><span>2.2.5.2 索引失效情况</span></a></h4><ol><li><strong>函数运算</strong>。如：<code>explain select * from tb_user where substring(phone, 10, 2) = &#39;15&#39;;</code></li><li><strong>字符串不加单引号</strong>。如：<code>explain select * from tb_user where phone = 17799990015;</code>，此处phone的值没有加引号</li><li><strong>模糊查询中头部模糊</strong>。如：<code>explain select * from tb_user where profession like &#39;%工程&#39;;</code>，前后都有 % 也会失效。</li><li><strong>or连接条件两侧不全有索引</strong>。</li><li><strong>数据分布影响</strong>，如果 MySQL 评估使用索引比全表更慢，则不使用索引。</li></ol><h4 id="_2-2-5-3-sql-提示" tabindex="-1"><a class="header-anchor" href="#_2-2-5-3-sql-提示"><span>2.2.5.3 SQL 提示</span></a></h4><p>是优化数据库的一个重要手段，简单来说，就是告诉MySQL怎么处理。</p><ul><li>使用指定索引： <code>explain select * from tb_user use index(idx_user_pro) where profession=&quot;软件工程&quot;;</code></li><li>不使用指定索引： <code>explain select * from tb_user ignore index(idx_user_pro) where profession=&quot;软件工程&quot;;</code></li><li>强制使用指定索引： <code>explain select * from tb_user force index(idx_user_pro) where profession=&quot;软件工程&quot;;</code></li></ul><p>use 是建议，实际使用经MySQL评估后确定，force是强制使用。</p><h4 id="_2-2-5-4-覆盖索引-回表查询" tabindex="-1"><a class="header-anchor" href="#_2-2-5-4-覆盖索引-回表查询"><span>2.2.5.4 覆盖索引&amp;回表查询</span></a></h4><ul><li><strong>覆盖索引</strong>：查询所需的所有列都在索引中，直接通过索引获取数据，无需回表，性能更高。</li><li><strong>回表查询</strong>：查询的数据列不完全在索引中，需要通过索引找到数据的物理位置（通常使用聚集索引），然后再访问表来获取完整的数据，性能较低。</li></ul><p>🎉 尽量使用覆盖索引（查询使用了索引，并且需要返回的列，在该索引中已经全部能找到），减少 select *。</p><p><strong>explain 中 extra 字段含义：</strong></p><ul><li><code>using index condition</code>：查找使用了索引，但是需要回表查询数据</li><li><code>using where; using index;</code>：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询</li></ul><p><strong>解释：</strong></p><p>如果在聚集索引中直接能找到对应的行，则直接返回行数据，只需要一次查询，哪怕是select *；如果在辅助索引中找聚集索引，如<code>select id, name from xxx where name=&#39;xxx&#39;;</code>，也只需要通过辅助索引(name)查找到对应的id，返回name和name索引对应的id即可，只需要一次查询；如果是通过辅助索引查找其他字段，则需要回表查询，如<code>select id, name, gender from xxx where name=&#39;xxx&#39;;</code></p><p>所以尽量不要用<code>select *</code>，<strong>容易出现回表查询</strong>，降低效率，除非有联合索引包含了所有字段</p><p><strong>面试题：</strong></p><p>一张表，有四个字段（id, username, password, status），由于数据量大，需要对以下SQL语句进行优化，该如何进行才是最优方案： <code>select id, username, password from tb_user where username=&#39;itcast&#39;;</code></p><p>解：给username和password字段建立联合索引，则不需要回表查询，直接覆盖索引</p><h4 id="_2-2-5-5-前缀索引" tabindex="-1"><a class="header-anchor" href="#_2-2-5-5-前缀索引"><span>2.2.5.5 前缀索引</span></a></h4><p>当字段类型为字符串（varchar, text等）时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘IO，影响查询效率，此时可以只降字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率。</p><p><strong>语法</strong>：<code>create index idx_xxxx on table_name(columnn(n));</code></p><p><strong>前缀长度</strong>：可以根据索引的选择性来决定，而选择性是指不重复的索引值（基数）和数据表的记录总数的比值，索引<strong>选择性越高则查询效率越高</strong>，唯一索引的选择性是1，这是最好的索引选择性，性能也是最好的。</p><p><strong>选择性公式</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>select count(distinct email) / count(*) from tb_user;</span></span>\n<span class="line"><span>select count(distinct substring(email, 1, 5)) / count(*) from tb_user;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>🌱 show index 里面的sub_part可以看到截取的长度</p><p>🌊 前缀索引一定会回表查询：前缀索引只包含列的部分信息（例如字符串的前几个字符），而不是整个列的完整内容。当查询需要完整的字段数据时，索引无法提供这些数据，因此必须回表到原始数据表中获取完整信息。</p><h4 id="_2-2-5-6-单列索引-联合索引" tabindex="-1"><a class="header-anchor" href="#_2-2-5-6-单列索引-联合索引"><span>2.2.5.6 单列索引&amp;联合索引</span></a></h4><ul><li>单列索引：即一个索引只包含单个列</li><li>联合索引：即一个索引包含了多个列</li></ul><p>在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建议建立联合索引（尽量覆盖索引），而非单列索引。</p><p>单列索引情况： <code>explain select id, phone, name from tb_user where phone = &#39;17799990010&#39; and name = &#39;韩信&#39;;</code> 这句只会用到phone索引字段（MySQL评估处一个效率高的单列索引，使用该索引后直接回表查询了）</p><h5 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h5><ul><li>多条件联合查询时，MySQL优化器会评估哪个字段的索引效率更高，会选择该索引完成本次查询</li></ul><h3 id="_2-2-6-设计原则" tabindex="-1"><a class="header-anchor" href="#_2-2-6-设计原则"><span>2.2.6 设计原则</span></a></h3><ol><li>针对于数据量较大，且查询比较频繁的表建立索引</li><li>针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引</li><li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高</li><li>如果是字符串类型的字段，字段长度较长，可以针对于字段的特点，建立前缀索引</li><li>尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率</li><li>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价就越大，会影响增删改的效率</li><li>如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询</li></ol><h2 id="_2-3-sql-优化" tabindex="-1"><a class="header-anchor" href="#_2-3-sql-优化"><span>2.3 SQL 优化</span></a></h2><h3 id="_2-3-1-插入数据" tabindex="-1"><a class="header-anchor" href="#_2-3-1-插入数据"><span>2.3.1 插入数据</span></a></h3><p><strong>普通插入：</strong></p><ol><li>采用批量插入（一次插入的数据不建议超过1000条）</li><li>手动提交事务</li><li>主键顺序插入</li></ol><p><strong>大批量插入：</strong> 如果一次性需要插入大批量数据，使用insert语句插入性能较低，此时可以使用MySQL数据库提供的<code>load</code>指令插入。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 客户端连接服务端时，加上参数 --local-infile（这一行在bash/cmd界面输入）</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mysql</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --local-infile</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -u</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> root</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 设置全局参数local_infile为1，开启从本地加载文件导入数据的开关</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">set</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> global</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> local_infile</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">elect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> @@local_infile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 执行load指令将准备好的数据，加载到表结构中</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">load</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> data</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> local</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> infile</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;/root/sql1.log&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> into</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> table</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;tb_user&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> fields</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> terminated</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> by</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;,&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> lines</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> terminated</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> by</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;\\n&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-2-主键优化" tabindex="-1"><a class="header-anchor" href="#_2-3-2-主键优化"><span>2.3.2 主键优化</span></a></h3><p>数据组织方式：在InnoDB存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为索引组织表（Index organized table, IOT）</p><p>页分裂：页可以为空，也可以填充一般，也可以填充100%，每个页包含了2-N行数据（如果一行数据过大，会行溢出），根据主键排列。</p><p>页合并：当删除一行记录时，实际上记录并没有被物理删除，只是记录被标记（flaged）为删除并且它的空间变得允许被其他记录声明使用。当页中删除的记录到达 MERGE_THRESHOLD（默认为页的50%），InnoDB会开始寻找最靠近的页（前后）看看是否可以将这两个页合并以优化空间使用。</p><p><code>MERGE_THRESHOLD</code>：合并页的阈值，可以自己设置，在创建表或创建索引时指定</p><blockquote><p>文字说明不够清晰明了，具体可以看视频里的PPT演示过程：https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90</p></blockquote><p>主键设计原则：</p><ul><li>满足业务需求的情况下，尽量降低主键的长度</li><li>插入数据时，尽量选择顺序插入，选择使用 AUTO_INCREMENT 自增主键</li><li>尽量不要使用 UUID 做主键或者是其他的自然主键，如身份证号</li><li>业务操作时，避免对主键的修改</li></ul><h3 id="_2-3-3-order-by优化" tabindex="-1"><a class="header-anchor" href="#_2-3-3-order-by优化"><span>2.3.3 order by优化</span></a></h3><ol><li><code>Using filesort</code>：通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区 sort buffer 中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序</li><li><code>Using index</code>：通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高</li></ol><p>如果order by字段全部使用升序排序或者降序排序，则都会走索引，但是如果一个字段升序排序，另一个字段降序排序，则不会走索引，explain的extra信息显示的是<code>Using index, Using filesort</code>，如果要优化掉Using filesort，则需要另外再创建一个索引，如：<code>create index idx_user_age_phone_ad on tb_user(age asc, phone desc);</code>，此时使用<code>select id, age, phone from tb_user order by age asc, phone desc;</code>会全部走索引</p><p>总结：</p><ul><li>根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则</li><li>尽量使用覆盖索引</li><li>多字段排序，一个升序一个降序，此时需要注意联合索引在创建时的规则（ASC/DESC）</li><li>如果不可避免出现filesort，大数据量排序时，可以适当增大排序缓冲区大小 sort_buffer_size（默认256k）</li></ul><h3 id="_2-3-4-group-by优化" tabindex="-1"><a class="header-anchor" href="#_2-3-4-group-by优化"><span>2.3.4 group by优化</span></a></h3><ul><li>在分组操作时，可以通过索引来提高效率</li><li>分组操作时，索引的使用也是满足最左前缀法则的</li></ul><p>如索引为<code>idx_user_pro_age_stat</code>，则句式可以是<code>select ... where profession order by age</code>，这样也符合最左前缀法则</p><h3 id="_2-3-5-limit优化" tabindex="-1"><a class="header-anchor" href="#_2-3-5-limit优化"><span>2.3.5 limit优化</span></a></h3><ul><li><p>覆盖索引</p></li><li><p>子查询</p></li></ul><p>常见的问题如<code>limit 2000000, 10</code>，此时需要 MySQL 排序前2000000条记录，但仅仅返回2000000 - 2000010的记录，其他记录丢弃，查询排序的代价非常大。 优化方案：一般分页查询时，通过创建覆盖索引能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化</p><p>例如：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-- 此语句耗时很长</span></span>\n<span class="line"><span>select * from tb_sku limit 9000000, 10;</span></span>\n<span class="line"><span>-- 通过覆盖索引加快速度，直接通过主键索引进行排序及查询</span></span>\n<span class="line"><span>select id from tb_sku order by id limit 9000000, 10;</span></span>\n<span class="line"><span>-- 下面的语句是错误的，因为 MySQL 不支持 in 里面使用 limit</span></span>\n<span class="line"><span>-- select * from tb_sku where id in (select id from tb_sku order by id limit 9000000, 10);</span></span>\n<span class="line"><span>-- 通过连表查询即可实现第一句的效果，并且能达到第二句的速度</span></span>\n<span class="line"><span>select * from tb_sku as s, (select id from tb_sku order by id limit 9000000, 10) as a where s.id = a.id;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-6-count优化" tabindex="-1"><a class="header-anchor" href="#_2-3-6-count优化"><span>2.3.6 count优化</span></a></h3><p>MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(<em>) 的时候会直接返回这个数，效率很高（前提是不适用where）； InnoDB 在执行 count(</em>) 时，需要把数据一行一行地从引擎里面读出来，然后累计计数。 优化方案：自己计数，如创建key-value表存储在内存或硬盘，或者是用redis</p><p><strong>count的几种用法：</strong></p><ul><li>如果count函数的参数（count里面写的那个字段）不是NULL（字段值不为NULL），累计值就加一，最后返回累计值</li><li>用法：count(*)、count(主键)、count(字段)、count(1)</li><li>count(主键)跟count(<em>)一样，因为主键不能为空；count(字段)只计算字段值不为NULL的行；count(1)引擎会为每行添加一个1，然后就count这个1，返回结果也跟count(</em>)一样；count(null)返回0</li></ul><p><strong>各种用法的性能：</strong></p><ul><li>count(主键)：InnoDB引擎会遍历整张表，把每行的主键id值都取出来，返回给服务层，服务层拿到主键后，直接按行进行累加（主键不可能为空）</li><li>count(字段)：没有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为null，不为null，计数累加；有not null约束的话，InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，直接按行进行累加</li><li>count(1)：InnoDB 引擎遍历整张表，但不取值。服务层对于返回的每一层，放一个数字 1 进去，直接按行进行累加</li><li>count(*)：InnoDB 引擎并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行进行累加</li></ul><p>按效率排序：<code>count(字段) &lt; count(主键) &lt; count(1) ≈ count(*)，所以尽量使用 count(*)</code></p><h3 id="_2-3-7-update优化-避免行锁升级为表锁" tabindex="-1"><a class="header-anchor" href="#_2-3-7-update优化-避免行锁升级为表锁"><span>2.3.7 update优化（避免行锁升级为表锁）</span></a></h3><p>InnoDB 的行锁是针对索引加的锁，不是针对记录加的锁，并且该索引不能失效，否则会从行锁升级为表锁。</p><p>如以下两条语句： <code>update student set no = &#39;123&#39; where id = 1;</code>，这句由于id有主键索引，所以只会锁这一行； <code>update student set no = &#39;123&#39; where name = &#39;test&#39;;</code>，这句由于name没有索引，所以会把整张表都锁住进行数据更新，解决方法是给name字段添加索引</p><h2 id="_2-4-视图-存储过程-触发器" tabindex="-1"><a class="header-anchor" href="#_2-4-视图-存储过程-触发器"><span>2.4 视图/存储过程/触发器</span></a></h2><figure><img src="'+g+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_2-4-1-视图" tabindex="-1"><a class="header-anchor" href="#_2-4-1-视图"><span>2.4.1 视图</span></a></h3><p>视图(View)是一种虚拟存在的表。视图中的数据并不在数据库中实际存在，行和列数据来自定义视图的查询中使用的表，并且是在使用视图时动态生成的。</p><p>通俗的讲，视图只保存了查询的SQL逻辑，不保存查询结果。所以我们在创建视图的时候，主要的工作就落在创建这条SQL查询语句上。</p><h4 id="_2-4-1-1-语法" tabindex="-1"><a class="header-anchor" href="#_2-4-1-1-语法"><span>2.4.1.1 语法</span></a></h4><p><strong>创建视图：</strong><code>CREATE [OR REPLACE] VIEW 视图名称(列名列表) AS SELECT语句 [WITH[CASCADED|LOCAL] CHECK OPTION]</code></p><p><strong>查询视图：</strong> 查看创建视图语句：<code>SHOW CRETE VIEW 视图名称;</code> 查看视图数据：<code>查看视图数据:SELECT * FROM 视图名称…;</code></p><p><strong>修改视图：</strong> 方式一： <code>CREATE [OR REPLACE] VIEW 视图名称(列名列表) AS SELECT语句 [WITH[CASCADEDLLOCAL] CHECK OPTION</code> 方式二： <code>ALTER VEW 视图名称(列名列表)AS SELECT语句 [WITH[CASCADED|LOCAL] CHECK OPTION]</code></p><p><strong>删除视图：</strong><code>DROP VIEW [IF EXISTS] 视图名称 </code></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 创建视图</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">create or replace</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> view</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> stu_v_1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> as</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">name</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> student </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 查询视图</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">show </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">create</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> view stu_v_1;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> stu_v_1;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 修改视图</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">create or replace</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> view</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> stu_v_1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> as</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">no</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> student </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">alter</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> view</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> stu_v_1 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">name</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> student </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 删除视图</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">drop</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> view</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> exists</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> stu_v_1;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-1-2-检查选项" tabindex="-1"><a class="header-anchor" href="#_2-4-1-2-检查选项"><span>2.4.1.2 检查选项</span></a></h4><p><strong>视图的检查选项：</strong></p><p>当使用WITH CHECK OPTION子句创建视图时，MySOL会通过视图检查正在更改的每个行，例如 插入，更新，删除，以使其符合视图的定义。MySQL允许基于另一个视图创建视图，它还会检查依赖视图中的规则以保持一致性。</p><p>为了确定检查的范围，mysql 提供了两个选项:CASCADED 和 LOCAL，默认值为CASCADED。</p><p><strong>cascaded：</strong> <strong>级联</strong>。插入数据时，会检查当前视图及当前视图依赖的所有视图，需要<strong>所有条件</strong>（不管依赖的视图有没有加检查选项语句）都满足才能够插入成功。</p><p><strong>local：<strong>插入数据时，对于该视图依赖的视图中</strong>含有检查语句的条件</strong>进行检查判断。</p><h4 id="_2-4-1-3-更新及作用" tabindex="-1"><a class="header-anchor" href="#_2-4-1-3-更新及作用"><span>2.4.1.3 更新及作用</span></a></h4><p><strong>视图的更新：</strong></p><p>要使视图可更新，视图中的行与基础表中的行之间<strong>必须存在一对一的关系</strong>。</p><p>如果视图包含以下任何一项，则该<strong>视图不可更新</strong>：</p><ol><li>聚合函数或窗口函数(SUM()、MIN()、MAX()、COUNT()等</li><li>DISTINCT</li><li>GROUP BY</li><li>HAVING</li><li>UNION 或者 UNION ALL</li></ol><p><strong>作用：</strong></p><ul><li><strong>简单</strong> 视图不仅可以简化用户对数据的理解，也可以简化他们的操作。那些被经常使用的查询可以被定义为视图，从而使得用户不必为以后的操作每次指定全部的条件。</li><li><strong>安全</strong> 数据库可以授权，但不能授权到数据库特定行和特定的列上。通过视图用户只能查询和修改他们所能见到的数据。</li><li><strong>数据独立</strong> 视图可帮助用户屏蔽真实表结构变化带来的影响。</li></ul><h4 id="_2-4-1-4-案例" tabindex="-1"><a class="header-anchor" href="#_2-4-1-4-案例"><span>2.4.1.4 案例</span></a></h4><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 1.为了保证数据库表的安全性，开发人员在操作tb_user表时，只能看到的用户的基本字段，屏蔽手机号和邮箱两个字段。</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">create</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> view</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> tb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> user view </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,profession, age,gender,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">status</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,createtime </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> tb_user;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> *</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> tb user view;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 2.查询每个学生所选修的课程（三张表联查），这个功能在很多的业务中都有使用到，为了简化操作，定义一个视图。</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">create</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> view</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> tb_stu_course_view</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> student_name, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">no</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> student_no, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> course_name </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> student s, stuent_course sc, course c </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> sc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">studentid</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> and</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> sc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">courseid</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 以后每次只需要进行查询视图即可</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> tb_stu_course_view;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-2-存储过程" tabindex="-1"><a class="header-anchor" href="#_2-4-2-存储过程"><span>2.4.2 存储过程</span></a></h3><p>存储过程其实就类似 java，c 这种语言，这一部分可以通过文档快速学习，不懂的再回过头看视频。</p><p>存储过程是事先经过编译并存储在数据库中的一段 SQL语句的集合，调用存储过程可以简化应用开发人员的很多工作，减少数据在数据库和应用服务器之间的传输，对于提高数据处理的效率是有好处的。</p><p>存储过程思想上很简单，就是数据库 SOL语言层面的代码封装与重用。</p><p><strong>特点：</strong></p><ul><li>封装，复用</li><li>可以接收参数，也可以返回数据</li><li>减少网络交互，效率提升</li></ul><h4 id="_2-4-2-1-操作" tabindex="-1"><a class="header-anchor" href="#_2-4-2-1-操作"><span>2.4.2.1 操作</span></a></h4><p><strong>查看：</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">* </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> INFORMATION_SCHEMA</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ROUTINES</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ROUTINE_SCHEMA</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;xx&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">--查询xx数据库的存储过程及状态信息</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">SHOW </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> PROCEDURE</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> --存储过程名称;查询某个存储过程的定义</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>删除：</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">DROP</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> PROCEDURE</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> [IF EXISTS]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">存储过程名称;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>案例</strong>：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 存储过程基本语法</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 创建</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">create</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> procedure</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> p1()</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  select</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(*)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> student;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 调用</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> p1();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 查看</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> information_schema</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ROUTINES</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ROUTINE_SCHEMA </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;itcast&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">show </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">create</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> procedure</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> p1;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 删除</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">drop</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> procedure</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> exists</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> p1;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-2-2-变量" tabindex="-1"><a class="header-anchor" href="#_2-4-2-2-变量"><span>2.4.2.2 变量</span></a></h4><h5 id="系统变量" tabindex="-1"><a class="header-anchor" href="#系统变量"><span>系统变量</span></a></h5><p>系统变量 是MySQL服务器提供，不是用户定义的，属于服务器层面。</p><p>分为<code>全局变量(GLOBAL)、会话变量(SESSION)</code>。</p><p>查看系统变量</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">SHOW </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[SESSION |GLOBAL]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> VARIABLES ; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 查看所有系统变量</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">SHOW</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[SESSION|GLOBAL]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> VARIABLES </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">LIKE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 可以通过LKE模糊匹配方式查找变量</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @@</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[SESSION|GLOBAL]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">系统变量名; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 查看指定变量的值</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 查看系统变量</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">show </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">session</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> variables;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">show </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">session</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> variables </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">like</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;auto%&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">show glabal variables </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">like</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;auto%&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @@</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">global</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">autocommit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 全局autocommit变量的当前值</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 设置系统变量</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> session</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> autocommit </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">insert into</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> course(id, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">values</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;ES&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> global</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> auto</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> commit</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：</strong></p><ul><li>如果没有指定 session / global，默认 session，会话变量</li><li>MySQL 服务器重启之后，所设置的全局参数会失效，要想不失效，需要更改/etc/my.cnf 中的配置。</li></ul><h5 id="用户定义变量" tabindex="-1"><a class="header-anchor" href="#用户定义变量"><span>用户定义变量</span></a></h5><p>用户定义变量 是用户根据需要自己定义的变量，用户变量不用提前声明，在用的时候直接用“@变量名”使用就可以。其作用域为当前连接。</p><p><strong>赋值：</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- set赋值</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 推荐使用 := 操作符进行赋值，因为它是 MySQL 中专用的赋值操作符，更为清晰且一致。</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SET</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> @var_name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> expr;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SET</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> @var_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> expr;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SET</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> @var1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">@var2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;abc&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 可以一次性给多个变量赋值，用逗号分隔</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- SELECT ... INTO 语句</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 用于动态从数据库中查询并赋值给变量，常用于处理查询结果。</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 在存储过程中非常常见，尤其是在读取单行数据并将其存储到变量中时。</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> column_name </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">INTO</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> @var_name</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> table_name </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> condition;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- SELECT ... := 语句</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- SELECT 与 := 结合使用时，允许在查询结果中直接将值赋给变量。这通常用于在查询中直接对多个变量赋值，而不需要将结果存储到表中</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> @var_name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> expr </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> table_name </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> condition;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>SELECT @var_name;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>案例：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 变量：用户变量</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 赋值</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> @myname</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;itcast&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">用户定义变量</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> @mycolor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;red&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(*) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">into</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> @mycount</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> tb_user;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> @var1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> column1, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">@var2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> column2 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> table_name </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 使用</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> @myname</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">@myage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">@mycolor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">@mycount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> @abc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 输出为NULL</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：</strong></p><p>用户定义的变量无需对其进行声明或者初始化，只不过获取到的值为 NULL。</p><h5 id="局部变量" tabindex="-1"><a class="header-anchor" href="#局部变量"><span>局部变量</span></a></h5><p>局部变量 是根据需要定义的在局部生效的变量，访问之前，需要DECLARE声明。可用作存储过程内的局部变量和输入参数，局部变量的范围是在其内声明的BEGIN .. END块。</p><p><strong>声明：</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">DECLARE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 变量名 变量类型 </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[DEFAULT..]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>变量类型就是数据库字段类型:INT、BIGINT、CHAR、VARCHAR、DATE、TIME等。</p><p><strong>赋值：</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 变量名</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">值;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 变量名:</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">值;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 字段名 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">INTO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 变量名 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 表名 ...;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>案例：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 变量：局部变量</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 声明 - declare</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 赋值 -</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">create</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> procedure</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> p2()</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  declare</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> stu_count </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  select</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(*) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">into</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> stu_count </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> student;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> stu_count;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">call</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> p2();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-2-3-if-判断" tabindex="-1"><a class="header-anchor" href="#_2-4-2-3-if-判断"><span>2.4.2.3 if 判断</span></a></h4><p>语法：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">IF</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 条件1 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">THEN</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ...</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ELSEIF 条件2 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">THEN</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> -- 可选</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ...</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ELSE</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">              -- 可选</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ...</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">END</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> IF</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>案例：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">create</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> procedure</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> p3()</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  declare</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> score </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 58</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  declare</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> result </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">varchar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> score </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 85</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> then</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> result :</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;优秀&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  elseif score </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 60</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> then</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> result :</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;及格&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  else</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> result :</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;不及格&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  end</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> result;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-2-4-参数-in-out-inout" tabindex="-1"><a class="header-anchor" href="#_2-4-2-4-参数-in-out-inout"><span>2.4.2.4 参数（in, out, inout)</span></a></h4><table><thead><tr><th>类型</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td>IN</td><td>该类参数作为输入，也就是需要调用时传入值</td><td>默认</td></tr><tr><td>OUT</td><td>该类参数作为输出，也就是该参数可以作为返回值</td><td></td></tr><tr><td>INOUT</td><td>既可以作为输入参数，也可以作为输出参数****</td><td></td></tr></tbody></table><p><strong>用法：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>CREATE PROCEDURE 存储过程名称([IN/OUT/INOUT 参数名 参数类型 ])</span></span>\n<span class="line"><span>BEGIN</span></span>\n<span class="line"><span>    -- SQL语句</span></span>\n<span class="line"><span>END :</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>案例：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-- 根据传入(in)参数score，判定当前分数对应的分数等级，并返回(out)</span></span>\n<span class="line"><span>-- score &gt;= 85分，等级为优秀。</span></span>\n<span class="line"><span>-- score &gt;= 60分 且 score &lt; 85分，等级为及格</span></span>\n<span class="line"><span>-- score &lt; 60分，等级为不及格。</span></span>\n<span class="line"><span>create procedure p3(in score int, out result varchar(10))</span></span>\n<span class="line"><span>begin</span></span>\n<span class="line"><span>  if score &gt;= 85 then</span></span>\n<span class="line"><span>    set result :=&#39;优秀&#39;;</span></span>\n<span class="line"><span>  elseif score &gt;= 60 then</span></span>\n<span class="line"><span>    set result :=&#39;及格&#39;;</span></span>\n<span class="line"><span>  else</span></span>\n<span class="line"><span>    set result :=&#39;不及格&#39;;</span></span>\n<span class="line"><span>  end if;</span></span>\n<span class="line"><span>  select result;</span></span>\n<span class="line"><span>end;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>-- 将传入的200分制的分数，进行换算，换算成百分制，然后返回分数 --&gt; inout</span></span>\n<span class="line"><span>create procedure p5(inout score double)</span></span>\n<span class="line"><span>begin</span></span>\n<span class="line"><span>  set score := score * 0.5;</span></span>\n<span class="line"><span>end;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>set @score = 198;</span></span>\n<span class="line"><span>call p5(score);</span></span>\n<span class="line"><span>select @score;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-2-5-case" tabindex="-1"><a class="header-anchor" href="#_2-4-2-5-case"><span>2.4.2.5 case</span></a></h4><p><strong>语法一：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>CASE case value</span></span>\n<span class="line"><span>  WHEN when_value1 THEN statement_list1</span></span>\n<span class="line"><span>  [WHEN when_value2 THEN statement_list2]...</span></span>\n<span class="line"><span>  [ELSE statement_list ]</span></span>\n<span class="line"><span>END CASE;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>语法二：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>CASE</span></span>\n<span class="line"><span>  WHEN search_conditionl THEN statement_list1</span></span>\n<span class="line"><span>  WHEN search_condition2 THEN statement_list2]...</span></span>\n<span class="line"><span>  [ELSE statement_list]</span></span>\n<span class="line"><span>END CASE;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>案例：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-- case</span></span>\n<span class="line"><span>-- 根据传入的月份，判定月份所属的季节(要求采用case结构)</span></span>\n<span class="line"><span>-- 1-3月份，为第一季度</span></span>\n<span class="line"><span>-- 4-6月份，为第二季度</span></span>\n<span class="line"><span>-- 7-9月份，为第三季度</span></span>\n<span class="line"><span>-- 10-12月份，为第四季度</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>create procedure p6(in month int)</span></span>\n<span class="line"><span>begin </span></span>\n<span class="line"><span>  declare result varchar(10);</span></span>\n<span class="line"><span>  case </span></span>\n<span class="line"><span>    when month &gt;= 1 and month &lt;= 3 then</span></span>\n<span class="line"><span>      set result := &#39;第一季度&#39;;</span></span>\n<span class="line"><span>    when month &gt;= 4 and month &lt;= 6 then</span></span>\n<span class="line"><span>      set result := &#39;第二季度&#39;;</span></span>\n<span class="line"><span>    when month &gt;= 7 and month &lt;= 9 then</span></span>\n<span class="line"><span>      set result := &#39; 第三季度&#39;;</span></span>\n<span class="line"><span>    when month &gt;= 10 and month &lt;= 12 then</span></span>\n<span class="line"><span>      set result := &#39;第四季度&#39;;</span></span>\n<span class="line"><span>    else</span></span>\n<span class="line"><span>      set result := &#39;非法参数&#39;;</span></span>\n<span class="line"><span>  end case;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  select concat(&#39;你输入的月份为：&#39;, month, &#39;，所属季度为：&#39;, result);</span></span>\n<span class="line"><span>end;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-2-6-循环" tabindex="-1"><a class="header-anchor" href="#_2-4-2-6-循环"><span>2.4.2.6 循环</span></a></h4><h5 id="while" tabindex="-1"><a class="header-anchor" href="#while"><span>while</span></a></h5><p>while 循环是有条件的循环控制语句。满足条件后，再执行循环体中的SQL语句。</p><p><strong>语法：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#先判定条件，如果条件为true，则执行逻辑，否则，不执行逻辑</span></span>\n<span class="line"><span>WHILE 条件 DO</span></span>\n<span class="line"><span>  SOL逻辑...</span></span>\n<span class="line"><span>END WHILE;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>案例：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-- while计算从1累加到 n 的值，n 为传入的参数值。</span></span>\n<span class="line"><span>-- A.定义局部变量，记录累加之后的值;</span></span>\n<span class="line"><span>-- B.每循环一次，就会对 n 进行减1，如果 n 减到0，则退出循环</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>create procedure p7(in n int)</span></span>\n<span class="line"><span>begin</span></span>\n<span class="line"><span>  declare total int default 0;</span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>  while n&gt;0 do</span></span>\n<span class="line"><span>    set total := total + n</span></span>\n<span class="line"><span>    set n:=n-1;</span></span>\n<span class="line"><span>  end while;</span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>  select total;</span></span>\n<span class="line"><span>end;</span></span>\n<span class="line"><span>call p7( n: 100);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="repeat" tabindex="-1"><a class="header-anchor" href="#repeat"><span>repeat</span></a></h5><p>repeat是有条件的循环控制语句,当满足条件的时候退出循环。</p><p>与 while 区别：</p><ol><li>先进行循环一次再判断。相当于 c 语言中的 do while();</li><li>满足条件则退出</li></ol><p><strong>语法：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>#先执行一次逻辑，然后判定逻辑是否满足，如果满足，则退出。如果不满足，则继续下一次循环</span></span>\n<span class="line"><span>REPEAT</span></span>\n<span class="line"><span>  SOL逻辑.</span></span>\n<span class="line"><span>  UNTIL 条件</span></span>\n<span class="line"><span>END REPEAT;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>案例：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-- while计算从1累加到 n 的值，n 为传入的参数值。</span></span>\n<span class="line"><span>-- A.定义局部变量，记录累加之后的值;</span></span>\n<span class="line"><span>-- B.每循环一次，就会对 n 进行减1，如果 n 减到0，则退出循环</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>create procedure p8(innint)</span></span>\n<span class="line"><span>begin</span></span>\n<span class="line"><span>  declare total int default 0;</span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>  repeat</span></span>\n<span class="line"><span>    set total := total + n;</span></span>\n<span class="line"><span>    set n := n - 1;</span></span>\n<span class="line"><span>  until n &lt;= 0</span></span>\n<span class="line"><span>  end repeat;</span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>  select total;</span></span>\n<span class="line"><span>end;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>call p8( n: 10);</span></span>\n<span class="line"><span>call p8( n: 100);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="loop" tabindex="-1"><a class="header-anchor" href="#loop"><span>loop</span></a></h5><p>LOOP 实现简单的循环，如果不在SQL逻辑中增加退出循环的条件，可以用其来实现简单的死循环。LOOP可以配合一下两个语句使用。</p><ol><li>LEAVE:配合循环使用，退出循环。</li><li>ITERATE:必须用在循环中，作用是跳过当前循环剩下的语句，直接进入下一次循环。</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[begin label:] LOOP</span></span>\n<span class="line"><span>  SQL逻辑..</span></span>\n<span class="line"><span>END LOOP [end label];</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>LEAVE label;  -- 退出指定标记的循环体</span></span>\n<span class="line"><span>ITERATE label;-- 直接进入下一次循环</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>案例：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-- loop 计算从1到n之间的偶数累加的值，n为传入的参数值。</span></span>\n<span class="line"><span>-- A.定义局部变量，记录累加之后的值;</span></span>\n<span class="line"><span>-- B.每循环一次，就会劝进行-1，如果n减到0，则退出循环。------&gt; leave xx</span></span>\n<span class="line"><span>-- C.如果当次累加的数据是奇数，则直接进入下一次循坏。-------&gt; iterate xx</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>create procedure p10(in n int)</span></span>\n<span class="line"><span>begin </span></span>\n<span class="line"><span>  declare total int defatult 0;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  sum: loop</span></span>\n<span class="line"><span>    if n &lt;= 10 then</span></span>\n<span class="line"><span>      leave sum;</span></span>\n<span class="line"><span>    end if;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    if n %2 = 1 then</span></span>\n<span class="line"><span>      set n := n - 1;</span></span>\n<span class="line"><span>      iterate sum;</span></span>\n<span class="line"><span>    end if;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    set total := total + n;</span></span>\n<span class="line"><span>    set n := n - 1;</span></span>\n<span class="line"><span>  end loop sum;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  select total;</span></span>\n<span class="line"><span>end;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-2-7-游标-cursor" tabindex="-1"><a class="header-anchor" href="#_2-4-2-7-游标-cursor"><span>2.4.2.7 游标-cursor</span></a></h4><p>游标(CURSOR)是用来存储查询结果集的数据类型,在存储过程和函数中可以使用游标对结果集进行循环的处理。游标的使用包括游标的声明、OPEN、FETCH和 CLOSE，其语法分别如下。</p><p>通俗点讲：类似于 c 语言中的结构体，java 中的实体类。</p><p><strong>声明游标</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>DECLARE 游标名称 CURSOR FOR 查询语句;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>打开游标：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>OPEN 游标名称;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>获取游标记录：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>FETCH 游标名称 INTO 变量[,变量];</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>关闭游标：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>CLOSE 游标名称;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>案例：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-- 游标</span></span>\n<span class="line"><span>-- 根据传入的参数uage，来查询用户表tb_user 中， 所有的用户年龄小于uage的用户姓名（name)和专业（profession），</span></span>\n<span class="line"><span>-- 并将用户的姓名和专业插入到所创建的一张新表(id,name,profession)中。</span></span>\n<span class="line"><span>-- 逻辑:</span></span>\n<span class="line"><span>-- A.声明游标，存储查询结果集-</span></span>\n<span class="line"><span>-- B.准备:创建表结构</span></span>\n<span class="line"><span>-- C.开启游标-</span></span>\n<span class="line"><span>-- D.获取游标中的记录</span></span>\n<span class="line"><span>-- E.插入数据到新表中-</span></span>\n<span class="line"><span>-- F.关闭游标</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>create procedure p11(in uage int)</span></span>\n<span class="line"><span>begin </span></span>\n<span class="line"><span>  declare uname varchar(100);</span></span>\n<span class="line"><span>  declare upro varchar(100);</span></span>\n<span class="line"><span>  declare u_cursor cursor for select name, profession from tb_user where age &lt;= uage;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  drop table if exists tb_user_pro;</span></span>\n<span class="line"><span>  create table if not exists tb_user_pro(</span></span>\n<span class="line"><span>    id int primary key auto_increment,</span></span>\n<span class="line"><span>    name varchar(100),</span></span>\n<span class="line"><span>    profession varchar(100)</span></span>\n<span class="line"><span>  );</span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>  open u_cursor;</span></span>\n<span class="line"><span>  while true do</span></span>\n<span class="line"><span>    fetch u_cursor into uname,upro;</span></span>\n<span class="line"><span>    insert into tb_user_pro values(null, uname, upro);</span></span>\n<span class="line"><span>  end while;</span></span>\n<span class="line"><span>  close u_cursor;</span></span>\n<span class="line"><span>end;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="条件处理程序-handler" tabindex="-1"><a class="header-anchor" href="#条件处理程序-handler"><span>条件处理程序-handler</span></a></h5><p>条件处理程序(Handler)可以用来定义在流程控制结构执行过程中遇到问题时相应的处理步骤。</p><p><strong>语法：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>DECLARE handler action HANDLERFOR condition value l, condition value.... statement;</span></span>\n<span class="line"><span>handler action</span></span>\n<span class="line"><span>  CONTINUE: 继续执行当前程序</span></span>\n<span class="line"><span>  EXIT: 终止执行当前程序</span></span>\n<span class="line"><span>condition value</span></span>\n<span class="line"><span>  SOLSTATE sqlstate_value:状态码，如 02000</span></span>\n<span class="line"><span>  SQLWARNING:所有以01开头的SQLSTATE代码的简写</span></span>\n<span class="line"><span>  NOT FOUND:所有以02开头的SOLSTATE代码的简写</span></span>\n<span class="line"><span>  SOLEXCEPTION:所有没有被SOLWARNING 或 NOT FOUND捕获的SOLSTATE代码的简写</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>案例：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>create procedure p11(in uage int)</span></span>\n<span class="line"><span>begin </span></span>\n<span class="line"><span>  declare uname varchar(100);</span></span>\n<span class="line"><span>  declare upro varchar(100);</span></span>\n<span class="line"><span>  declare u_cursor cursor for select name, profession from tb_user where age &lt;= uage;</span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>  -- 监控到02000的状态码后，关闭游标后执行exit退出操作。</span></span>\n<span class="line"><span>  declare exit handler for not found close u_cursor; </span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  drop table if exists tb_user_pro;</span></span>\n<span class="line"><span>  create table if not exists tb_user_pro(</span></span>\n<span class="line"><span>    id int primary key auto_increment,</span></span>\n<span class="line"><span>    name varchar(100),</span></span>\n<span class="line"><span>    profession varchar(100)</span></span>\n<span class="line"><span>  );</span></span>\n<span class="line"><span>  </span></span>\n<span class="line"><span>  open u_cursor;</span></span>\n<span class="line"><span>  while true do</span></span>\n<span class="line"><span>    fetch u_cursor into uname,upro;</span></span>\n<span class="line"><span>    insert into tb_user_pro values(null, uname, upro);</span></span>\n<span class="line"><span>  end while;</span></span>\n<span class="line"><span>  close u_cursor;</span></span>\n<span class="line"><span>end;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-3-存储函数" tabindex="-1"><a class="header-anchor" href="#_2-4-3-存储函数"><span>2.4.3 存储函数：</span></a></h3><p>存储函数是有返回值的存储过程，存储函数的参数只能是IN类型的。</p><p>存储函数用的较少，能够使用存储函数的地方都可以用存储过程替换。</p><p><strong>语法：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>CREATE FUNCTION 存储函数名称([ 参数列表 ])</span></span>\n<span class="line"><span>RETURNS type [characteristic ...]</span></span>\n<span class="line"><span>BEGIN</span></span>\n<span class="line"><span>  -- SQL语句</span></span>\n<span class="line"><span>  RETURN ...;</span></span>\n<span class="line"><span>END ;</span></span>\n<span class="line"><span>characteristic说明:</span></span>\n<span class="line"><span>· DETERMINISTIC:相同的输入参数总是产生相同的结果</span></span>\n<span class="line"><span>· NO SQL:不包含 SQL语句。</span></span>\n<span class="line"><span>· READS SOL DATA:包含读取数据的语句，但不包含写入数据的语句,</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>案例：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>create function fun1(n int)</span></span>\n<span class="line"><span>returns int deterministic</span></span>\n<span class="line"><span>begin</span></span>\n<span class="line"><span>  declare total int default 0;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  while n &gt; 0 do </span></span>\n<span class="line"><span>    set total := total + n;</span></span>\n<span class="line"><span>    set n := n - 1;</span></span>\n<span class="line"><span>  end while;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  return total;</span></span>\n<span class="line"><span>end;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-4-触发器" tabindex="-1"><a class="header-anchor" href="#_2-4-4-触发器"><span>2.4.4 触发器</span></a></h3><p>触发器是与表有关的数据库对象，指在 insert/update/delete 之前或之后，触发并执行触发器中定义的SQL语句集合。触发器的这种特性可以协助应用在数据库端确保数据的完整性，日志记录，数据校验等操作。</p><p>使用别名 OLD 和 NEW 来引用触发器中发生变化的记录内容，这与其他的数据库是相似的。现在触发器还只支持行级触发，不支持语句级触发。</p><table><thead><tr><th>触发器类型</th><th>NEW 和 OLD</th></tr></thead><tbody><tr><td>insert 型触发器</td><td>NEW 表示将要或者已经新增的数据</td></tr><tr><td>update 型触发器</td><td>OLD 表示修改之前的数据，NEW 表示将要或已经修改后的数据</td></tr><tr><td>delete 型触发器</td><td>OLD 表示将要或者已经删除的数据</td></tr></tbody></table><p><strong>语法：</strong></p><p><strong>创建：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>CREATE TRIGGER trigger name</span></span>\n<span class="line"><span>BEFORE/AFTER INSERT/UPDATE/DELETE</span></span>\n<span class="line"><span>ON tbl name FOR EACH ROW --行级触发器BEGIN</span></span>\n<span class="line"><span>  trigger_stmt;</span></span>\n<span class="line"><span>END;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>查看：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>SHOW TRIGGERS;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>删除：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>DROP TRIGGER [schema_name.]trigger_name; --如果没有指定 schema name，默认为当前数据库</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>案例：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-- 插入数据触发器</span></span>\n<span class="line"><span>create trigger tb_user_insert_trigger</span></span>\n<span class="line"><span>  after insert on tb_user for each row</span></span>\n<span class="line"><span>  begin </span></span>\n<span class="line"><span>  insert into user_logs(id, operation, operate_time, operate_id, operate_params)values</span></span>\n<span class="line"><span>  (null, &#39;insert&#39;, now(), new.id, concat(&#39;插入的数据内容为：id=&#39;, new.id, &#39;,name=&#39;, new.name, &#39;, phone=&#39;, new.phone, &#39;, email=&#39;, new.email, &#39;, profession=&#39;, new.profession));</span></span>\n<span class="line"><span>end;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>-- 查看</span></span>\n<span class="line"><span>show triggers;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>-- 删除</span></span>\n<span class="line"><span>drop trigger tb_user_insert_trigger;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>-- 插入数据tb_user</span></span>\n<span class="line"><span>insert into tb_user(id, name, phtone, email, profession, age, gender, status, createtime) values(25, &#39;二皇子&#39;, &#39;1880901212&#39;, &#39;erhuangzi@163.com&#39;, &#39;软件工程&#39;, 23, &#39;1&#39;, &#39;1&#39;1, now());</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>-- 修改数据触发器</span></span>\n<span class="line"><span>create trigger tb_user_update_trigger</span></span>\n<span class="line"><span>  after update on tb_user for each row</span></span>\n<span class="line"><span>  begin </span></span>\n<span class="line"><span>  insert into user_logs(id, operation, operate_time, operate_id, operate_params)values</span></span>\n<span class="line"><span>  (null, &#39;update&#39;, now(), new.id, </span></span>\n<span class="line"><span>   concat(&#39;更新之前的数据：id=&#39;, old.id, &#39;,name=&#39;, old.name, &#39;, phone=&#39;, old.phone, &#39;, email=&#39;, old.email, &#39;, profession=&#39;, old.profession,</span></span>\n<span class="line"><span>    &#39;更新之后的数据：id=&#39;, new.id, &#39;,name=&#39;, new.name, &#39;, phone=&#39;, new.phone, &#39;, email=&#39;, new.email, &#39;, profession=&#39;, new.profession));</span></span>\n<span class="line"><span>end;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>update tb_user set age = 32 where id = 23;</span></span>\n<span class="line"><span>update tb_user set age = 32 where id &lt;= 5; -- 触发器为行级触发器，所以更改几行数据则出发几次，该语句出发5次</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>-- 删除数据触发器</span></span>\n<span class="line"><span>create trigger tb_user_delete_trigger</span></span>\n<span class="line"><span>  after delete on tb_user for each row</span></span>\n<span class="line"><span>  begin </span></span>\n<span class="line"><span>  insert into user_logs(id, operation, operate_time, operate_id, operate_params)values</span></span>\n<span class="line"><span>  (null, &#39;insert&#39;, now(), old.id, </span></span>\n<span class="line"><span>   concat(&#39;删除之前的数据：id=&#39;, new.id, &#39;,name=&#39;, old.name, &#39;, phone=&#39;, old.phone, &#39;, email=&#39;, old.email, &#39;, profession=&#39;, old.profession));</span></span>\n<span class="line"><span>end;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>delete from tb_user where id = 26;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="锁" tabindex="-1"><a class="header-anchor" href="#锁"><span>锁</span></a></h2><p>介绍：</p><p>锁是计算机协调多个进程或线程并发访问某一资源的机制。在数据库中，除传统的计算资源(CPU、RAM、I/0)的争用以外，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。</p><p>分类：</p><p>MySQL中的锁，按照锁的粒度分，分为一下三类：</p><ol><li>全局锁：锁定数据库中的所有表。</li><li>表级锁：每次操作锁住整张表。</li><li>行级锁：每次操作锁住对应的行数据。</li></ol><h3 id="全局锁" tabindex="-1"><a class="header-anchor" href="#全局锁"><span>全局锁</span></a></h3><p>介绍：</p><p>全局锁就是对整个数据库实例加锁，加锁后整个实例就处于只读状态，后续的DML的写语句，DDL语句，已经更新操作的事务提交语句都将被阻塞。</p><p>其典型的使用场景是做全库的逻辑备份，对所有的表进行锁定，从而获取一致性视图，保证数据的完整性。</p><p>基本操作：</p><p>使用全局锁：<code>flush tables with read lock</code> 释放全局锁：<code>unlock tables</code></p><p>演示图：</p><figure><img src="'+u+'" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><figure><img src="'+v+'" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>特点：</p><p>数据库中加全局锁，是一个比较重的操作，存在以下问题:</p><ol><li>如果在主库上备份，那么在备份期间都不能执行更新，业务基本上就得停摆。</li><li>如果在从库上备份，那么在备份期间从库不能执行主库同步过来的二进制日志(binlog)，会导致主从延迟。（该结构会在后续主从复制讲解）</li></ol><p>解决方法：</p><p>在InnoDB引擎中，我们可以在备份时加上参数 –single-transaction 参数来完成不加锁的一致性数据备份。</p><p><code>mysqldump --single-transaction -uroot -p123456 itcast &gt; itcast.sql</code>（只适用于支持「可重复读隔离级别的事务」的存储引擎）</p><p>原理补充：通过加上这个参数，确保了在备份开始时创建一个一致性的快照，通过启动一个新的事务来实现这一点。（该事务的隔离级别是Repeatable Read级别），从而实现在该事务读取下一直读取的是创建时的数据，而不影响其他事务的读写操作。</p><h3 id="表级锁" tabindex="-1"><a class="header-anchor" href="#表级锁"><span>表级锁</span></a></h3><p>每次操作锁住整张表。锁定粒度大，发生锁的冲突的概率最高，并发度最低。应用在MyISAM、InnoDB、BDB等存储引擎中。</p><p>对于表级锁，主要分为一下三类：</p><ol><li>表锁</li><li>元数据锁（meta data lock，MDL）</li><li>意向锁</li></ol><h4 id="表锁" tabindex="-1"><a class="header-anchor" href="#表锁"><span>表锁</span></a></h4><p>对于表锁，分为两类：</p><ol><li>表共享读锁（read lock）</li><li>表独占写锁（write lock）</li></ol><p><strong>读锁不会阻塞其他客户端的读，但是会阻塞写。写锁既会阻塞其他客户端的读，又会阻塞其他客户端的写。</strong></p><p>语法：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>//表级别的共享锁，也就是读锁；</span></span>\n<span class="line"><span>//允许当前会话读取被锁定的表，但阻止其他会话对这些表进行写操作。</span></span>\n<span class="line"><span>lock tebles t_student read;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>//表级锁的独占锁，也是写锁；</span></span>\n<span class="line"><span>//允许当前会话对表进行读写操作，但阻止其他会话对这些表进行任何操作（读或写）。</span></span>\n<span class="line"><span>lock tables t_stuent write;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>释放所有锁：</p><p><code>unlock tables</code> （会话退出，也会释放所有锁）</p><h4 id="元数据锁" tabindex="-1"><a class="header-anchor" href="#元数据锁"><span>元数据锁</span></a></h4><p>MDL加锁过程是系统自动控制，无需显式使用，在访问一张表的时候会自动加上。MDL锁主要作用是维护表元数据的数据一致性，在表 上有活动事务的时候，不可以对元数据进行写入操作。<strong>为了避免DML与DDL冲突，保证读写的正确性。</strong></p><ul><li>对一张表进行 CRUD 操作时，加的是 <strong>MDL 读锁</strong>；</li><li>对一张表做结构变更操作的时候，加的是 <strong>MDL 写锁</strong>；</li></ul><table><thead><tr><th>对应SQL</th><th>锁类型</th><th>说明</th></tr></thead><tbody><tr><td>lock tables xxx read /write</td><td>SHARED_READ_ONLY/SHARED_NO_READ_WRITE</td><td></td></tr><tr><td>select 、 select … lock in share mode</td><td>SHARED_READ</td><td>与SHARED_READ、SHARED_WRITE兼容，与EXCLUSIVE互斥</td></tr><tr><td>insert 、update、delete、select …for update</td><td>SHARED_WRITE</td><td>与SHARED_READ、SHARED_WRITE兼容，与EXCLUSIVE互斥</td></tr><tr><td>alter table …</td><td>EXCLYSIVE</td><td>与其他的MDL都互斥</td></tr></tbody></table><p>查看元数据锁：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>select object_type,object_schema,object_name,lock_type,lock_duration from performance_schema.metadata_locks;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="意向锁" tabindex="-1"><a class="header-anchor" href="#意向锁"><span>意向锁</span></a></h4><p>为了避免DML在执行时，加的行锁与表锁的冲突，在InnoDB中引入了意向锁，使得表锁不用检查每行数据是否加锁，使用意向锁来减 少表锁的检查。</p><p><strong>意向共享锁和意向独占锁是表级锁，不会和行级的共享锁和独占锁发生冲突，而且意向锁之间也不会发生冲突，只会和共享表锁（lock tables … read)和独占表锁（lock tables … write）发生冲突</strong></p><p>如果没有「意向锁」，那么加「独占表锁」时，就需要遍历表里所有记录，查看是否有记录存在独占锁，这样效率会很慢。</p><p>那么有了「意向锁」，由于在对记录加独占锁前，先会加上表级别的意向独占锁，那么在加「独占表锁」时，直接查该表是否有意向独占锁，如果有就意味着表里已经有记录被加了独占锁，这样就不用去遍历表里的记录。</p><p><strong>意向锁的目的是为了快速判断表里是否有记录被加锁</strong>。</p><p>加锁方式：</p><p>意向共享锁：（先在表上加上意向共享锁，然后对读取的记录加共享锁） 由 <code>select ... lock in share mode</code> 添加</p><p>意向独占锁：（先表上加上意向独占锁，然后对读取的记录加独占锁） 由 <code>insert、update、delete、select ... for update </code>添加</p><h4 id="auto-inc锁-补充" tabindex="-1"><a class="header-anchor" href="#auto-inc锁-补充"><span>AUTO-INC锁（补充）</span></a></h4><figure><img src="'+b+'" alt="qrer231r123r.png" tabindex="0" loading="lazy"><figcaption>qrer231r123r.png</figcaption></figure><figure><img src="'+A+'" alt="qewf23f.png" tabindex="0" loading="lazy"><figcaption>qewf23f.png</figcaption></figure><h3 id="行级锁" tabindex="-1"><a class="header-anchor" href="#行级锁"><span>行级锁</span></a></h3><p>行级锁，每次操作锁住对应的行数据。锁定粒度最小，发生锁冲突的概率最低，并发度最高。应用在InnoDB存储引擎中。</p><ol><li>行锁(Record Lock):锁定单个行记录的锁，防止其他事务对此行进行update和delete。在RC、RR隔离级别下都支持。</li><li>间隙锁(GapLock):锁定索引记录间隙(不含该记录)，确保索引记录间隙不变，防止其他事务在这个间隙进行insert，产生幻读。在RR隔离级别下都支持。</li><li>临键锁(Next-Key Lock):行锁和间隙锁组合，同时锁住数据，并锁住数据前面的间隙Gap。在RR隔离级别下支持。</li></ol><h4 id="record-lock-行锁" tabindex="-1"><a class="header-anchor" href="#record-lock-行锁"><span>Record Lock（行锁）</span></a></h4><p>Record Lock 称为记录锁，锁住的是一条记录。而且记录锁是有 S 锁和 X 锁之分。</p><p>InnoDB实现了以下两种类型的行锁：</p><ol><li>共享锁(S)：允许一个事务去读一行，阻止其他事务获得相同数据集的排它锁。</li><li>排他锁(X)：允许获取排他锁的事务更新数据，阻止其他事务获得相同数据集的共享锁和排他锁。</li></ol><table><thead><tr><th></th><th>S(共享锁)</th><th>X(排他锁)</th></tr></thead><tbody><tr><td>S(共享锁)</td><td>兼容</td><td>冲突</td></tr><tr><td>X(排他锁)</td><td>冲突</td><td>冲突</td></tr></tbody></table><p>行锁类型：</p><table><thead><tr><th>SQL</th><th>行锁类型</th><th>说明</th></tr></thead><tbody><tr><td>insert，update，delete …</td><td>排他锁</td><td>自动加锁</td></tr><tr><td>select</td><td>不加任何锁</td><td></td></tr><tr><td>select … lock in share mode</td><td>共享锁</td><td>需要手动select之后加上lock in share mode</td></tr><tr><td>select … for update</td><td>排他锁</td><td>需要手动在select之后for update</td></tr></tbody></table><p>默认情况下，InnoDB在 REPEATABLE READ事务隔离级别运行，InnoDB使用 next-key锁进行搜索和索引扫描，以防止幻读。</p><ol><li>针对唯一索引进行检索时，对已存在的记录进行等值匹配时，将会自动优化为行锁。</li><li>InnoDB的行锁是针对于索引加的锁，不通过索引条件检索数据，那么!nnoDB将对表中的所有记录加锁，此时 <strong>就会升级为表锁</strong>。</li></ol><p>查看意向锁及行锁的加锁情况：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>select object_schema,object_name,index_name,lock_type,lock_mode,lock_data from peformance_schema.data_locks;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="gap-lock-间隙锁" tabindex="-1"><a class="header-anchor" href="#gap-lock-间隙锁"><span>Gap Lock（间隙锁）</span></a></h4><figure><img src="'+m+'" alt="qweg2431123qw.png" tabindex="0" loading="lazy"><figcaption>qweg2431123qw.png</figcaption></figure><h4 id="next-key-lock-临键锁" tabindex="-1"><a class="header-anchor" href="#next-key-lock-临键锁"><span>Next-Key Lock（临键锁）</span></a></h4><figure><img src="'+y+'" alt="qwegfqew24.png" tabindex="0" loading="lazy"><figcaption>qwegfqew24.png</figcaption></figure><p>默认情况下，InnODB在 REPEATABLE READ事务隔离级别运行，InnoDB使用 next-key 锁进行搜索和索引扫描，以防止幻读。</p><ol><li>索引上的等值查询(唯一索引)，给不存在的记录加锁时,优化为间隙锁 。</li><li>索引上的等值查询(普通索引)，向右遍历时最后一个值不满足查询需求时，next-keylock退化为间隙锁。</li><li>索引上的范围查询(唯一索引)–会访问到不满足条件的第一个值为止。</li></ol><h2 id="innodb引擎" tabindex="-1"><a class="header-anchor" href="#innodb引擎"><span>InnoDB引擎</span></a></h2><h3 id="逻辑存储结构" tabindex="-1"><a class="header-anchor" href="#逻辑存储结构"><span>逻辑存储结构</span></a></h3><figure><img src="'+B+'" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><figure><img src="'+f+'" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h3 id="架构" tabindex="-1"><a class="header-anchor" href="#架构"><span>架构</span></a></h3><figure><img src="'+D+'" alt="架构图.png" tabindex="0" loading="lazy"><figcaption>架构图.png</figcaption></figure><h4 id="内存架构" tabindex="-1"><a class="header-anchor" href="#内存架构"><span>内存架构</span></a></h4><figure><img src="'+F+'" alt="文件无法预览。" tabindex="0" loading="lazy"><figcaption>文件无法预览。</figcaption></figure><figure><img src="'+_+'" alt="文件无法预览。" tabindex="0" loading="lazy"><figcaption>文件无法预览。</figcaption></figure><figure><img src="'+E+'" alt="文件无法预览。" tabindex="0" loading="lazy"><figcaption>文件无法预览。</figcaption></figure><figure><img src="'+C+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="磁盘结构" tabindex="-1"><a class="header-anchor" href="#磁盘结构"><span>磁盘结构</span></a></h4><figure><img src="'+x+'" alt="文件无法预览。" tabindex="0" loading="lazy"><figcaption>文件无法预览。</figcaption></figure><figure><img src="'+L+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="后台线程" tabindex="-1"><a class="header-anchor" href="#后台线程"><span>后台线程</span></a></h4><figure><img src="'+S+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="事务原理" tabindex="-1"><a class="header-anchor" href="#事务原理"><span>事务原理</span></a></h3><p>事务：</p><p>事务 是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p><p>特征：</p><ul><li>原子性(Atomicity)：事务是不可分割的最小操作单元，要么全部成功，要么全部失败。</li><li>一致性(Consistency) ：事务完成时，必须使所有的数据都保持一致状态。</li><li>隔离性(lsolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</li><li>持久性(Durability)：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</li></ul><p>特性原理分类图：</p><figure><img src="'+T+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="redo-log" tabindex="-1"><a class="header-anchor" href="#redo-log"><span>redo log</span></a></h4><p>重做日志，记录的是事务提交时数据页的物理修改，是用来实现事务的<strong>持久性</strong>。</p><p>该日志文件由两部分组成:重做日志缓冲(redo log buffer)以及重做日志文件(redo log file),前者是在内存中，后者在磁盘中。当事务提交之后会把所有修改信息都存到该日志文件中,用于在刷新脏页到磁盘,发生错误时,进行数据恢复使用。</p><p>Buffer Pool在产生脏页数据的时候，会先将数据存储到 redo log buffer 再存储到 redo log 中进行磁盘持久化存储，在内存出现异常（比如突然断电）时，通过redo log中持久化的数据进行回滚。过程如下图：</p><figure><img src="'+I+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>redo log 要写到磁盘，数据也要写磁盘，为什么要多此一举?</p><p>写入 redo log 的方式使用了追加操作，所以磁盘操作是<strong>顺序写</strong>，而写入数据需要先找到写入位置，然后才写到磁盘，所以磁盘操作是<strong>随机写</strong>。</p><h4 id="undo-log" tabindex="-1"><a class="header-anchor" href="#undo-log"><span>undo log</span></a></h4><p>回滚日志，用于记录数据被修改前的信息，作用包含两个:提供回滚 和 MVCC(多版本并发控制)。</p><p>undo log 和 redo log 记录物理日志不一样，它是逻辑日志。可以认为当 delete 一条记录时，undo log中会记录一条对应的insert记录，反之亦然，当 update 一条记录时，它记录一条对应相反的 update 记录。当执行 rollback 时，就可以从 undo log 中的逻辑记录读取到相应的内容并进行回滚。</p><p>Undo log 销毁：undo log 在事务执行时产生，事务提交时，并不会立即删除undol0g，因为这些日志可能还用于 MVCC。</p><p>Undo log 存储：undo log 采用段的方式进行管理和记录，存放在前面介绍的 rollback segment 回滚段中，内部包含1024个 undo log segment.</p><h3 id="mvcc" tabindex="-1"><a class="header-anchor" href="#mvcc"><span>MVCC</span></a></h3><p><strong>当前读：</strong></p><p>读取的是记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁。对于我们日常的操作，如:select…lock in share mode(共享锁)，select… for update、update、insert、delete(排他锁)都是一种当前读。</p><p><strong>快照读：</strong></p><p>简单的select(不加锁)就是快照读，快照读，读取的是记录数据的可见版本，有可能是历史数据，不加锁，是非阻塞读。</p><ul><li>Read committed:每次select，都生成一个快照读。</li><li>Repeatable Read:开启事务后第一个select语句才是快照读的地方。</li><li>Serializable:快照读会退化为当前读。</li></ul><p><strong>MVCC：</strong></p><p>全称 Multi-Version Concurrency Control，多版本并发控制。指维护一个数据的多个版本，使得读写操作没有冲突，快照读为MVSOL实现MVCC提供了一个非阻塞读功能。MVCC的具体实现，还需要依赖于数据库记录中的三个隐式字段、undo log日志、read View。</p><h4 id="三个隐藏字段" tabindex="-1"><a class="header-anchor" href="#三个隐藏字段"><span>三个隐藏字段</span></a></h4><figure><img src="'+w+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="undo-log-1" tabindex="-1"><a class="header-anchor" href="#undo-log-1"><span>undo log</span></a></h4><p>回滚日志，在insert、update、delete的时候产生的便于数据回滚的日志。</p><p>当insert的时候，产生的undoloq日志只在回滚时需要，在事务提交后，可被立即删除。</p><p>而update、delete的时候，产生的undo log日志不仅在回滚时需要，在快照读时也需要，不会立即被删除。</p><p>那么何时删除？</p><ul><li><p>事务提交后</p><p>：</p><ul><li>对于<code>INSERT</code>操作，事务提交后，undo log可以被立即删除，因为不再需要用于回滚。</li><li>对于<code>UPDATE</code>和<code>DELETE</code>操作，undo log不会立即被删除，因为它们可能在后续的快照读取中被使用。</li></ul></li><li><p>快照读取结束</p><p>：</p><ul><li>当所有依赖于该undo log的快照读取操作结束后，undo log才会被删除。这意味着如果有一个事务正在进行快照读取，并且依赖于某个undo log，那么这个undo log会一直保留直到该事务结束。</li></ul></li></ul><figure><img src="'+R+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="readview" tabindex="-1"><a class="header-anchor" href="#readview"><span>readview</span></a></h4><p>ReadView(读视图)是 快照读 SOL执行时MVCC提取数据的依据，记录并维护系统当前活跃的事务(未提交的)id。</p><p>ReadView中包含了四个核心字段:</p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>m_ids</td><td>当前活跃的事务ID集合</td></tr><tr><td>min_trx_id</td><td>最小活跃事务ID</td></tr><tr><td>max_trx_id</td><td>预分配事务ID，当前最大事务ID+1（因为事务ID是自增的）</td></tr><tr><td>creator_trx_id</td><td>ReadView创建者的事务ID</td></tr></tbody></table><figure><img src="'+N+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="'+q+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>依次比较 undo log 日志中版本数据链，找到可以进行访问的版本数据。</p><h2 id="mysql管理" tabindex="-1"><a class="header-anchor" href="#mysql管理"><span>MySQL管理</span></a></h2><h3 id="系统数据库介绍" tabindex="-1"><a class="header-anchor" href="#系统数据库介绍"><span>系统数据库介绍</span></a></h3><p>Mysql数据库安装完成后，自带了一下四个数据库，具体作用如下：</p><table><thead><tr><th>数据库</th><th>含义</th></tr></thead><tbody><tr><td>mysql</td><td>存储MVSQL服务器正常运行所需要的各种信息(时区、主从、用户、权限等)</td></tr><tr><td>information_schema</td><td>提供了访问数据库元数据的各种表和视图，包含数据库、表、字段类型及访问权限等</td></tr><tr><td>performance_schema</td><td>为MySQL服务器运行时状态提供了一个底层监控功能，主要用于收集数据库服务器性能参数</td></tr><tr><td>sys</td><td>包含了一系列方便 DBA和开发人员利用 performance_schema性能数据库进行性能调优和诊断的视图</td></tr></tbody></table><h3 id="常用工具" tabindex="-1"><a class="header-anchor" href="#常用工具"><span>常用工具</span></a></h3><h4 id="mysql" tabindex="-1"><a class="header-anchor" href="#mysql"><span>mysql</span></a></h4><figure><img src="'+O+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="mysqladmin" tabindex="-1"><a class="header-anchor" href="#mysqladmin"><span>mysqladmin</span></a></h4><figure><img src="'+M+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="mysqlbinlog" tabindex="-1"><a class="header-anchor" href="#mysqlbinlog"><span>mysqlbinlog</span></a></h4><figure><img src="'+U+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="mysqlshow" tabindex="-1"><a class="header-anchor" href="#mysqlshow"><span>mysqlshow</span></a></h4><figure><img src="'+Q+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="mysqldump" tabindex="-1"><a class="header-anchor" href="#mysqldump"><span>mysqldump</span></a></h4><figure><img src="'+H+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="mysqlimport-source" tabindex="-1"><a class="header-anchor" href="#mysqlimport-source"><span>mysqlimport/source</span></a></h4><figure><img src="'+z+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>',472)]))}]]),V=JSON.parse('{"path":"/Database/MySQL/%E8%BF%9B%E9%98%B6/%E8%BF%9B%E9%98%B6%E7%AF%87.html","title":"2.进阶篇","lang":"zh-CN","frontmatter":{"icon":"fa-file-lines","date":"2025-03-09T00:00:00.000Z","category":["MySQL","数据库"],"tag":["笔记"],"gitInclude":[]},"headers":[{"level":2,"title":"2.1 存储引擎","slug":"_2-1-存储引擎","link":"#_2-1-存储引擎","children":[{"level":3,"title":"2.1.1 InnoDB","slug":"_2-1-1-innodb","link":"#_2-1-1-innodb","children":[]},{"level":3,"title":"2.1.2 MyISAM","slug":"_2-1-2-myisam","link":"#_2-1-2-myisam","children":[]},{"level":3,"title":"2.1.3 Memory","slug":"_2-1-3-memory","link":"#_2-1-3-memory","children":[]},{"level":3,"title":"2.1.4 存储引擎特点","slug":"_2-1-4-存储引擎特点","link":"#_2-1-4-存储引擎特点","children":[]},{"level":3,"title":"2.1.5 存储引擎的选择","slug":"_2-1-5-存储引擎的选择","link":"#_2-1-5-存储引擎的选择","children":[]}]},{"level":2,"title":"2.2 索引","slug":"_2-2-索引","link":"#_2-2-索引","children":[{"level":3,"title":"2.2.1 索引结构","slug":"_2-2-1-索引结构","link":"#_2-2-1-索引结构","children":[]},{"level":3,"title":"2.2.2 索引分类","slug":"_2-2-2-索引分类","link":"#_2-2-2-索引分类","children":[]},{"level":3,"title":"2.2.3 语法","slug":"_2-2-3-语法","link":"#_2-2-3-语法","children":[]},{"level":3,"title":"2.2.4 SQL性能分析","slug":"_2-2-4-sql性能分析","link":"#_2-2-4-sql性能分析","children":[]},{"level":3,"title":"2.2.5 使用规则","slug":"_2-2-5-使用规则","link":"#_2-2-5-使用规则","children":[]},{"level":3,"title":"2.2.6 设计原则","slug":"_2-2-6-设计原则","link":"#_2-2-6-设计原则","children":[]}]},{"level":2,"title":"2.3 SQL 优化","slug":"_2-3-sql-优化","link":"#_2-3-sql-优化","children":[{"level":3,"title":"2.3.1 插入数据","slug":"_2-3-1-插入数据","link":"#_2-3-1-插入数据","children":[]},{"level":3,"title":"2.3.2 主键优化","slug":"_2-3-2-主键优化","link":"#_2-3-2-主键优化","children":[]},{"level":3,"title":"2.3.3 order by优化","slug":"_2-3-3-order-by优化","link":"#_2-3-3-order-by优化","children":[]},{"level":3,"title":"2.3.4 group by优化","slug":"_2-3-4-group-by优化","link":"#_2-3-4-group-by优化","children":[]},{"level":3,"title":"2.3.5 limit优化","slug":"_2-3-5-limit优化","link":"#_2-3-5-limit优化","children":[]},{"level":3,"title":"2.3.6 count优化","slug":"_2-3-6-count优化","link":"#_2-3-6-count优化","children":[]},{"level":3,"title":"2.3.7 update优化（避免行锁升级为表锁）","slug":"_2-3-7-update优化-避免行锁升级为表锁","link":"#_2-3-7-update优化-避免行锁升级为表锁","children":[]}]},{"level":2,"title":"2.4 视图/存储过程/触发器","slug":"_2-4-视图-存储过程-触发器","link":"#_2-4-视图-存储过程-触发器","children":[{"level":3,"title":"2.4.1 视图","slug":"_2-4-1-视图","link":"#_2-4-1-视图","children":[]},{"level":3,"title":"2.4.2 存储过程","slug":"_2-4-2-存储过程","link":"#_2-4-2-存储过程","children":[]},{"level":3,"title":"2.4.3 存储函数：","slug":"_2-4-3-存储函数","link":"#_2-4-3-存储函数","children":[]},{"level":3,"title":"2.4.4 触发器","slug":"_2-4-4-触发器","link":"#_2-4-4-触发器","children":[]}]},{"level":2,"title":"锁","slug":"锁","link":"#锁","children":[{"level":3,"title":"全局锁","slug":"全局锁","link":"#全局锁","children":[]},{"level":3,"title":"表级锁","slug":"表级锁","link":"#表级锁","children":[]},{"level":3,"title":"行级锁","slug":"行级锁","link":"#行级锁","children":[]}]},{"level":2,"title":"InnoDB引擎","slug":"innodb引擎","link":"#innodb引擎","children":[{"level":3,"title":"逻辑存储结构","slug":"逻辑存储结构","link":"#逻辑存储结构","children":[]},{"level":3,"title":"架构","slug":"架构","link":"#架构","children":[]},{"level":3,"title":"事务原理","slug":"事务原理","link":"#事务原理","children":[]},{"level":3,"title":"MVCC","slug":"mvcc","link":"#mvcc","children":[]}]},{"level":2,"title":"MySQL管理","slug":"mysql管理","link":"#mysql管理","children":[{"level":3,"title":"系统数据库介绍","slug":"系统数据库介绍","link":"#系统数据库介绍","children":[]},{"level":3,"title":"常用工具","slug":"常用工具","link":"#常用工具","children":[]}]}],"readingTime":{"minutes":50.18,"words":15055},"filePathRelative":"Database/MySQL/进阶/进阶篇.md","localizedDate":"2025年3月9日","excerpt":"\\n<h2>2.1 存储引擎</h2>\\n<p>MySQL体系结构：</p>\\n<p>\\n</p>\\n<p>存储引擎就是存储数据、建立索引、更新/查询数据等技术的实现方式。存储引擎是基于表而不是基于库的，所以存储引擎也可以被称为表引擎。\\n默认存储引擎是InnoDB。</p>\\n<p>相关操作：</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>-- 查询建表语句</span></span>\\n<span class=\\"line\\"><span>show create table account;</span></span>\\n<span class=\\"line\\"><span>-- 建表时指定存储引擎</span></span>\\n<span class=\\"line\\"><span>CREATE TABLE 表名(</span></span>\\n<span class=\\"line\\"><span>\\t...</span></span>\\n<span class=\\"line\\"><span>) ENGINE=INNODB;</span></span>\\n<span class=\\"line\\"><span>-- 查看当前数据库支持的存储引擎</span></span>\\n<span class=\\"line\\"><span>show engines;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}')}}]);