"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[14951],{66262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}},13842:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>t,data:()=>l});var n=a(20641);const e={},t=(0,a(66262).A)(e,[["render",function(i,s){return(0,n.uX)(),(0,n.CE)("div",null,s[0]||(s[0]=[(0,n.Fv)('<h1 id="🔍-import-注解详解" tabindex="-1"><a class="header-anchor" href="#🔍-import-注解详解"><span>🔍 <code>@Import</code> 注解详解</span></a></h1><hr><h2 id="一、-import-的作用" tabindex="-1"><a class="header-anchor" href="#一、-import-的作用"><span>一、@Import 的作用</span></a></h2><blockquote><p><strong>核心作用：</strong></p><p><code>@Import</code> 用于向 Spring 容器中 <strong>导入一个或多个组件（Bean）</strong>，这些组件会被注册到 Spring 的 <code>ApplicationContext</code> 中。</p></blockquote><hr><h2 id="二、常见用法-支持-4-种类型" tabindex="-1"><a class="header-anchor" href="#二、常见用法-支持-4-种类型"><span>二、常见用法（支持 4 种类型）</span></a></h2><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>普通配置类 Class</td><td>最常见，导入一个被 <code>@Configuration</code> 标注的类</td></tr><tr><td>实现 <code>ImportSelector</code> 的类</td><td>实现按条件动态返回需要注册的类名数组</td></tr><tr><td>实现 <code>DeferredImportSelector</code> 的类</td><td>更晚执行的 ImportSelector，用于自动配置场景</td></tr><tr><td>实现 <code>ImportBeanDefinitionRegistrar</code> 的类</td><td>可以手动注册 BeanDefinition，粒度最细，功能最强</td></tr></tbody></table><hr><h2 id="三、基础用法示例" tabindex="-1"><a class="header-anchor" href="#三、基础用法示例"><span>三、基础用法示例</span></a></h2><h3 id="✅-1-导入配置类" tabindex="-1"><a class="header-anchor" href="#✅-1-导入配置类"><span>✅ 1. 导入配置类</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Configuration</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DataSourceConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Bean</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DataSource</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> dataSource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> HikariDataSource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在主配置类中使用 <code>@Import</code>：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Configuration</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Import</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">DataSourceConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MainConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>等效于手动注册 <code>DataSourceConfig</code> 中定义的所有 Bean。</p><hr><h3 id="✅-2-导入多个类" tabindex="-1"><a class="header-anchor" href="#✅-2-导入多个类"><span>✅ 2. 导入多个类</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Import</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">({</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">DataSourceConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> SecurityConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>支持批量导入。</p><hr><h2 id="四、importselector-高级用法" tabindex="-1"><a class="header-anchor" href="#四、importselector-高级用法"><span>四、ImportSelector 高级用法</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyImportSelector</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ImportSelector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">[] </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">selectImports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">AnnotationMetadata</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> importingClassMetadata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] {</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            &quot;com.example.config.DataSourceConfig&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            &quot;com.example.config.CacheConfig&quot;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        };</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后这样使用：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Import</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MyImportSelector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MainConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Spring 会把 <code>selectImports</code> 返回的类名当作配置类导入。</p><hr><h2 id="五、deferredimportselector-延迟导入" tabindex="-1"><a class="header-anchor" href="#五、deferredimportselector-延迟导入"><span>五、DeferredImportSelector（延迟导入）</span></a></h2><p>延迟执行顺序更靠后，常用于 Spring Boot 的自动配置（如 <code>spring.factories</code> 加载的自动配置类）：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyDeferredImportSelector</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DeferredImportSelector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">[] </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">selectImports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">AnnotationMetadata</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> importingClassMetadata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[]{</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;com.example.config.LateConfig&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="六、importbeandefinitionregistrar-手动注册-bean" tabindex="-1"><a class="header-anchor" href="#六、importbeandefinitionregistrar-手动注册-bean"><span>六、ImportBeanDefinitionRegistrar（手动注册 Bean）</span></a></h2><p>最强用法，可通过代码形式注册任意 Bean，灵活性最强。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyRegistrar</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ImportBeanDefinitionRegistrar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> registerBeanDefinitions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">            AnnotationMetadata</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> importingClassMetadata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">            BeanDefinitionRegistry</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> registry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        RootBeanDefinition</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> beanDef</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> RootBeanDefinition</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MyService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        registry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">registerBeanDefinition</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;myService&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, beanDef);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Import</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MyRegistrar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MainConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="七、spring-boot-自动配置为何也用它" tabindex="-1"><a class="header-anchor" href="#七、spring-boot-自动配置为何也用它"><span>七、Spring Boot 自动配置为何也用它？</span></a></h2><p>Spring Boot 的自动配置类，就是通过：</p><ul><li><code>@EnableAutoConfiguration</code> → <code>@Import(AutoConfigurationImportSelector.class)</code></li><li>利用 <code>ImportSelector</code> 动态导入配置类</li><li>再通过 <code>spring.factories</code> 加载配置类名列表</li></ul><p>从而实现了“按需加载、自动装配”的强大能力。</p><hr><h2 id="八、使用场景总结" tabindex="-1"><a class="header-anchor" href="#八、使用场景总结"><span>八、使用场景总结</span></a></h2><table><thead><tr><th>使用场景</th><th>建议使用</th></tr></thead><tbody><tr><td>将现有配置类导入到上下文中</td><td>✅</td></tr><tr><td>根据条件或逻辑动态决定导入哪些类</td><td>✅ <code>ImportSelector</code></td></tr><tr><td>控制注册过程，精细定义 Bean 定义</td><td>✅ <code>ImportBeanDefinitionRegistrar</code></td></tr><tr><td>构建自己的注解组合元注解</td><td>✅</td></tr><tr><td>替代 <code>@ComponentScan</code>，提高加载粒度</td><td>✅</td></tr></tbody></table><hr><h2 id="九、-import-与其他注解关系" tabindex="-1"><a class="header-anchor" href="#九、-import-与其他注解关系"><span>九、@Import 与其他注解关系</span></a></h2><table><thead><tr><th>注解</th><th>是否使用了 @Import</th><th>说明</th></tr></thead><tbody><tr><td><code>@EnableAsync</code></td><td>✅</td><td>导入了 <code>AsyncConfigurationSelector</code></td></tr><tr><td><code>@EnableScheduling</code></td><td>✅</td><td>导入了 <code>SchedulingConfiguration</code></td></tr><tr><td><code>@SpringBootApplication</code></td><td>✅ （间接）</td><td>含 <code>@EnableAutoConfiguration</code>，内部有 <code>@Import</code></td></tr></tbody></table><hr><h2 id="十、总结" tabindex="-1"><a class="header-anchor" href="#十、总结"><span>十、总结</span></a></h2><ul><li><code>@Import</code> 是 Spring 中用于动态导入 Bean 的关键注解。</li><li>比 <code>@ComponentScan</code> 更灵活、粒度更细。</li><li>是 Spring Boot 自动装配机制的核心之一。</li><li>配合 <code>ImportSelector</code>、<code>ImportBeanDefinitionRegistrar</code> 可以实现高度可扩展的注册逻辑。</li></ul>',46)]))}]]),l=JSON.parse('{"path":"/Spring/%E6%B3%A8%E8%A7%A3/@Import.html","title":"🔍 @Import 注解详解","lang":"zh-CN","frontmatter":{"gitInclude":[]},"headers":[{"level":2,"title":"一、@Import 的作用","slug":"一、-import-的作用","link":"#一、-import-的作用","children":[]},{"level":2,"title":"二、常见用法（支持 4 种类型）","slug":"二、常见用法-支持-4-种类型","link":"#二、常见用法-支持-4-种类型","children":[]},{"level":2,"title":"三、基础用法示例","slug":"三、基础用法示例","link":"#三、基础用法示例","children":[{"level":3,"title":"✅ 1. 导入配置类","slug":"✅-1-导入配置类","link":"#✅-1-导入配置类","children":[]},{"level":3,"title":"✅ 2. 导入多个类","slug":"✅-2-导入多个类","link":"#✅-2-导入多个类","children":[]}]},{"level":2,"title":"四、ImportSelector 高级用法","slug":"四、importselector-高级用法","link":"#四、importselector-高级用法","children":[]},{"level":2,"title":"五、DeferredImportSelector（延迟导入）","slug":"五、deferredimportselector-延迟导入","link":"#五、deferredimportselector-延迟导入","children":[]},{"level":2,"title":"六、ImportBeanDefinitionRegistrar（手动注册 Bean）","slug":"六、importbeandefinitionregistrar-手动注册-bean","link":"#六、importbeandefinitionregistrar-手动注册-bean","children":[]},{"level":2,"title":"七、Spring Boot 自动配置为何也用它？","slug":"七、spring-boot-自动配置为何也用它","link":"#七、spring-boot-自动配置为何也用它","children":[]},{"level":2,"title":"八、使用场景总结","slug":"八、使用场景总结","link":"#八、使用场景总结","children":[]},{"level":2,"title":"九、@Import 与其他注解关系","slug":"九、-import-与其他注解关系","link":"#九、-import-与其他注解关系","children":[]},{"level":2,"title":"十、总结","slug":"十、总结","link":"#十、总结","children":[]}],"readingTime":{"minutes":2.05,"words":615},"filePathRelative":"Spring/注解/@Import.md","excerpt":"\\n<hr>\\n<h2>一、@Import 的作用</h2>\\n<blockquote>\\n<p><strong>核心作用：</strong></p>\\n<p><code>@Import</code> 用于向 Spring 容器中 <strong>导入一个或多个组件（Bean）</strong>，这些组件会被注册到 Spring 的 <code>ApplicationContext</code> 中。</p>\\n</blockquote>\\n<hr>\\n<h2>二、常见用法（支持 4 种类型）</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>类型</th>\\n<th>描述</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>普通配置类 Class</td>\\n<td>最常见，导入一个被 <code>@Configuration</code> 标注的类</td>\\n</tr>\\n<tr>\\n<td>实现 <code>ImportSelector</code> 的类</td>\\n<td>实现按条件动态返回需要注册的类名数组</td>\\n</tr>\\n<tr>\\n<td>实现 <code>DeferredImportSelector</code> 的类</td>\\n<td>更晚执行的 ImportSelector，用于自动配置场景</td>\\n</tr>\\n<tr>\\n<td>实现 <code>ImportBeanDefinitionRegistrar</code> 的类</td>\\n<td>可以手动注册 BeanDefinition，粒度最细，功能最强</td>\\n</tr>\\n</tbody>\\n</table>"}')}}]);