"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[43837],{66262:(i,t)=>{t.A=(i,t)=>{const a=i.__vccOpts||i;for(const[i,s]of t)a[i]=s;return a}},58129:(i,t,a)=>{a.r(t),a.d(t,{comp:()=>l,data:()=>n});var s=a(20641);const e={},l=(0,a(66262).A)(e,[["render",function(i,t){const a=(0,s.g2)("RouteLink");return(0,s.uX)(),(0,s.CE)("div",null,[t[2]||(t[2]=(0,s.Lk)("h1",{id:"⚙️-6-1-tomcat-线程模型详解与调优指南",tabindex:"-1"},[(0,s.Lk)("a",{class:"header-anchor",href:"#⚙️-6-1-tomcat-线程模型详解与调优指南"},[(0,s.Lk)("span",null,"⚙️ 6.1 Tomcat 线程模型详解与调优指南")])],-1)),t[3]||(t[3]=(0,s.Lk)("p",null,"Tomcat 作为广泛使用的 Java Web 容器，其线程模型直接影响 Web 应用的并发性能与稳定性。本节深入解析 Tomcat 工作线程的命名、来源、配置参数及调优实践。",-1)),t[4]||(t[4]=(0,s.Lk)("hr",null,null,-1)),(0,s.Q3)(" more "),t[5]||(t[5]=(0,s.Fv)('<h2 id="🧵-tomcat-工作线程命名规则" tabindex="-1"><a class="header-anchor" href="#🧵-tomcat-工作线程命名规则"><span>🧵 Tomcat 工作线程命名规则</span></a></h2><p>典型线程名示例：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>http-nio-8080-exec-1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><table><thead><tr><th>组成部分</th><th>说明</th></tr></thead><tbody><tr><td>http</td><td>协议类型（HTTP）</td></tr><tr><td>nio</td><td>使用的连接器类型（NIO 非阻塞）</td></tr><tr><td>8080</td><td>监听端口</td></tr><tr><td>exec-1</td><td>线程池中线程编号</td></tr></tbody></table><hr><h2 id="🛠-线程池来源" tabindex="-1"><a class="header-anchor" href="#🛠-线程池来源"><span>🛠 线程池来源</span></a></h2><ul><li>由 Tomcat 内置线程池管理，主要类： <ul><li><code>org.apache.tomcat.util.threads.ThreadPoolExecutor</code></li><li><code>org.apache.catalina.core.StandardThreadExecutor</code></li></ul></li><li>线程池参数在 Spring Boot 中配置示例：</li></ul><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:  </span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8080</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  tomcat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:  </span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    threads</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:  </span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      max</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">200</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">          # 最大线程数  </span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      min-spare</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     # 最小空闲线程数  </span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    accept-count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   # 请求队列长度</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="🔧-调优建议" tabindex="-1"><a class="header-anchor" href="#🔧-调优建议"><span>🔧 调优建议</span></a></h2><table><thead><tr><th>参数</th><th>作用</th><th>推荐值</th></tr></thead><tbody><tr><td>maxThreads</td><td>最大可同时处理请求线程数</td><td>CPU密集型：核心数+1；IO密集型：2×核心数</td></tr><tr><td>minSpareThreads</td><td>保持空闲线程数，避免频繁创建销毁</td><td>10~20</td></tr><tr><td>acceptCount</td><td>连接等待队列长度</td><td>100~1000</td></tr></tbody></table><hr><h2 id="🔍-线程观察与诊断" tabindex="-1"><a class="header-anchor" href="#🔍-线程观察与诊断"><span>🔍 线程观察与诊断</span></a></h2><ul><li>使用 <code>jstack &lt;pid&gt; | grep &#39;http-nio&#39;</code> 查看线程状态</li><li>结合线程堆栈分析阻塞、死锁及性能瓶颈</li></ul><hr><h2 id="📝-小结" tabindex="-1"><a class="header-anchor" href="#📝-小结"><span>📝 小结</span></a></h2><ul><li>Tomcat 工作线程由线程池自动管理，线程名称规范清晰</li><li>合理配置线程池参数，可提升应用吞吐与响应速度</li><li>监控线程池运行状况，及时调整防止线程耗尽或阻塞</li></ul><hr>',18)),(0,s.Lk)("p",null,[t[1]||(t[1]=(0,s.eW)("👉 下一篇推荐：")),(0,s.bF)(a,{to:"/JVM/%E4%B8%80%E5%91%BD%E9%80%9F%E9%80%9A/7.%20JVM%E8%B0%83%E4%BC%98%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93%E4%B8%8E%E6%A1%88%E4%BE%8B/7.1JVM%20%E8%B0%83%E4%BC%98%E5%AE%9E%E6%88%98%E6%80%BB%E7%BB%93%E4%B8%8E%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90.html"},{default:(0,s.k6)((()=>t[0]||(t[0]=[(0,s.eW)("7.1 JVM 调优实战总结与案例分析")]))),_:1})])])}]]),n=JSON.parse('{"path":"/JVM/%E4%B8%80%E5%91%BD%E9%80%9F%E9%80%9A/6.%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8E%E5%AE%B9%E5%99%A8%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B%E8%B0%83%E4%BC%98/6.1Tomcat%20%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B%E8%AF%A6%E8%A7%A3%E4%B8%8E%E8%B0%83%E4%BC%98%E6%8C%87%E5%8D%97.html","title":"6.1 Tomcat 线程模型详解与调优指南","lang":"zh-CN","frontmatter":{"title":"6.1 Tomcat 线程模型详解与调优指南","icon":"fa-solid fa-network-wired","date":"2025-07-10T00:00:00.000Z","author":"JeanHu","category":["服务器","Tomcat"],"tag":["Tomcat","线程模型","性能调优","连接池"],"summary":"本文深入解析 Tomcat 的线程模型原理，结合调优实践详细讲解如何优化线程池配置、连接管理及提高服务器吞吐量，助力高并发应用稳定运行。","gitInclude":[]},"headers":[{"level":2,"title":"🧵 Tomcat 工作线程命名规则","slug":"🧵-tomcat-工作线程命名规则","link":"#🧵-tomcat-工作线程命名规则","children":[]},{"level":2,"title":"🛠 线程池来源","slug":"🛠-线程池来源","link":"#🛠-线程池来源","children":[]},{"level":2,"title":"🔧 调优建议","slug":"🔧-调优建议","link":"#🔧-调优建议","children":[]},{"level":2,"title":"🔍 线程观察与诊断","slug":"🔍-线程观察与诊断","link":"#🔍-线程观察与诊断","children":[]},{"level":2,"title":"📝 小结","slug":"📝-小结","link":"#📝-小结","children":[]}],"readingTime":{"minutes":1.71,"words":514},"filePathRelative":"JVM/一命速通/6. 服务器与容器线程模型调优/6.1Tomcat 线程模型详解与调优指南.md","localizedDate":"2025年7月10日","excerpt":"\\n<p>Tomcat 作为广泛使用的 Java Web 容器，其线程模型直接影响 Web 应用的并发性能与稳定性。本节深入解析 Tomcat 工作线程的命名、来源、配置参数及调优实践。</p>\\n<hr>\\n"}')}}]);