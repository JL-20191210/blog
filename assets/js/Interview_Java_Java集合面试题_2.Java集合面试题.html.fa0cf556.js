"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[13440],{66262:(a,n)=>{n.A=(a,n)=>{const i=a.__vccOpts||a;for(const[a,l]of n)i[a]=l;return i}},84485:(a,n,i)=>{i.r(n),i.d(n,{comp:()=>s,data:()=>r});var l=i(20641);const t={},s=(0,i(66262).A)(t,[["render",function(a,n){return(0,l.uX)(),(0,l.CE)("div",null,n[0]||(n[0]=[(0,l.Fv)('<h1 id="java集合面试题" tabindex="-1"><a class="header-anchor" href="#java集合面试题"><span>Java集合面试题</span></a></h1><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h2><h3 id="_1-数组与集合区别-用过哪些" tabindex="-1"><a class="header-anchor" href="#_1-数组与集合区别-用过哪些"><span>1.数组与集合区别，用过哪些？</span></a></h3><p>数组和集合的区别：</p><ul><li>数组是固定长度的数据结构，一旦创建长度就无法改变，而集合是动态长度的数据结构，可以根据需要动态增加或减少元素。</li><li>数组可以包含基本数据类型和对象，而集合只能包含对象。</li><li>数组可以直接访问元素，而集合需要通过迭代器或其他方法访问元素。</li></ul><p>我用过的一些 Java 集合类：</p><ul><li><strong>ArrayList：</strong> 动态数组，实现了List接口，支持动态增长。</li><li><strong>LinkedList：</strong> 双向链表，也实现了List接口，支持快速的插入和删除操作。</li><li><strong>HashMap：</strong> 基于哈希表的Map实现，存储键值对，通过键快速查找值。</li><li><strong>HashSet：</strong> 基于HashMap实现的Set集合，用于存储唯一元素。</li><li><strong>TreeMap：</strong> 基于红黑树实现的有序Map集合，可以按照键的顺序进行排序。</li><li><strong>LinkedHashMap：</strong> 基于哈希表和双向链表实现的Map集合，保持插入顺序或访问顺序。</li><li><strong>PriorityQueue：</strong> 优先队列，可以按照比较器或元素的自然顺序进行排序。</li></ul>',7)]))}]]),r=JSON.parse('{"path":"/Interview/Java/Java%E9%9B%86%E5%90%88%E9%9D%A2%E8%AF%95%E9%A2%98/2.Java%E9%9B%86%E5%90%88%E9%9D%A2%E8%AF%95%E9%A2%98.html","title":"Java集合面试题","lang":"zh-CN","frontmatter":{"gitInclude":[]},"headers":[{"level":2,"title":"概念","slug":"概念","link":"#概念","children":[{"level":3,"title":"1.数组与集合区别，用过哪些？","slug":"_1-数组与集合区别-用过哪些","link":"#_1-数组与集合区别-用过哪些","children":[]}]}],"readingTime":{"minutes":1.01,"words":302},"filePathRelative":"Interview/Java/Java集合面试题/2.Java集合面试题.md","excerpt":"\\n<h2>概念</h2>\\n<h3>1.数组与集合区别，用过哪些？</h3>\\n<p>数组和集合的区别：</p>\\n<ul>\\n<li>数组是固定长度的数据结构，一旦创建长度就无法改变，而集合是动态长度的数据结构，可以根据需要动态增加或减少元素。</li>\\n<li>数组可以包含基本数据类型和对象，而集合只能包含对象。</li>\\n<li>数组可以直接访问元素，而集合需要通过迭代器或其他方法访问元素。</li>\\n</ul>\\n<p>我用过的一些 Java 集合类：</p>\\n<ul>\\n<li><strong>ArrayList：</strong> 动态数组，实现了List接口，支持动态增长。</li>\\n<li><strong>LinkedList：</strong> 双向链表，也实现了List接口，支持快速的插入和删除操作。</li>\\n<li><strong>HashMap：</strong> 基于哈希表的Map实现，存储键值对，通过键快速查找值。</li>\\n<li><strong>HashSet：</strong> 基于HashMap实现的Set集合，用于存储唯一元素。</li>\\n<li><strong>TreeMap：</strong> 基于红黑树实现的有序Map集合，可以按照键的顺序进行排序。</li>\\n<li><strong>LinkedHashMap：</strong> 基于哈希表和双向链表实现的Map集合，保持插入顺序或访问顺序。</li>\\n<li><strong>PriorityQueue：</strong> 优先队列，可以按照比较器或元素的自然顺序进行排序。</li>\\n</ul>"}')}}]);