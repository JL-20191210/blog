"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[18647],{66262:(i,s)=>{s.A=(i,s)=>{const e=i.__vccOpts||i;for(const[i,n]of s)e[i]=n;return e}},46805:(i,s,e)=>{e.r(s),e.d(s,{comp:()=>t,data:()=>l});var n=e(20641);const a={},t=(0,e(66262).A)(a,[["render",function(i,s){return(0,n.uX)(),(0,n.CE)("div",null,s[0]||(s[0]=[(0,n.Fv)('<h2 id="_1-什么是-jenkins" tabindex="-1"><a class="header-anchor" href="#_1-什么是-jenkins"><span>1. 什么是 Jenkins ?</span></a></h2><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061717007.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>Jenkins 是<strong>一个开源的持续集成（Continuous Integration）工具，它的主要作用是帮助开发团队自动化构建、测试和部署软件项目</strong>。通俗来说，Jenkins 可以在每次代码变更时，帮助我们自动进行一系列的操作，例如编译代码、运行测试、生成文档，甚至是将应用程序部署到服务器上。</p></blockquote><h2 id="_2-为什么要使用-jenkins-呢" tabindex="-1"><a class="header-anchor" href="#_2-为什么要使用-jenkins-呢"><span>2. 为什么要使用 Jenkins 呢？</span></a></h2><ul><li><strong>自动化构建和测试：</strong> Jenkins 可以监视版本控制系统（如 Git）中的代码变更，一旦有新的提交，就触发自动构建和测试流程。这有助于发现潜在的问题，确保代码的质量。</li><li><strong>持续集成：</strong> Jenkins 支持持续集成，即频繁地将小的代码变更合并到主干，并通过自动构建和测试来验证这些变更。这有助于减少集成问题，提高团队的协作效率。</li><li><strong>自动化部署：</strong> Jenkins 可以自动化部署应用程序到测试环境、预生产环境甚至生产环境。通过定义部署流程，可以减少人为错误，确保部署的一致性。</li><li><strong>插件生态系统：</strong> Jenkins 拥有丰富的插件生态系统，支持各种开发工具、构建工具和部署目标。这意味着你可以很容易地将 Jenkins 集成到你的开发工作流中。</li><li><strong>可扩展性：</strong> Jenkins 是开源的，并且具有强大的可扩展性。你可以根据团队的需求定制自己的构建和部署流程，满足特定项目的要求。</li></ul><h2 id="_3-拉取镜像" tabindex="-1"><a class="header-anchor" href="#_3-拉取镜像"><span>3. 拉取镜像</span></a></h2><p>打开命令行工具 <code>PowerShell</code> , 执行搜索命令，如下:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">docker search jenkins</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061718191.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>注意，从搜索结果中，你会看到官方提供的 <code>jenkins</code> 镜像描述，提示我们该镜像已经过期，不再维护了。浏览器访问 <a href="https://hub.docker.com/r/jenkins/jenkins" target="_blank" rel="noopener noreferrer">DockerHub</a> , 搜索关键字 <em>jenkins</em> , 找到目前正在维护的版本，如下图所示，提示我们通过如下命令，来下载最新的 <code>LTS</code> 长期支持版本：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pull</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> jenkins/jenkins:lts-jdk17</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061718133.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>镜像下载成功后，通过 <code>docker images</code> 命令来检查一下镜像是否下载成功：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061717360.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_4-运行容器" tabindex="-1"><a class="header-anchor" href="#_4-运行容器"><span>4. 运行容器</span></a></h2><p>接着，执行如下命令来运行 <code>jenkins</code> 容器：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -u</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> root</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 8080:8080</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 50000:50000</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> E:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ocker</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\j</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">enkins2</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\j</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">enkins_home:/var/jenkins_home</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> jenkins2</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> jenkins/jenkins:lts-jdk17</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>解释一下每个参数的含义：</p><ul><li><p><strong>docker run:</strong> 运行 Docker 容器的命令。</p></li><li><p><strong>-d:</strong> 在后台运行容器，即“detached”模式。</p></li><li><p><strong>-u root:</strong> 以 root 用户身份运行容器。这通常用于确保容器内的进程具有足够的权限执行需要的操作。</p></li><li><p><strong>-p 8080:8080:</strong> 将容器内部的 8080 端口映射到宿主机的 8080 端口。Jenkins 服务通常在 8080 端口上运行。</p></li><li><p><strong>-p 50000:50000:</strong> 将容器内部的 50000 端口映射到宿主机的 50000 端口。这是 Jenkins 使用的用于构建和执行任务的端口。</p></li><li><p><strong>-v E:\\docker\\jenkins2\\jenkins_home:/var/jenkins_home:</strong> 将宿主机上的目录（E:\\docker\\jenkins2\\jenkins_home）挂载到容器内的 /var/jenkins_home 目录。这样可以确保 Jenkins 数据和配置持久化，即使容器被删除，数据仍然保存在宿主机上。</p></li><li><p><strong>--name jenkins2:</strong> 为容器指定一个名称，即 &quot;jenkins2&quot;。</p><blockquote><p>TIP : 因为我本地之前测试的时候，已经命名了一个容器名为 jenkins , 这里演示为了防止冲突，命名的 jenkins2 。</p></blockquote></li><li><p><strong>jenkins/jenkins:lts-jdk17:</strong> 指定要运行的 Docker 镜像的名称和版本。在这里，使用的是 Jenkins 的 LTS 版本，内部使用的 JDK 17。</p></li></ul></blockquote><p>命令执行后，执行 <code>docker ps</code> 命令来查看正在运行的容器，确认一下容器是否运行成功：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061718883.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_5-访问-jenkins" tabindex="-1"><a class="header-anchor" href="#_5-访问-jenkins"><span>5. 访问 Jenkins</span></a></h2><p>然后，打开浏览器访问 <a href="http://localhost:8080/" target="_blank" rel="noopener noreferrer">http://localhost:8080</a> , 首次访问可能速度较慢，请耐心等待一会，会出现如下页面：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061718703.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>需要你提供<strong>管理员密码</strong> ， 密码可以通过如下命令，来查看 <code>jenkins2</code> 容器的启动日志：</p><div class="language-undefined line-numbers-mode" data-highlighter="shiki" data-ext="undefined" data-title="undefined" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>docker logs jenkins2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在日志中，可以看到该密码，如下图所示，将其复制粘贴到输入框中，点击<em>继续</em>按钮：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061724757.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_6-安装插件" tabindex="-1"><a class="header-anchor" href="#_6-安装插件"><span>6. 安装插件</span></a></h2><p>接着，进入到如下页面，点击左边的<em>安装推荐的插件</em> ：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061718581.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>开始安装 <code>jenkins</code> 需要的常用插件，过程比较慢，等待其全部安装完毕：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061718879.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_7-配置管理员用户" tabindex="-1"><a class="header-anchor" href="#_7-配置管理员用户"><span>7. 配置管理员用户</span></a></h2><p>插件安装完毕后，开始配置管理员用户：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061718259.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p><strong>注意</strong>： 后续再次登录 <code>jenkins</code> 后台需要，务必记住登录用户名和密码。</p></blockquote><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061718783.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061718684.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>点击<em>开始使用 Jenkins</em> 按钮，进入到 <code>Jenkins</code> 后台首页，如下图所示，至此，<code>Jenkins</code> 就安装好啦，是不是很简单：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061718683.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>',40)]))}]]),l=JSON.parse('{"path":"/Docker/Docker%E5%AE%89%E8%A3%85Jenkins.html","title":"","lang":"zh-CN","frontmatter":{"gitInclude":[]},"headers":[{"level":2,"title":"1. 什么是 Jenkins ?","slug":"_1-什么是-jenkins","link":"#_1-什么是-jenkins","children":[]},{"level":2,"title":"2. 为什么要使用 Jenkins 呢？","slug":"_2-为什么要使用-jenkins-呢","link":"#_2-为什么要使用-jenkins-呢","children":[]},{"level":2,"title":"3. 拉取镜像","slug":"_3-拉取镜像","link":"#_3-拉取镜像","children":[]},{"level":2,"title":"4. 运行容器","slug":"_4-运行容器","link":"#_4-运行容器","children":[]},{"level":2,"title":"5. 访问 Jenkins","slug":"_5-访问-jenkins","link":"#_5-访问-jenkins","children":[]},{"level":2,"title":"6. 安装插件","slug":"_6-安装插件","link":"#_6-安装插件","children":[]},{"level":2,"title":"7. 配置管理员用户","slug":"_7-配置管理员用户","link":"#_7-配置管理员用户","children":[]}],"readingTime":{"minutes":4.18,"words":1253},"filePathRelative":"Docker/Docker安装Jenkins.md","excerpt":"<h2>1. 什么是 Jenkins ?</h2>\\n<figure><img src=\\"https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061717007.jpeg\\" alt=\\"img\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>img</figcaption></figure>\\n<blockquote>\\n<p>Jenkins 是<strong>一个开源的持续集成（Continuous Integration）工具，它的主要作用是帮助开发团队自动化构建、测试和部署软件项目</strong>。通俗来说，Jenkins 可以在每次代码变更时，帮助我们自动进行一系列的操作，例如编译代码、运行测试、生成文档，甚至是将应用程序部署到服务器上。</p>\\n</blockquote>"}')}}]);