"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[62612],{66262:(s,i)=>{i.A=(s,i)=>{const a=s.__vccOpts||s;for(const[s,e]of i)a[s]=e;return a}},72622:(s,i,a)=>{a.r(i),a.d(i,{comp:()=>l,data:()=>n});var e=a(20641);const h={},l=(0,a(66262).A)(h,[["render",function(s,i){return(0,e.uX)(),(0,e.CE)("div",null,i[0]||(i[0]=[(0,e.Fv)('<h1 id="_15-hashcode-和equals-之间的关系" tabindex="-1"><a class="header-anchor" href="#_15-hashcode-和equals-之间的关系"><span>15.hashCode() 和equals() 之间的关系</span></a></h1><h3 id="口述稿" tabindex="-1"><a class="header-anchor" href="#口述稿"><span>口述稿</span></a></h3><div class="hint-container important"><p class="hint-container-title">重要</p><p>在 Java 中，<code>hashCode()</code> 和 <code>equals()</code> 方法是紧密相关的，尤其是在哈希数据结构中。根据 Java 的规范，如果两个对象通过 <code>equals()</code> 比较是相等的，它们的 <code>hashCode()</code> 必须相等。反之，<code>hashCode()</code> 相等并不意味着 <code>equals()</code> 必定相等，但通常建议避免不同对象具有相同的 <code>hashCode()</code>，以减少哈希冲突。在实现这两个方法时，通常根据对象的核心属性来重写 <code>equals()</code> 和 <code>hashCode()</code>，这样才能确保在像 <code>HashMap</code> 或 <code>HashSet</code> 这样的哈希数据结构中正常工作。</p></div><hr><h3 id="_1-基本关系" tabindex="-1"><a class="header-anchor" href="#_1-基本关系"><span>1. <strong>基本关系</strong></span></a></h3><ul><li><code>hashCode()</code> 方法返回对象的哈希码，这通常是一个整数值，用于对象在哈希表中的位置计算。</li><li><code>equals()</code> 方法用于比较两个对象的内容是否相等。</li></ul><p><strong>Java的契约规定：</strong></p><ul><li>如果两个对象通过 <code>equals()</code> 方法比较是相等的（即返回 <code>true</code>），那么这两个对象的 <code>hashCode()</code> 必须相等。</li><li>如果两个对象的 <code>equals()</code> 方法比较结果不相等（即返回 <code>false</code>），那么它们的 <code>hashCode()</code> 可以相等，也可以不相等。 <ul><li>但是为了避免哈希冲突，通常建议不同的对象有不同的 <code>hashCode()</code>，尽量避免相等的 <code>hashCode()</code> 值。</li></ul></li></ul><h3 id="_2-equals-与-hashcode-关系的具体要求" tabindex="-1"><a class="header-anchor" href="#_2-equals-与-hashcode-关系的具体要求"><span>2. <strong><code>equals()</code> 与 <code>hashCode()</code> 关系的具体要求</strong></span></a></h3><p>根据 <code>Object</code> 类的文档要求，<code>hashCode()</code> 和 <code>equals()</code> 之间的关系必须遵循以下规则：</p><ol><li><p><strong>对称性</strong>：</p><ul><li>如果 <code>x.equals(y)</code> 返回 <code>true</code>，那么 <code>x.hashCode()</code> 必须等于 <code>y.hashCode()</code>。</li></ul></li><li><p><strong>一致性</strong>：</p><ul><li>如果在对象的相等性比较（<code>equals()</code>）没有变化的情况下，多次调用 <code>hashCode()</code> 方法应返回相同的结果。</li></ul></li><li><p><strong>不等的对象</strong>：</p><ul><li>如果 <code>x.equals(y)</code> 返回 <code>false</code>，则 <code>x.hashCode()</code> 和 <code>y.hashCode()</code> 不需要相等。然而，若 <code>hashCode()</code> 返回相同值，这被称为哈希冲突。</li></ul></li></ol><h3 id="_3-使用场景-哈希数据结构" tabindex="-1"><a class="header-anchor" href="#_3-使用场景-哈希数据结构"><span>3. <strong>使用场景：哈希数据结构</strong></span></a></h3><p>在 Java 中，像 <code>HashMap</code>、<code>HashSet</code>、<code>Hashtable</code> 等哈希数据结构依赖于 <code>hashCode()</code> 和 <code>equals()</code> 方法来存储和查找对象。</p><ul><li><strong>查找操作</strong>： <ul><li>当你查询哈希表时，首先会通过对象的 <code>hashCode()</code> 计算出其可能存储的位置。</li><li>如果该位置存在多个对象（发生了哈希冲突），则会通过 <code>equals()</code> 方法进一步比较，确定对象是否相等。</li></ul></li></ul><h3 id="_4-重写-hashcode-和-equals-方法时的考虑" tabindex="-1"><a class="header-anchor" href="#_4-重写-hashcode-和-equals-方法时的考虑"><span>4. <strong>重写 <code>hashCode()</code> 和 <code>equals()</code> 方法时的考虑</strong></span></a></h3><ul><li>如果你自定义了一个类，并且该类的对象将会存储在哈希表中，必须重写 <code>hashCode()</code> 和 <code>equals()</code> 方法，以确保哈希表能够正常工作。</li><li>通常，<code>equals()</code> 方法比较的是对象的业务内容，<code>hashCode()</code> 方法则应基于这些业务内容生成哈希值。</li></ul><p>例如，考虑一个 <code>Person</code> 类，它有 <code>name</code> 和 <code>age</code> 属性：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Person</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> age</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Person</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> age</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> name;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">age</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> age;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> boolean</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> equals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> obj</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> obj) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (obj </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ||</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> obj</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Person</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> person</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (Person) obj;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> age </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> person</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">age</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">equals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">person</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> hashCode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Objects</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hash</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(name, age);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>equals()</code> 方法比较 <code>name</code> 和 <code>age</code>，而 <code>hashCode()</code> 方法根据 <code>name</code> 和 <code>age</code> 生成哈希值。这样，两个具有相同 <code>name</code> 和 <code>age</code> 的 <code>Person</code> 对象在 <code>HashMap</code> 或 <code>HashSet</code> 中会被认为是相等的。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><ul><li><strong><code>hashCode()</code> 和 <code>equals()</code> 之间的关系</strong>：如果两个对象通过 <code>equals()</code> 方法相等，它们的 <code>hashCode()</code> 必须相等。</li><li><strong>用途</strong>：<code>hashCode()</code> 主要用于哈希表中存储和查找对象，而 <code>equals()</code> 用于判断对象的内容是否相等。</li><li><strong>重写时的注意事项</strong>：在重写 <code>equals()</code> 时，通常也需要重写 <code>hashCode()</code>，并且保证两者的一致性，以确保哈希数据结构能够正确工作。</li></ul>',21)]))}]]),n=JSON.parse('{"path":"/Interview/Java/01%E5%9F%BA%E7%A1%80/15.Java%E4%B8%AD%E7%9A%84hashCode%E5%92%8Cequals%E6%96%B9%E6%B3%95%E4%B9%8B%E9%97%B4%E6%9C%89%E4%BB%80%E4%B9%88%E5%85%B3%E7%B3%BB.html","title":"15.hashCode() 和equals() 之间的关系","lang":"zh-CN","frontmatter":{"icon":"fa-brands fa-java","date":"2025-01-10T00:00:00.000Z","category":["Java"],"tag":["必背"],"gitInclude":[]},"headers":[{"level":3,"title":"口述稿","slug":"口述稿","link":"#口述稿","children":[]},{"level":3,"title":"1. 基本关系","slug":"_1-基本关系","link":"#_1-基本关系","children":[]},{"level":3,"title":"2. equals() 与 hashCode() 关系的具体要求","slug":"_2-equals-与-hashcode-关系的具体要求","link":"#_2-equals-与-hashcode-关系的具体要求","children":[]},{"level":3,"title":"3. 使用场景：哈希数据结构","slug":"_3-使用场景-哈希数据结构","link":"#_3-使用场景-哈希数据结构","children":[]},{"level":3,"title":"4. 重写 hashCode() 和 equals() 方法时的考虑","slug":"_4-重写-hashcode-和-equals-方法时的考虑","link":"#_4-重写-hashcode-和-equals-方法时的考虑","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"readingTime":{"minutes":3.03,"words":910},"filePathRelative":"Interview/Java/01基础/15.Java中的hashCode和equals方法之间有什么关系.md","localizedDate":"2025年1月10日","excerpt":"\\n<h3>口述稿</h3>\\n<div class=\\"hint-container important\\">\\n<p class=\\"hint-container-title\\">重要</p>\\n<p>在 Java 中，<code>hashCode()</code> 和 <code>equals()</code> 方法是紧密相关的，尤其是在哈希数据结构中。根据 Java 的规范，如果两个对象通过 <code>equals()</code> 比较是相等的，它们的 <code>hashCode()</code> 必须相等。反之，<code>hashCode()</code> 相等并不意味着 <code>equals()</code> 必定相等，但通常建议避免不同对象具有相同的 <code>hashCode()</code>，以减少哈希冲突。在实现这两个方法时，通常根据对象的核心属性来重写 <code>equals()</code> 和 <code>hashCode()</code>，这样才能确保在像 <code>HashMap</code> 或 <code>HashSet</code> 这样的哈希数据结构中正常工作。</p>\\n</div>"}')}}]);