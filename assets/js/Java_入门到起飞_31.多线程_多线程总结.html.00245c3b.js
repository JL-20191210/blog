"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[5203],{66262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}},61355:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>h,data:()=>e});var n=a(20641);const l={},h=(0,a(66262).A)(l,[["render",function(i,s){return(0,n.uX)(),(0,n.CE)("div",null,s[0]||(s[0]=[(0,n.Fv)('<h1 id="多线程总结" tabindex="-1"><a class="header-anchor" href="#多线程总结"><span>多线程总结</span></a></h1><h3 id="_1-什么是多线程" tabindex="-1"><a class="header-anchor" href="#_1-什么是多线程"><span>1.什么是多线程？</span></a></h3><p>有了多线程，可以让程序做多件事情</p><h3 id="_2-多线程的作用" tabindex="-1"><a class="header-anchor" href="#_2-多线程的作用"><span>2.多线程的作用？</span></a></h3><p>提高效率</p><h3 id="_3-多线程的应用场景" tabindex="-1"><a class="header-anchor" href="#_3-多线程的应用场景"><span>3.多线程的应用场景？</span></a></h3><p>只要你想要多个事情同时运行就需要用到多线程</p><p>比如：软件中的耗时操作，所有的聊天软件，所有的服务器</p><h3 id="_4-并发和并行" tabindex="-1"><a class="header-anchor" href="#_4-并发和并行"><span>4.并发和并行</span></a></h3><p>并发：在同一时刻，有多个指令在单个CPU上<code>交替</code>执行</p><p>并行：在同一时刻，有多个指令在多个CPU上<code>同时</code>执行</p><h3 id="_5-守护线程" tabindex="-1"><a class="header-anchor" href="#_5-守护线程"><span>5.守护线程</span></a></h3><p><code>备胎线程</code></p><p>当其他的非守护线程执行完毕后 ，守护线程会陆续结束（没执行完就结束了）</p><p>女神嫁人了，备胎就没有存在的必要了</p><h3 id="_6-多线程常用方法" tabindex="-1"><a class="header-anchor" href="#_6-多线程常用方法"><span>6.多线程常用方法</span></a></h3><ul><li>setName;getName：设置名；获取名</li><li>Thread.currentThread()：获取当前线程</li><li>Thread.sleep(100)：休眠</li><li>setPriority(1)：设置优先级</li><li>getPriority(1)：获取优先级</li><li>setDaemon：设置守护线程</li><li>Thread.yield()：让出线程，让出CPU</li><li>join：插入线程，抢占CPU</li></ul><h3 id="_7-线程的生命周期" tabindex="-1"><a class="header-anchor" href="#_7-线程的生命周期"><span>7.线程的生命周期</span></a></h3><p>新建，阻塞，就绪，执行，死亡 五态模型</p><h3 id="_8-同步代码块细节" tabindex="-1"><a class="header-anchor" href="#_8-同步代码块细节"><span>8.同步代码块细节</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> run</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      synchronized</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MyThread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">){</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">          if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (ticket </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">              try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                  Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">              } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">InterruptedException</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                  throw</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> RuntimeException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(e)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">              }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">              ticket</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">              System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;卖出了第&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ticket </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;张票！！！！&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">          }</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">      }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>锁synchronized要放在循环内部</li><li>锁对象MyThread.class可以任意但必须唯一，此处MyThread.class是唯一的</li></ol>',22)]))}]]),e=JSON.parse('{"path":"/Java/%E5%85%A5%E9%97%A8%E5%88%B0%E8%B5%B7%E9%A3%9E/31.%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%80%BB%E7%BB%93.html","title":"多线程总结","lang":"zh-CN","frontmatter":{"gitInclude":[]},"headers":[{"level":3,"title":"1.什么是多线程？","slug":"_1-什么是多线程","link":"#_1-什么是多线程","children":[]},{"level":3,"title":"2.多线程的作用？","slug":"_2-多线程的作用","link":"#_2-多线程的作用","children":[]},{"level":3,"title":"3.多线程的应用场景？","slug":"_3-多线程的应用场景","link":"#_3-多线程的应用场景","children":[]},{"level":3,"title":"4.并发和并行","slug":"_4-并发和并行","link":"#_4-并发和并行","children":[]},{"level":3,"title":"5.守护线程","slug":"_5-守护线程","link":"#_5-守护线程","children":[]},{"level":3,"title":"6.多线程常用方法","slug":"_6-多线程常用方法","link":"#_6-多线程常用方法","children":[]},{"level":3,"title":"7.线程的生命周期","slug":"_7-线程的生命周期","link":"#_7-线程的生命周期","children":[]},{"level":3,"title":"8.同步代码块细节","slug":"_8-同步代码块细节","link":"#_8-同步代码块细节","children":[]}],"readingTime":{"minutes":1.18,"words":354},"filePathRelative":"Java/入门到起飞/31.多线程/多线程总结.md","excerpt":"\\n<h3>1.什么是多线程？</h3>\\n<p>有了多线程，可以让程序做多件事情</p>\\n<h3>2.多线程的作用？</h3>\\n<p>提高效率</p>\\n<h3>3.多线程的应用场景？</h3>\\n<p>只要你想要多个事情同时运行就需要用到多线程</p>\\n<p>比如：软件中的耗时操作，所有的聊天软件，所有的服务器</p>\\n<h3>4.并发和并行</h3>\\n<p>并发：在同一时刻，有多个指令在单个CPU上<code>交替</code>执行</p>\\n<p>并行：在同一时刻，有多个指令在多个CPU上<code>同时</code>执行</p>\\n<h3>5.守护线程</h3>\\n<p><code>备胎线程</code></p>"}')}}]);