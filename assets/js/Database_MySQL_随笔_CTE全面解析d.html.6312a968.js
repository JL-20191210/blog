"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[64922],{66262:(s,i)=>{i.A=(s,i)=>{const a=s.__vccOpts||s;for(const[s,n]of i)a[s]=n;return a}},57663:(s,i,a)=>{a.r(i),a.d(i,{comp:()=>e,data:()=>t});var n=a(20641);const l={},e=(0,a(66262).A)(l,[["render",function(s,i){return(0,n.uX)(),(0,n.CE)("div",null,i[0]||(i[0]=[(0,n.Fv)('<h1 id="📝-sql-cte-common-table-expression-全面解析" tabindex="-1"><a class="header-anchor" href="#📝-sql-cte-common-table-expression-全面解析"><span>📝 SQL CTE（Common Table Expression）全面解析</span></a></h1><p>在 SQL 开发中，CTE（Common Table Expression，公共表表达式）是一种提高可读性和可维护性的工具。本文将系统介绍 CTE 的用法、优势、性能注意事项以及在不同数据库中的特性。</p><hr><h2 id="_1️⃣-cte-的基本概念" tabindex="-1"><a class="header-anchor" href="#_1️⃣-cte-的基本概念"><span>1️⃣ CTE 的基本概念</span></a></h2><p>CTE 是 SQL-92 引入的语法糖，用于在 SQL 语句中定义一个临时的结果集，供后续查询使用。 CTE 可以让 SQL 更清晰，尤其是在多层嵌套查询或递归查询中非常有用。</p><p><strong>语法示例：</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WITH</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cte_name </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">AS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> column1, column2</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    FROM</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> table</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> condition</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> *</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cte_name</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_2️⃣-多个-cte-的写法" tabindex="-1"><a class="header-anchor" href="#_2️⃣-多个-cte-的写法"><span>2️⃣ 多个 CTE 的写法</span></a></h2><p>一个 <code>WITH</code> 子句中可以定义多个 CTE，用逗号分隔，后面的 CTE 可以引用前面的 CTE：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WITH</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t1 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">AS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> requester_id </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">AS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> RequestAccepted</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    UNION ALL</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> accepter_id </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> RequestAccepted</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">t2 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">AS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id, </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">COUNT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(*) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">AS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cnt</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t1</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    GROUP BY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">t3 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">AS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t2</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cnt </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> MAX</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(cnt) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t2)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t3;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>✅ 执行逻辑：</p><ol><li><code>t1</code>：合并 requester_id 和 accepter_id</li><li><code>t2</code>：统计每个用户出现次数</li><li><code>t3</code>：找出出现次数最多的用户</li><li>最终查询 <code>t3</code></li></ol><hr><h2 id="_3️⃣-递归-cte" tabindex="-1"><a class="header-anchor" href="#_3️⃣-递归-cte"><span>3️⃣ 递归 CTE</span></a></h2><p>CTE 支持递归，用于层级或树形结构查询，例如分类表、组织架构表等。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WITH</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> RECURSIVE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cte </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">AS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id, parent_id </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> category </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> parent_id </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">IS</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> NULL</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    UNION ALL</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    SELECT</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">parent_id</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> category c</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    JOIN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cte </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ON</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">parent_id</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> cte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">id</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cte;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第一部分是基准查询（anchor member）</li><li>第二部分是递归查询（recursive member）</li><li>数据库会迭代执行直到不再产生新行</li></ul><hr><h2 id="_4️⃣-cte-vs-子查询-vs-临时表" tabindex="-1"><a class="header-anchor" href="#_4️⃣-cte-vs-子查询-vs-临时表"><span>4️⃣ CTE vs 子查询 vs 临时表</span></a></h2><table><thead><tr><th>特性</th><th>CTE</th><th>子查询</th><th>临时表</th></tr></thead><tbody><tr><td>可读性</td><td>高，逻辑清晰</td><td>中，嵌套多层时难读</td><td>高，但需要额外建表</td></tr><tr><td>可复用</td><td>是（在同一 SQL 内）</td><td>否</td><td>是（跨 SQL 可用）</td></tr><tr><td>性能</td><td>大部分数据库和子查询差不多</td><td>取决于优化器</td><td>大数据量可加索引，性能最好</td></tr><tr><td>递归</td><td>支持递归 CTE</td><td>不支持</td><td>不支持</td></tr><tr><td>支持数据库</td><td>PostgreSQL, MySQL8+, SQL Server, Oracle</td><td>所有</td><td>所有</td></tr></tbody></table><hr><h2 id="_5️⃣-cte-性能注意事项" tabindex="-1"><a class="header-anchor" href="#_5️⃣-cte-性能注意事项"><span>5️⃣ CTE 性能注意事项</span></a></h2><ol><li><strong>普通 CTE</strong>：大部分数据库把它当作子查询，性能和子查询差不多。</li><li><strong>PostgreSQL &lt; 12</strong>：CTE 默认会物化（MATERIALIZED），相当于生成临时表，可能导致性能下降。 <ul><li>PostgreSQL 12+ 可以用 <code>NOT MATERIALIZED</code> 让优化器内联。</li></ul></li><li><strong>递归 CTE</strong>：每次迭代都会生成临时结果集，注意数据量不要过大。</li><li><strong>使用场景</strong>： <ul><li>多层嵌套查询</li><li>复用中间结果</li><li>层级/树形结构查询</li></ul></li></ol><hr><h2 id="_6️⃣-面试常考点总结" tabindex="-1"><a class="header-anchor" href="#_6️⃣-面试常考点总结"><span>6️⃣ 面试常考点总结</span></a></h2><ul><li>一个 SQL 语句中 <strong>只能有一个 <code>WITH</code> 开头</strong>，但可以定义多个 CTE。</li><li>后面的 CTE 可以引用前面的 CTE。</li><li><code>JOIN</code>、<code>GROUP BY</code> 等操作可以在 CTE 内部完成，逻辑更清晰。</li><li>递归 CTE 可以解决层级查询问题。</li><li>性能上大部分情况下与子查询相似，PostgreSQL 旧版本需注意物化问题。</li></ul><hr><h2 id="_7️⃣-面试示例回答" tabindex="-1"><a class="header-anchor" href="#_7️⃣-面试示例回答"><span>7️⃣ 面试示例回答</span></a></h2><blockquote><p>“CTE 是 SQL 的公共表表达式，可以在一个 SQL 语句中定义临时表供后续查询使用。一个 WITH 子句可以定义多个 CTE，后面的 CTE 可以引用前面的 CTE。CTE 支持递归查询，适合树形结构。性能上大多数数据库和子查询差不多，PostgreSQL 12 之前默认物化，需要注意。相比子查询，CTE 可读性更好，尤其是多层嵌套或复用中间结果时。”</p></blockquote>',30)]))}]]),t=JSON.parse('{"path":"/Database/MySQL/%E9%9A%8F%E7%AC%94/CTE%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90d.html","title":"📝 SQL CTE（Common Table Expression）全面解析","lang":"zh-CN","frontmatter":{"gitInclude":[]},"headers":[{"level":2,"title":"1️⃣ CTE 的基本概念","slug":"_1️⃣-cte-的基本概念","link":"#_1️⃣-cte-的基本概念","children":[]},{"level":2,"title":"2️⃣ 多个 CTE 的写法","slug":"_2️⃣-多个-cte-的写法","link":"#_2️⃣-多个-cte-的写法","children":[]},{"level":2,"title":"3️⃣ 递归 CTE","slug":"_3️⃣-递归-cte","link":"#_3️⃣-递归-cte","children":[]},{"level":2,"title":"4️⃣ CTE vs 子查询 vs 临时表","slug":"_4️⃣-cte-vs-子查询-vs-临时表","link":"#_4️⃣-cte-vs-子查询-vs-临时表","children":[]},{"level":2,"title":"5️⃣ CTE 性能注意事项","slug":"_5️⃣-cte-性能注意事项","link":"#_5️⃣-cte-性能注意事项","children":[]},{"level":2,"title":"6️⃣ 面试常考点总结","slug":"_6️⃣-面试常考点总结","link":"#_6️⃣-面试常考点总结","children":[]},{"level":2,"title":"7️⃣ 面试示例回答","slug":"_7️⃣-面试示例回答","link":"#_7️⃣-面试示例回答","children":[]}],"readingTime":{"minutes":2.85,"words":854},"filePathRelative":"Database/MySQL/随笔/CTE全面解析d.md","excerpt":"\\n<p>在 SQL 开发中，CTE（Common Table Expression，公共表表达式）是一种提高可读性和可维护性的工具。本文将系统介绍 CTE 的用法、优势、性能注意事项以及在不同数据库中的特性。</p>\\n<hr>\\n<h2>1️⃣ CTE 的基本概念</h2>\\n<p>CTE 是 SQL-92 引入的语法糖，用于在 SQL 语句中定义一个临时的结果集，供后续查询使用。\\nCTE 可以让 SQL 更清晰，尤其是在多层嵌套查询或递归查询中非常有用。</p>\\n<p><strong>语法示例：</strong></p>\\n<div class=\\"language-sql line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"sql\\" data-title=\\"sql\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">WITH</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> cte_name </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">AS</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> (</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    SELECT</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> column1, column2</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    FROM</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> table</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    WHERE</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> condition</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">SELECT</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> *</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">FROM</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> cte_name</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">WHERE</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> ...</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}')}}]);