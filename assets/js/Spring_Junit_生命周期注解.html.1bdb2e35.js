"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6845],{66262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}},70559:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>e,data:()=>t});var n=a(20641);const l={},e=(0,a(66262).A)(l,[["render",function(i,s){return(0,n.uX)(),(0,n.CE)("div",null,s[0]||(s[0]=[(0,n.Fv)('<h1 id="生命周期注解" tabindex="-1"><a class="header-anchor" href="#生命周期注解"><span>生命周期注解</span></a></h1><div class="hint-container note"><p class="hint-container-title">注</p><p>在 <strong>JUnit 5</strong> 中，生命周期注解用于控制测试方法执行前后或在所有测试执行前后的行为。它们帮助开发者进行初始化、清理和资源管理。下面是 JUnit 5 中常用的生命周期注解的总结：</p></div><h3 id="_1-beforeeach" tabindex="-1"><a class="header-anchor" href="#_1-beforeeach"><span>1. <strong><code>@BeforeEach</code></strong></span></a></h3><ul><li><strong>作用</strong>：在每个测试方法执行之前运行。</li><li><strong>用途</strong>：用于每个测试方法之前需要执行的初始化操作，如设置测试数据、创建对象等。</li><li><strong>执行时机</strong>：在每个测试方法执行之前。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">BeforeEach</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> setUp</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 每个测试方法执行之前会调用</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-aftereach" tabindex="-1"><a class="header-anchor" href="#_2-aftereach"><span>2. <strong><code>@AfterEach</code></strong></span></a></h3><ul><li><strong>作用</strong>：在每个测试方法执行之后运行。</li><li><strong>用途</strong>：用于每个测试方法执行之后需要执行的清理工作，如释放资源、关闭连接等。</li><li><strong>执行时机</strong>：在每个测试方法执行之后。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">AfterEach</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> tearDown</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 每个测试方法执行之后会调用</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-beforeall" tabindex="-1"><a class="header-anchor" href="#_3-beforeall"><span>3. <strong><code>@BeforeAll</code></strong></span></a></h3><ul><li><strong>作用</strong>：在所有测试方法执行之前运行一次（静态方法）。</li><li><strong>用途</strong>：用于进行一些一次性的初始化操作，如加载数据库连接、启动服务器等。</li><li><strong>执行时机</strong>：在类中的所有测试方法执行之前，只执行一次。方法必须是 <code>static</code> 类型。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">BeforeAll</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> initAll</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 只执行一次，在所有测试方法执行之前调用</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-afterall" tabindex="-1"><a class="header-anchor" href="#_4-afterall"><span>4. <strong><code>@AfterAll</code></strong></span></a></h3><ul><li><strong>作用</strong>：在所有测试方法执行之后运行一次（静态方法）。</li><li><strong>用途</strong>：用于进行一些清理操作，如关闭数据库连接、停止服务器等。</li><li><strong>执行时机</strong>：在类中的所有测试方法执行之后，只执行一次。方法必须是 <code>static</code> 类型。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">AfterAll</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> tearDownAll</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 只执行一次，在所有测试方法执行之后调用</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-test" tabindex="-1"><a class="header-anchor" href="#_5-test"><span>5. <strong><code>@Test</code></strong></span></a></h3><ul><li>虽然不是生命周期注解，但它是标记测试方法的注解。JUnit 5 会根据生命周期注解的顺序执行相应的方法。</li></ul><h3 id="生命周期执行顺序" tabindex="-1"><a class="header-anchor" href="#生命周期执行顺序"><span>生命周期执行顺序：</span></a></h3><ol><li><code>@BeforeAll</code> （静态方法，所有测试之前执行一次）</li><li><code>@BeforeEach</code> （每个测试方法之前执行）</li><li>测试方法（<code>@Test</code> 标记的方法）</li><li><code>@AfterEach</code> （每个测试方法之后执行）</li><li><code>@AfterAll</code> （静态方法，所有测试之后执行一次）</li></ol><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><p>import org.junit.jupiter.api.BeforeEach; import org.junit.jupiter.api.Test;</p><p>public class MyTest {</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">BeforeEach</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> setUp</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 每个测试方法前都会执行此方法</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    message </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Hello, world!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Test</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> testMessageLength</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 测试方法，执行前会调用 setUp()</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    assertEquals</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">13</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Test</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> testMessageContent</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 另一个测试方法，也会先执行 setUp()</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    assertEquals</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello, world!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> message)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结：</span></a></h3><ul><li><strong><code>@BeforeEach</code></strong> 和 <strong><code>@AfterEach</code></strong> 适用于每个单独的测试方法，常用于初始化和清理资源。</li><li><strong><code>@BeforeAll</code></strong> 和 <strong><code>@AfterAll</code></strong> 适用于整个测试类的初始化和清理工作，通常用于一些一次性的资源准备和回收工作。</li></ul>',24)]))}]]),t=JSON.parse('{"path":"/Spring/Junit/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%B3%A8%E8%A7%A3.html","title":"生命周期注解","lang":"zh-CN","frontmatter":{"gitInclude":[]},"headers":[{"level":3,"title":"1. @BeforeEach","slug":"_1-beforeeach","link":"#_1-beforeeach","children":[]},{"level":3,"title":"2. @AfterEach","slug":"_2-aftereach","link":"#_2-aftereach","children":[]},{"level":3,"title":"3. @BeforeAll","slug":"_3-beforeall","link":"#_3-beforeall","children":[]},{"level":3,"title":"4. @AfterAll","slug":"_4-afterall","link":"#_4-afterall","children":[]},{"level":3,"title":"5. @Test","slug":"_5-test","link":"#_5-test","children":[]},{"level":3,"title":"生命周期执行顺序：","slug":"生命周期执行顺序","link":"#生命周期执行顺序","children":[]},{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"总结：","slug":"总结","link":"#总结","children":[]}],"readingTime":{"minutes":2.4,"words":719},"filePathRelative":"Spring/Junit/生命周期注解.md","excerpt":"\\n<div class=\\"hint-container note\\">\\n<p class=\\"hint-container-title\\">注</p>\\n<p>在 <strong>JUnit 5</strong> 中，生命周期注解用于控制测试方法执行前后或在所有测试执行前后的行为。它们帮助开发者进行初始化、清理和资源管理。下面是 JUnit 5 中常用的生命周期注解的总结：</p>\\n</div>\\n<h3>1. <strong><code>@BeforeEach</code></strong></h3>\\n<ul>\\n<li><strong>作用</strong>：在每个测试方法执行之前运行。</li>\\n<li><strong>用途</strong>：用于每个测试方法之前需要执行的初始化操作，如设置测试数据、创建对象等。</li>\\n<li><strong>执行时机</strong>：在每个测试方法执行之前。</li>\\n</ul>"}')}}]);