"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9607],{66262:(i,t)=>{t.A=(i,t)=>{const a=i.__vccOpts||i;for(const[i,p]of t)a[i]=p;return a}},73594:(i,t,a)=>{a.r(t),a.d(t,{comp:()=>o,data:()=>c});var p=a(20641);const n=a.p+"assets/img/wps10.cf2a8453.jpg",e=a.p+"assets/img/wps11.36008752.jpg",s={},o=(0,a(66262).A)(s,[["render",function(i,t){return(0,p.uX)(),(0,p.CE)("div",null,t[0]||(t[0]=[(0,p.Fv)('<h1 id="_12-如何进行死锁诊断" tabindex="-1"><a class="header-anchor" href="#_12-如何进行死锁诊断"><span>12.如何进行死锁诊断？</span></a></h1><blockquote><p>难易程度：☆☆☆</p><p>出现频率：☆☆☆</p></blockquote><div class="hint-container important"><p class="hint-container-title">重要</p><p><strong>参考回答</strong></p><p>我们只需要通过jdk自动的工具就能搞定我们可以先通过jps来查看当前java程序运行的进程id然后通过jstack来查看这个进程id，就能展示出来死锁的问题，并且，可以定位代码的具体行号范围，我们再去找到对应的代码进行排查就行了。</p></div><hr><p>当程序出现了死锁现象，我们可以使用jdk自带的工具：<code>jps和 jstack</code></p><p>步骤如下：</p><p>第一：查看运行的线程</p><figure><img src="'+n+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>第二：使用jstack查看线程运行的情况，下图是截图的关键信息</p><p>运行命令：jstack -l 46032</p><figure><img src="'+e+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>其他解决工具，可视化工具</strong></p><ul><li>jconsole</li></ul><p>用于对jvm的内存，线程，类 的监控，是一个基于 jmx 的 GUI 性能监控工具</p><p>打开方式：java 安装目录 bin目录下 直接启动 jconsole.exe 就行</p><ul><li>VisualVM：故障处理工具</li></ul><p>能够监控线程，内存情况，查看方法的CPU时间和内存中的对象，已被GC的对象，反向查看分配的堆栈</p><p>打开方式：java 安装目录 bin目录下 直接启动 jvisualvm.exe就行</p>',18)]))}]]),c=JSON.parse('{"path":"/Interview/%E9%BB%91%E9%A9%ACJava2023/08%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/02%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8/12.%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E6%AD%BB%E9%94%81%E5%88%A4%E6%96%AD.html","title":"12.如何进行死锁诊断？","lang":"zh-CN","frontmatter":{"gitInclude":[]},"headers":[],"readingTime":{"minutes":1.06,"words":317},"filePathRelative":"Interview/黑马Java2023/08并发编程/02并发安全/12.如何进行死锁判断.md","excerpt":"\\n<blockquote>\\n<p>难易程度：☆☆☆</p>\\n<p>出现频率：☆☆☆</p>\\n</blockquote>\\n<div class=\\"hint-container important\\">\\n<p class=\\"hint-container-title\\">重要</p>\\n<p><strong>参考回答</strong></p>\\n<p>我们只需要通过jdk自动的工具就能搞定我们可以先通过jps来查看当前java程序运行的进程id然后通过jstack来查看这个进程id，就能展示出来死锁的问题，并且，可以定位代码的具体行号范围，我们再去找到对应的代码进行排查就行了。</p>\\n</div>\\n<hr>"}')}}]);