"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[94555],{66262:(e,n)=>{n.A=(e,n)=>{const r=e.__vccOpts||e;for(const[e,l]of n)r[e]=l;return r}},4799:(e,n,r)=>{r.r(n),r.d(n,{comp:()=>i,data:()=>t});var l=r(20641);const o={},i=(0,r(66262).A)(o,[["render",function(e,n){return(0,l.uX)(),(0,l.CE)("div",null,n[0]||(n[0]=[(0,l.Fv)('<h1 id="springmvc注解" tabindex="-1"><a class="header-anchor" href="#springmvc注解"><span>SpringMVC注解</span></a></h1><h2 id="enablewebmvc" tabindex="-1"><a class="header-anchor" href="#enablewebmvc"><span>@EnableWebMvc</span></a></h2><p><code>@EnableWebMvc</code> 注解会启用 Spring MVC 的默认配置，包括：</p><ul><li><strong>配置 DispatcherServlet</strong>：Spring MVC 的核心控制器，负责处理 HTTP 请求。</li><li><strong>启用视图解析器</strong>：默认的 <code>InternalResourceViewResolver</code>，用于解析 JSP 或其他视图。</li><li><strong>启用注解驱动的控制器</strong>：允许使用 <code>@Controller</code>, <code>@RequestMapping</code> 等注解来定义请求处理方法。</li><li><strong>启用消息转换器</strong>：支持请求和响应的 JSON、XML 等格式的转换。</li></ul><p>✈️ 适用于传统的 Spring MVC 应用程序</p><p>🌱 在 Spring Boot 中，不建议显式使用 <code>@EnableWebMvc</code>，因为 Spring Boot 自动配置已经处理了 Spring MVC 的配置。</p>',6)]))}]]),t=JSON.parse('{"path":"/SSM/02-SpringMVC%E7%AC%94%E8%AE%B0/%E9%9A%8F%E7%AC%94/SpringMVC%E6%B3%A8%E8%A7%A3.html","title":"SpringMVC注解","lang":"zh-CN","frontmatter":{"gitInclude":[]},"headers":[{"level":2,"title":"@EnableWebMvc","slug":"enablewebmvc","link":"#enablewebmvc","children":[]}],"readingTime":{"minutes":0.51,"words":153},"filePathRelative":"SSM/02-SpringMVC笔记/随笔/SpringMVC注解.md","excerpt":"\\n<h2>@EnableWebMvc</h2>\\n<p><code>@EnableWebMvc</code> 注解会启用 Spring MVC 的默认配置，包括：</p>\\n<ul>\\n<li><strong>配置 DispatcherServlet</strong>：Spring MVC 的核心控制器，负责处理 HTTP 请求。</li>\\n<li><strong>启用视图解析器</strong>：默认的 <code>InternalResourceViewResolver</code>，用于解析 JSP 或其他视图。</li>\\n<li><strong>启用注解驱动的控制器</strong>：允许使用 <code>@Controller</code>, <code>@RequestMapping</code> 等注解来定义请求处理方法。</li>\\n<li><strong>启用消息转换器</strong>：支持请求和响应的 JSON、XML 等格式的转换。</li>\\n</ul>"}')}}]);