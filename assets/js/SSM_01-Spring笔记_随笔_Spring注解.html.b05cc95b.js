"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[66436],{66262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}},58133:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>t,data:()=>l});var n=a(20641);const e={},t=(0,a(66262).A)(e,[["render",function(i,s){return(0,n.uX)(),(0,n.CE)("div",null,s[0]||(s[0]=[(0,n.Fv)('<h1 id="spring注解" tabindex="-1"><a class="header-anchor" href="#spring注解"><span>Spring注解</span></a></h1><h2 id="aop" tabindex="-1"><a class="header-anchor" href="#aop"><span>AOP</span></a></h2><h3 id="propertysource" tabindex="-1"><a class="header-anchor" href="#propertysource"><span>@PropertySource</span></a></h3><p>用于指定外部的配置文件路径，并将文件中的属性加载到 Spring 的 Environment 中，方便在应用程序中使用</p><h3 id="import" tabindex="-1"><a class="header-anchor" href="#import"><span>@Import</span></a></h3><p>可以帮助你将多个配置类模块化地导入到一个主配置类中，避免单一配置类过于庞大</p><h3 id="runwith" tabindex="-1"><a class="header-anchor" href="#runwith"><span>@RunWith</span></a></h3><p><code>@RunWith</code> 的作用是为测试类指定一个自定义的 <strong>Test Runner</strong>，JUnit 默认使用的运行器<code>BlockJUnit4ClassRunner</code>，但可以通过 <code>@RunWith</code> 来指定其他的测试运行器</p><h3 id="contextconfiguration" tabindex="-1"><a class="header-anchor" href="#contextconfiguration"><span>@ContextConfiguration</span></a></h3><p><code>@ContextConfiguration</code> 是 Spring 测试框架中的一个注解，它用于指定加载 Spring 上下文的配置，通常与 <code>@RunWith(SpringRunner.class)</code> 一起使用。这个注解在进行 Spring 集成测试时非常有用，能够让测试类加载 Spring 配置，并注入 Spring 容器中的 Bean</p><h3 id="repository" tabindex="-1"><a class="header-anchor" href="#repository"><span>@Repository</span></a></h3><p><code>@Repository</code> 注解将一个类标识为 DAO 层的组件</p><h2 id="事务" tabindex="-1"><a class="header-anchor" href="#事务"><span>事务</span></a></h2><h3 id="enabletransactionmanagement" tabindex="-1"><a class="header-anchor" href="#enabletransactionmanagement"><span>@EnableTransactionManagement</span></a></h3><p>设置当前Spring环境中开启注解式事务支持</p><p>🔥事务管理器要根据使用技术进行选择，Mybatis框架使用的是JDBC事务，可以直接使用<code>DataSourceTransactionManager</code></p><h3 id="transactional" tabindex="-1"><a class="header-anchor" href="#transactional"><span>@Transactional</span></a></h3><p>🐱 为当前业务层方法添加事务</p><p>🌳 <code> @Transactional(rollbackFor = {IOException.class})</code>：在 Spring 的事务管理中，遇到 <code>IOException</code> 异常时，事务会进行回滚。默认Spring的事务只会对<code>Error异常</code>和<code>RuntimeException异常</code>及其子类进行事务回滚，其他的异常类型是不会回滚的</p><p>🌳<code>@Transactional(propagation = Propagation.REQUIRES_NEW)</code>:propagation设置事务属性：传播行为设置为当前操作需要新事务</p><h2 id="web" tabindex="-1"><a class="header-anchor" href="#web"><span>Web</span></a></h2><h3 id="exceptionhandler" tabindex="-1"><a class="header-anchor" href="#exceptionhandler"><span>@ExceptionHandler</span></a></h3><table><thead><tr><th>名称</th><th>@ExceptionHandler</th></tr></thead><tbody><tr><td>类型</td><td><mark>方法注解</mark></td></tr><tr><td>位置</td><td>专用于异常处理的控制器方法上方</td></tr><tr><td>作用</td><td>设置指定异常的处理方案，功能等同于控制器方法，<br>出现异常后终止原始控制器执行,并转入当前方法执行</td></tr></tbody></table><p>Spring 框架中用来处理控制器（Controller）方法抛出的异常的注解。它允许你指定一个方法来处理特定类型的异常，并且可以自定义返回的错误信息或响应</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ControllerAdvice</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> GlobalExceptionHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ExceptionHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ResponseStatus</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">HttpStatus</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">INTERNAL_SERVER_ERROR</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> handleGlobalException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Exception</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Model</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> model</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        model</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addAttribute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;error&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;errorPage&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>🔥@RestControllerAdvice包含@ControllerAdvice</p><h3 id="restcontrolleradvice" tabindex="-1"><a class="header-anchor" href="#restcontrolleradvice"><span>@RestControllerAdvice</span></a></h3><table><thead><tr><th>名称</th><th>@RestControllerAdvice</th></tr></thead><tbody><tr><td>类型</td><td><mark>类注解</mark></td></tr><tr><td>位置</td><td>Rest风格开发的控制器增强类定义上方</td></tr><tr><td>作用</td><td>为Rest风格开发的控制器类做增强</td></tr></tbody></table>',28)]))}]]),l=JSON.parse('{"path":"/SSM/01-Spring%E7%AC%94%E8%AE%B0/%E9%9A%8F%E7%AC%94/Spring%E6%B3%A8%E8%A7%A3.html","title":"Spring注解","lang":"zh-CN","frontmatter":{"gitInclude":[]},"headers":[{"level":2,"title":"AOP","slug":"aop","link":"#aop","children":[{"level":3,"title":"@PropertySource","slug":"propertysource","link":"#propertysource","children":[]},{"level":3,"title":"@Import","slug":"import","link":"#import","children":[]},{"level":3,"title":"@RunWith","slug":"runwith","link":"#runwith","children":[]},{"level":3,"title":"@ContextConfiguration","slug":"contextconfiguration","link":"#contextconfiguration","children":[]},{"level":3,"title":"@Repository","slug":"repository","link":"#repository","children":[]}]},{"level":2,"title":"事务","slug":"事务","link":"#事务","children":[{"level":3,"title":"@EnableTransactionManagement","slug":"enabletransactionmanagement","link":"#enabletransactionmanagement","children":[]},{"level":3,"title":"@Transactional","slug":"transactional","link":"#transactional","children":[]}]},{"level":2,"title":"Web","slug":"web","link":"#web","children":[{"level":3,"title":"@ExceptionHandler","slug":"exceptionhandler","link":"#exceptionhandler","children":[]},{"level":3,"title":"@RestControllerAdvice","slug":"restcontrolleradvice","link":"#restcontrolleradvice","children":[]}]}],"readingTime":{"minutes":1.93,"words":579},"filePathRelative":"SSM/01-Spring笔记/随笔/Spring注解.md","excerpt":"\\n<h2>AOP</h2>\\n<h3>@PropertySource</h3>\\n<p>用于指定外部的配置文件路径，并将文件中的属性加载到 Spring 的 Environment 中，方便在应用程序中使用</p>\\n<h3>@Import</h3>\\n<p>可以帮助你将多个配置类模块化地导入到一个主配置类中，避免单一配置类过于庞大</p>\\n<h3>@RunWith</h3>\\n<p><code>@RunWith</code> 的作用是为测试类指定一个自定义的 <strong>Test Runner</strong>，JUnit 默认使用的运行器<code>BlockJUnit4ClassRunner</code>，但可以通过 <code>@RunWith</code> 来指定其他的测试运行器</p>"}')}}]);