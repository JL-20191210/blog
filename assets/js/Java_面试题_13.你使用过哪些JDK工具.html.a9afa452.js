"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9027],{6262:(a,J)=>{J.A=(a,J)=>{const t=a.__vccOpts||a;for(const[a,s]of J)t[a]=s;return t}},1702:(a,J,t)=>{t.r(J),t.d(J,{comp:()=>j,data:()=>v});var s=t(641);const l={},j=(0,t(6262).A)(l,[["render",function(a,J){return(0,s.uX)(),(0,s.CE)("div",null,J[0]||(J[0]=[(0,s.Lk)("p",null,"JDK 提供的主要工具 ：",-1),(0,s.Lk)("ul",null,[(0,s.Lk)("li",null,"javac：Java 编译器，负责将 Java 源代码编译成字节码 （.class 文件）。 java：运行 Java 应用程序的命令，使用 JVM 来解释并执行 编译后的字节码文件。 javadoc：生成 API 文档的工具，能够根据源代码中的注释生 成 HTML 格式的文档。 jar：用于创建和管理 JAR 文件的工具，可以将多个 .class 文件打包为单一文件，便于分发和管理。 jdb：Java 调试工具，用于在命令行中调试 Java 应用程序， 支持断点设置、变量查看等功能。 性能监控和分析工具 ： jps：Java 进程工具，显示所有正在运行的 Java 进程，便于 监控和诊断。 jstack：生成线程堆栈信息的工具，常用于分析死锁和线程问 题。 jmap：内存映射工具，可以生成堆转储（heap dump）文 件，便于内存泄漏分析和垃圾回收优化。 jhat：堆分析工具，配合 jmap 使用，分析生成的堆转储文 件，帮助开发者了解内存使用情况。 jstat：JVM 统计监控工具，实时监控垃圾回收、内存、类加 载等信息，帮助开发者调优 JVM 性能。 jconsole：图形化的 JVM 监控工具，可以监控应用程序的内 存、线程和类加载情况，常用于监控和调试。 jvisualvm：功能强大的性能分析工具，支持堆、线程、GC 的详细监控，还提供内存分析和 CPU 性能分析。 诊断工具 ： jinfo：用于查看和修改正在运行的 JVM 参数，便于动态调优 和调整 JVM 行为。 jstatd：远程 JVM 监控工具，可以通过网络远程监控 JVM 的状态，适合分布式系统中的性能监控")],-1)]))}]]),v=JSON.parse('{"path":"/Java/%E9%9D%A2%E8%AF%95%E9%A2%98/13.%E4%BD%A0%E4%BD%BF%E7%94%A8%E8%BF%87%E5%93%AA%E4%BA%9BJDK%E5%B7%A5%E5%85%B7.html","title":"","lang":"zh-CN","frontmatter":{"gitInclude":[]},"headers":[],"readingTime":{"minutes":1.51,"words":454},"filePathRelative":"Java/面试题/13.你使用过哪些JDK工具.md","excerpt":"<p>JDK 提供的主要工具 ：</p>\\n<ul>\\n<li>javac：Java 编译器，负责将 Java 源代码编译成字节码 （.class 文件）。 java：运行 Java 应用程序的命令，使用 JVM 来解释并执行 编译后的字节码文件。 javadoc：生成 API 文档的工具，能够根据源代码中的注释生 成 HTML 格式的文档。 jar：用于创建和管理 JAR 文件的工具，可以将多个 .class 文件打包为单一文件，便于分发和管理。 jdb：Java 调试工具，用于在命令行中调试 Java 应用程序， 支持断点设置、变量查看等功能。 性能监控和分析工具 ： jps：Java 进程工具，显示所有正在运行的 Java 进程，便于 监控和诊断。 jstack：生成线程堆栈信息的工具，常用于分析死锁和线程问 题。 jmap：内存映射工具，可以生成堆转储（heap dump）文 件，便于内存泄漏分析和垃圾回收优化。 jhat：堆分析工具，配合 jmap 使用，分析生成的堆转储文 件，帮助开发者了解内存使用情况。 jstat：JVM 统计监控工具，实时监控垃圾回收、内存、类加 载等信息，帮助开发者调优 JVM 性能。 jconsole：图形化的 JVM 监控工具，可以监控应用程序的内 存、线程和类加载情况，常用于监控和调试。 jvisualvm：功能强大的性能分析工具，支持堆、线程、GC 的详细监控，还提供内存分析和 CPU 性能分析。 诊断工具 ： jinfo：用于查看和修改正在运行的 JVM 参数，便于动态调优 和调整 JVM 行为。 jstatd：远程 JVM 监控工具，可以通过网络远程监控 JVM 的状态，适合分布式系统中的性能监控</li>\\n</ul>"}')}}]);