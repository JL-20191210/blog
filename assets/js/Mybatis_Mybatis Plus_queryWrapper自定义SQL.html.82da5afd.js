"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8994],{6262:(e,l)=>{l.A=(e,l)=>{const o=e.__vccOpts||e;for(const[e,p]of l)o[e]=p;return o}},8850:(e,l,o)=>{o.r(l),o.d(l,{comp:()=>a,data:()=>d});var p=o(641);const r={},a=(0,o(6262).A)(r,[["render",function(e,l){return(0,p.uX)(),(0,p.CE)("div",null,l[0]||(l[0]=[(0,p.Fv)('<h1 id="querywrapper-apply-1-1" tabindex="-1"><a class="header-anchor" href="#querywrapper-apply-1-1"><span>queryWrapper.apply(&quot;1=1&quot;)</span></a></h1><p><code>queryWrapper.apply(&quot;1=1&quot;);</code> 这行代码是在使用 <code>LambdaQueryWrapper</code> 进行查询时，通过 <code>apply</code> 方法添加一个自定义的 SQL 片段，即将 <code>where 1=1</code> 作为一个条件加入到查询中。以下是关于这行代码的总结：</p><ol><li><p><strong>代码解释</strong>：</p><ul><li><code>queryWrapper</code> 是一个 <code>LambdaQueryWrapper</code> 对象，用于构建查询条件。</li><li><code>apply</code> 方法用于添加自定义的 SQL 片段到查询条件中。</li><li><code>&quot;1=1&quot;</code> 是一个 SQL 条件，表示始终为真，因为任何数等于自身。</li></ul></li><li><p><strong>逻辑</strong>：</p><ul><li><code>apply(&quot;1=1&quot;)</code> 将 <code>where 1=1</code> 添加到查询条件中，这个条件始终为真，因为任何数等于自身。</li><li>在实际查询中，这个条件可以作为一个基础条件，确保查询条件的合法性。</li></ul></li><li><p><strong>用法总结</strong>：</p><ul><li>通过 <code>apply(&quot;1=1&quot;)</code> 方法，可以在查询条件中添加一个始终为真的条件，提供一些灵活性和基础条件。</li><li>这种方式可以用于构建复杂的查询条件，同时保持查询的灵活性和可读性。</li></ul></li></ol>',3)]))}]]),d=JSON.parse('{"path":"/Mybatis/Mybatis%20Plus/queryWrapper%E8%87%AA%E5%AE%9A%E4%B9%89SQL.html","title":"queryWrapper.apply(\\"1=1\\")","lang":"zh-CN","frontmatter":{"icon":"mybatis plus","date":"2024-11-26T00:00:00.000Z","category":["Mybatis"],"tag":["查询"],"gitInclude":[]},"headers":[],"readingTime":{"minutes":0.93,"words":279},"filePathRelative":"Mybatis/Mybatis Plus/queryWrapper自定义SQL.md","localizedDate":"2024年11月26日","excerpt":"\\n<p><code>queryWrapper.apply(\\"1=1\\");</code> 这行代码是在使用 <code>LambdaQueryWrapper</code> 进行查询时，通过 <code>apply</code> 方法添加一个自定义的 SQL 片段，即将 <code>where 1=1</code> 作为一个条件加入到查询中。以下是关于这行代码的总结：</p>\\n<ol>\\n<li>\\n<p><strong>代码解释</strong>：</p>\\n<ul>\\n<li><code>queryWrapper</code> 是一个 <code>LambdaQueryWrapper</code> 对象，用于构建查询条件。</li>\\n<li><code>apply</code> 方法用于添加自定义的 SQL 片段到查询条件中。</li>\\n<li><code>\\"1=1\\"</code> 是一个 SQL 条件，表示始终为真，因为任何数等于自身。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>逻辑</strong>：</p>\\n<ul>\\n<li><code>apply(\\"1=1\\")</code> 将 <code>where 1=1</code> 添加到查询条件中，这个条件始终为真，因为任何数等于自身。</li>\\n<li>在实际查询中，这个条件可以作为一个基础条件，确保查询条件的合法性。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>用法总结</strong>：</p>\\n<ul>\\n<li>通过 <code>apply(\\"1=1\\")</code> 方法，可以在查询条件中添加一个始终为真的条件，提供一些灵活性和基础条件。</li>\\n<li>这种方式可以用于构建复杂的查询条件，同时保持查询的灵活性和可读性。</li>\\n</ul>\\n</li>\\n</ol>"}')}}]);