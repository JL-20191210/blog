"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[72390],{66262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}},44058:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>l,data:()=>h});var n=a(20641);const t={},l=(0,a(66262).A)(t,[["render",function(i,s){return(0,n.uX)(),(0,n.CE)("div",null,s[0]||(s[0]=[(0,n.Fv)('<h1 id="☕-java-面试答题卡-字符串拼接与性能优化" tabindex="-1"><a class="header-anchor" href="#☕-java-面试答题卡-字符串拼接与性能优化"><span>☕ Java 面试答题卡：字符串拼接与性能优化</span></a></h1><hr><h2 id="🧠-知识点简介" tabindex="-1"><a class="header-anchor" href="#🧠-知识点简介"><span>🧠 知识点简介</span></a></h2><p>Java 提供了三种常用的字符串操作方式：</p><ul><li><strong>String</strong>：不可变对象，拼接会生成新对象。</li><li><strong>StringBuffer</strong>：可变对象，<strong>线程安全</strong>，方法加了 <code>synchronized</code>。</li><li><strong>StringBuilder</strong>：可变对象，<strong>线程不安全</strong>，但性能更高。</li></ul><hr><h2 id="🔑-重点区别" tabindex="-1"><a class="header-anchor" href="#🔑-重点区别"><span>🔑 重点区别</span></a></h2><table><thead><tr><th>特性</th><th>String</th><th>StringBuffer</th><th>StringBuilder</th></tr></thead><tbody><tr><td>可变性</td><td>❌ 不可变</td><td>✅ 可变</td><td>✅ 可变</td></tr><tr><td>线程安全</td><td>✅ 安全（不可变）</td><td>✅ 安全（同步锁）</td><td>❌ 不安全</td></tr><tr><td>性能</td><td>最低</td><td>中等</td><td>最高</td></tr><tr><td>典型使用场景</td><td>少量固定字符串</td><td>多线程拼接字符串</td><td>单线程大量拼接</td></tr></tbody></table><hr><h2 id="🚀-拼接-vs-append-性能分析" tabindex="-1"><a class="header-anchor" href="#🚀-拼接-vs-append-性能分析"><span>🚀 “+” 拼接 vs <code>append()</code> 性能分析</span></a></h2><h3 id="_1️⃣-编译期常量折叠" tabindex="-1"><a class="header-anchor" href="#_1️⃣-编译期常量折叠"><span>1️⃣ 编译期常量折叠</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;World&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 编译后 =&gt; &quot;HelloWorld&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>👉 编译期优化，性能最好，不涉及运行时操作。</p><hr><h3 id="_2️⃣-少量拼接-方法体内" tabindex="-1"><a class="header-anchor" href="#_2️⃣-少量拼接-方法体内"><span>2️⃣ 少量拼接（方法体内）</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> b </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;World&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> c </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 编译后等价于：</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> c </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> StringBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(a).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(b).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>👉 编译器会自动转换成 <code>StringBuilder.append()</code>，性能差不多。</p><hr><h3 id="_3️⃣-循环中的拼接" tabindex="-1"><a class="header-anchor" href="#_3️⃣-循环中的拼接"><span>3️⃣ 循环中的拼接</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ❌ 性能差：每次都创建新 StringBuilder</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    s </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ✅ 性能优：一个 StringBuilder 循环使用</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">StringBuilder</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> sb </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> StringBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    sb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(i);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> sb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>👉 循环中必须用 <code>StringBuilder.append()</code>，否则性能非常差。</p><hr><h2 id="🎯-面试高频回答-60-秒版" tabindex="-1"><a class="header-anchor" href="#🎯-面试高频回答-60-秒版"><span>🎯 面试高频回答（60 秒版）</span></a></h2><blockquote><p>Java 字符串拼接的性能取决于场景。</p><ul><li>如果是编译期常量，比如 <code>&quot;a&quot; + &quot;b&quot;</code>，编译器会直接优化成 <code>&quot;ab&quot;</code>，性能最好。</li><li>如果是方法体内少量拼接，<code>+</code> 会被编译器优化成 <code>StringBuilder.append()</code>，性能和手写差不多。</li><li>但如果在循环里频繁拼接，<code>+</code> 会反复创建新的 <code>StringBuilder</code>，效率很低，必须用 <code>StringBuilder.append()</code>。 此外，如果是多线程环境，建议用 <code>StringBuffer</code> 来保证线程安全。</li></ul></blockquote>',24)]))}]]),h=JSON.parse('{"path":"/Interview/%E9%9D%A2%E8%AF%95%E7%AD%94%E9%A2%98%E5%8D%A1/Java/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html","title":"☕ Java 面试答题卡：字符串拼接与性能优化","lang":"zh-CN","frontmatter":{"gitInclude":[]},"headers":[{"level":2,"title":"🧠 知识点简介","slug":"🧠-知识点简介","link":"#🧠-知识点简介","children":[]},{"level":2,"title":"🔑 重点区别","slug":"🔑-重点区别","link":"#🔑-重点区别","children":[]},{"level":2,"title":"🚀 “+” 拼接 vs append() 性能分析","slug":"🚀-拼接-vs-append-性能分析","link":"#🚀-拼接-vs-append-性能分析","children":[{"level":3,"title":"1️⃣ 编译期常量折叠","slug":"_1️⃣-编译期常量折叠","link":"#_1️⃣-编译期常量折叠","children":[]},{"level":3,"title":"2️⃣ 少量拼接（方法体内）","slug":"_2️⃣-少量拼接-方法体内","link":"#_2️⃣-少量拼接-方法体内","children":[]},{"level":3,"title":"3️⃣ 循环中的拼接","slug":"_3️⃣-循环中的拼接","link":"#_3️⃣-循环中的拼接","children":[]}]},{"level":2,"title":"🎯 面试高频回答（60 秒版）","slug":"🎯-面试高频回答-60-秒版","link":"#🎯-面试高频回答-60-秒版","children":[]}],"readingTime":{"minutes":1.47,"words":442},"filePathRelative":"Interview/面试答题卡/Java/字符串拼接与性能优化.md","excerpt":"\\n<hr>\\n<h2>🧠 知识点简介</h2>\\n<p>Java 提供了三种常用的字符串操作方式：</p>\\n<ul>\\n<li><strong>String</strong>：不可变对象，拼接会生成新对象。</li>\\n<li><strong>StringBuffer</strong>：可变对象，<strong>线程安全</strong>，方法加了 <code>synchronized</code>。</li>\\n<li><strong>StringBuilder</strong>：可变对象，<strong>线程不安全</strong>，但性能更高。</li>\\n</ul>\\n<hr>\\n<h2>🔑 重点区别</h2>"}')}}]);