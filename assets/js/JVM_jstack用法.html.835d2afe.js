"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[33273],{66262:(s,i)=>{i.A=(s,i)=>{const a=s.__vccOpts||s;for(const[s,n]of i)a[s]=n;return a}},74430:(s,i,a)=>{a.r(i),a.d(i,{comp:()=>l,data:()=>h});var n=a(20641);const e={},l=(0,a(66262).A)(e,[["render",function(s,i){return(0,n.uX)(),(0,n.CE)("div",null,[i[0]||(i[0]=(0,n.Lk)("h1",{id:"jstack用法总结",tabindex:"-1"},[(0,n.Lk)("a",{class:"header-anchor",href:"#jstack用法总结"},[(0,n.Lk)("span",null,"jstack用法总结")])],-1)),i[1]||(i[1]=(0,n.Lk)("blockquote",null,[(0,n.Lk)("p",null,[(0,n.Lk)("code",null,"jstack"),(0,n.eW)(" 是 Java Development Kit (JDK) 中的一个工具，用于打印 Java 进程的线程堆栈信息。它对于调试和分析 Java 应用程序的性能问题、死锁和线程状态非常有用。以下是 "),(0,n.Lk)("code",null,"jstack"),(0,n.eW)(" 的用法总结：")])],-1)),(0,n.Q3)(" more "),i[2]||(i[2]=(0,n.Fv)('<h3 id="jstack-用法概述" tabindex="-1"><a class="header-anchor" href="#jstack-用法概述"><span>jstack 用法概述</span></a></h3><ol><li><p><strong>基本命令格式</strong>：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">jstack</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">pi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">d&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中 <code>&lt;pid&gt;</code> 是要查看的 Java 进程的进程 ID。</p></li><li><p><strong>获取进程 ID</strong>： 在使用 <code>jstack</code> 之前，你需要找到目标 Java 进程的 PID。可以使用以下命令：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">jps</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>jps</code> 命令会列出当前运行的 Java 进程及其 PID。</p></li><li><p><strong>打印线程堆栈信息</strong>： 运行 <code>jstack</code> 命令将打印出指定 Java 进程的线程堆栈信息。例如：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">jstack</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 12345</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这将输出进程 ID 为 <code>12345</code> 的 Java 应用程序的所有线程的堆栈信息。</p></li><li><p><strong>导出堆栈信息到文件</strong>： 如果你想将堆栈信息保存到文件中，可以使用输出重定向：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">jstack</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 12345</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">stacktrace.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p><strong>处理死锁</strong>： <code>jstack</code> 可以帮助检测死锁情况。当线程发生死锁时，堆栈信息中会显示相关线程的状态和锁的信息，帮助开发者快速定位问题。</p></li><li><p><strong>使用选项</strong>：</p><ul><li><strong>-l</strong>：打印锁信息，包括监视器锁和自旋锁的详细信息。<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">jstack</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -l</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 12345</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><strong>-h</strong>：帮助选项，显示 <code>jstack</code> 的使用说明。</li></ul></li><li><p><strong>在 Docker 容器中使用</strong>： 在 Docker 容器中使用 <code>jstack</code> 的步骤包括：</p><ul><li>使用 <code>docker exec</code> 进入容器。</li><li>使用 <code>ps</code> 或 <code>jps</code> 查找 Java 进程的 PID。</li><li>运行 <code>jstack &lt;pid&gt;</code> 命令。</li></ul></li></ol><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h3><ul><li><strong>权限</strong>：确保你有足够的权限来运行 <code>jstack</code>，通常需要以 <code>root</code> 用户或拥有相应权限的用户身份执行。</li><li><strong>JDK 版本</strong>：<code>jstack</code> 是 JDK 的一部分，确保在运行环境中安装了 JDK。</li><li><strong>性能影响</strong>：在高负载的生产环境中，频繁使用 <code>jstack</code> 可能会对性能产生影响，建议在非高峰期使用。</li></ul><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><p>以下是一个完整的示例流程：</p><ol><li><p>查找 Java 进程：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">jps</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>输出：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>12345 MyApplication</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>使用 <code>jstack</code> 查看堆栈信息：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">jstack</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 12345</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>将堆栈信息导出到文件：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">jstack</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 12345</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">myapp_stacktrace.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>打印锁信息：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">jstack</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -l</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 12345</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><p>下面是一个使用 <code>jstack</code> 分析 Java 程序中的线程锁情况的实例，主要用于识别死锁或线程间的资源竞争。分析锁的问题通常需要查看线程的堆栈信息中的锁内容，包括锁的类型、持有者、等待者等信息。</p><h3 id="示例背景" tabindex="-1"><a class="header-anchor" href="#示例背景"><span>示例背景</span></a></h3><p>假设我们有一个 Java 应用程序，其中有多个线程在不同的资源上进行同步，但是它们可能会遇到死锁或资源竞争问题。为了分析这些问题，我们使用 <code>jstack</code> 查看线程堆栈信息，尤其是锁的相关细节。</p><h3 id="示例代码-可能引发死锁" tabindex="-1"><a class="header-anchor" href="#示例代码-可能引发死锁"><span>示例代码（可能引发死锁）</span></a></h3><p>以下是一个简单的 Java 程序，其中两个线程可能会发生死锁：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DeadlockExample</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> lock1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> lock2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Thread</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> thread1</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            synchronized</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (lock1) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Thread 1: Holding lock1...&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">InterruptedException</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {}</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Thread 1: Waiting for lock2...&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                synchronized</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (lock2) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Thread 1: Acquired lock2!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        });</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Thread</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> thread2</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            synchronized</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (lock2) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Thread 2: Holding lock2...&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">InterruptedException</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {}</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Thread 2: Waiting for lock1...&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                synchronized</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (lock1) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Thread 2: Acquired lock1!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        });</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        thread1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        thread2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这段代码中，<code>thread1</code> 持有 <code>lock1</code>，等待 <code>lock2</code>，而 <code>thread2</code> 持有 <code>lock2</code>，等待 <code>lock1</code>，这可能导致死锁。</p><h3 id="使用-jstack-查看锁信息" tabindex="-1"><a class="header-anchor" href="#使用-jstack-查看锁信息"><span>使用 <code>jstack</code> 查看锁信息</span></a></h3><p>运行上述程序时，如果发生死锁或资源竞争，我们可以使用 <code>jstack</code> 命令来分析 Java 进程的堆栈信息。假设程序的进程 ID 是 <code>12345</code>，我们可以运行以下命令：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">jstack</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -l</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 12345</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="jstack-输出分析" tabindex="-1"><a class="header-anchor" href="#jstack-输出分析"><span><code>jstack</code> 输出分析</span></a></h3><p>假设我们得到如下堆栈信息：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&quot;Thread-1&quot; #11 prio=5 os_prio=0 tid=0x00007f3d28022000 nid=0x15b7 waiting for monitor entry [0x00007f3d1b2eff10]</span></span>\n<span class="line"><span>   java.lang.Thread.State: BLOCKED (on object monitor)</span></span>\n<span class="line"><span>        at DeadlockExample$1.run(DeadlockExample.java:15)</span></span>\n<span class="line"><span>        - waiting to lock &lt;0x000000076d7986d0&gt; (a java.lang.Object)</span></span>\n<span class="line"><span>        - locked &lt;0x000000076d7986f8&gt; (a java.lang.Object)</span></span>\n<span class="line"><span>        at java.lang.Thread.run(Thread.java:748)</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>&quot;Thread-2&quot; #12 prio=5 os_prio=0 tid=0x00007f3d28022000 nid=0x15b8 waiting for monitor entry [0x00007f3d1b2f0e10]</span></span>\n<span class="line"><span>   java.lang.Thread.State: BLOCKED (on object monitor)</span></span>\n<span class="line"><span>        at DeadlockExample$2.run(DeadlockExample.java:25)</span></span>\n<span class="line"><span>        - waiting to lock &lt;0x000000076d7986f8&gt; (a java.lang.Object)</span></span>\n<span class="line"><span>        - locked &lt;0x000000076d7986d0&gt; (a java.lang.Object)</span></span>\n<span class="line"><span>        at java.lang.Thread.run(Thread.java:748)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="解释" tabindex="-1"><a class="header-anchor" href="#解释"><span>解释</span></a></h3><ul><li><strong>Thread-1</strong>: 正在等待锁 <code>0x000000076d7986f8</code>（即 <code>lock2</code>），但它已经持有锁 <code>0x000000076d7986d0</code>（即 <code>lock1</code>）。</li><li><strong>Thread-2</strong>: 正在等待锁 <code>0x000000076d7986d0</code>（即 <code>lock1</code>），但它已经持有锁 <code>0x000000076d7986f8</code>（即 <code>lock2</code>）。</li></ul><p>这两条线程互相持有对方需要的锁，从而形成了死锁。</p><h3 id="锁信息分析" tabindex="-1"><a class="header-anchor" href="#锁信息分析"><span>锁信息分析</span></a></h3><p>在 <code>jstack</code> 输出中，每个线程的状态、锁的持有情况、锁的等待情况等都被列出。通过 <code>-l</code> 选项，<code>jstack</code> 会显示锁的详细信息，包括：</p><ul><li><strong>锁对象</strong>：每个线程正在等待和持有的锁对象（如 <code>0x000000076d7986f0</code>）。</li><li><strong>线程的状态</strong>：如 <code>BLOCKED</code> 表示该线程正在等待锁，<code>WAITING</code> 表示线程正在等待其他条件。</li></ul><p>通过分析这些信息，我们可以很清楚地看到哪些线程在等待哪些锁，哪些线程是持有锁的，可以帮助我们判断是否存在死锁或资源竞争问题。</p><h3 id="解决死锁的思路" tabindex="-1"><a class="header-anchor" href="#解决死锁的思路"><span>解决死锁的思路</span></a></h3><ul><li><strong>避免嵌套锁</strong>：尽量避免一个线程同时持有多个锁，这可以减少死锁的发生机会。</li><li><strong>锁顺序</strong>：确保所有线程获取锁的顺序一致。例如，所有线程在获取 <code>lock1</code> 后再获取 <code>lock2</code>，避免相反顺序的情况。</li><li><strong>使用超时锁</strong>：为锁设置超时机制，避免线程无限期地等待锁的释放。</li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>使用 <code>jstack</code> 分析线程堆栈中的锁信息，可以帮助我们发现死锁、锁竞争等问题。在上面的例子中，<code>jstack</code> 显示了两个线程互相等待对方释放锁的信息，这就是死锁的典型表现。通过分析这些信息，可以帮助开发者定位并解决程序中的锁相关问题。</p>',31))])}]]),h=JSON.parse('{"path":"/JVM/jstack%E7%94%A8%E6%B3%95.html","title":"jstack用法总结","lang":"zh-CN","frontmatter":{"icon":"fa-solid fa-microchip","date":"2024-12-17T00:00:00.000Z","category":["JVM"],"tag":["总结"],"gitInclude":[]},"headers":[{"level":3,"title":"jstack 用法概述","slug":"jstack-用法概述","link":"#jstack-用法概述","children":[]},{"level":3,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]},{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"示例背景","slug":"示例背景","link":"#示例背景","children":[]},{"level":3,"title":"示例代码（可能引发死锁）","slug":"示例代码-可能引发死锁","link":"#示例代码-可能引发死锁","children":[]},{"level":3,"title":"使用 jstack 查看锁信息","slug":"使用-jstack-查看锁信息","link":"#使用-jstack-查看锁信息","children":[]},{"level":3,"title":"jstack 输出分析","slug":"jstack-输出分析","link":"#jstack-输出分析","children":[]},{"level":3,"title":"解释","slug":"解释","link":"#解释","children":[]},{"level":3,"title":"锁信息分析","slug":"锁信息分析","link":"#锁信息分析","children":[]},{"level":3,"title":"解决死锁的思路","slug":"解决死锁的思路","link":"#解决死锁的思路","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"readingTime":{"minutes":4.94,"words":1481},"filePathRelative":"JVM/jstack用法.md","localizedDate":"2024年12月17日","excerpt":"\\n<blockquote>\\n<p><code>jstack</code> 是 Java Development Kit (JDK) 中的一个工具，用于打印 Java 进程的线程堆栈信息。它对于调试和分析 Java 应用程序的性能问题、死锁和线程状态非常有用。以下是 <code>jstack</code> 的用法总结：</p>\\n</blockquote>\\n"}')}}]);