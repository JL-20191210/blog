"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[1285],{66262:(s,i)=>{i.A=(s,i)=>{const a=s.__vccOpts||s;for(const[s,n]of i)a[s]=n;return a}},94916:(s,i,a)=>{a.r(i),a.d(i,{comp:()=>l,data:()=>t});var n=a(20641);const e={},l=(0,a(66262).A)(e,[["render",function(s,i){return(0,n.uX)(),(0,n.CE)("div",null,i[0]||(i[0]=[(0,n.Fv)('<h2 id="☕-java-面试答题卡-适配器模式-adapter-pattern-详解" tabindex="-1"><a class="header-anchor" href="#☕-java-面试答题卡-适配器模式-adapter-pattern-详解"><span>☕ Java 面试答题卡：适配器模式（Adapter Pattern）详解</span></a></h2><h3 id="✅-1-什么是适配器模式" tabindex="-1"><a class="header-anchor" href="#✅-1-什么是适配器模式"><span>✅ 1. 什么是适配器模式？</span></a></h3><blockquote><p><strong>适配器模式</strong>是一种结构型设计模式，主要用于将一个类的接口转换成客户端所期望的另一个接口，从而实现<strong>接口不兼容的类之间协同工作</strong>。</p></blockquote><p>通俗地说：<strong>旧接口不能直接用？写个“转接头”适配上就能用了。</strong></p><hr><h3 id="✅-2-模式结构图" tabindex="-1"><a class="header-anchor" href="#✅-2-模式结构图"><span>✅ 2. 模式结构图</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>          ┌────────────┐</span></span>\n<span class="line"><span>          │ Target     │&lt;────────────┐</span></span>\n<span class="line"><span>          │（期望接口）│              │</span></span>\n<span class="line"><span>          └────────────┘              │</span></span>\n<span class="line"><span>                 ▲                    │</span></span>\n<span class="line"><span>                 │                    │</span></span>\n<span class="line"><span>           ┌──────────┐         ┌────────────┐</span></span>\n<span class="line"><span>           │ Adapter  │────────▶│ Adaptee    │</span></span>\n<span class="line"><span>           │（适配器）│         │（被适配者）│</span></span>\n<span class="line"><span>           └──────────┘         └────────────┘</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="✅-3-适配器模式的分类" tabindex="-1"><a class="header-anchor" href="#✅-3-适配器模式的分类"><span>✅ 3. 适配器模式的分类</span></a></h3><table><thead><tr><th>方式</th><th>描述</th><th>Java 实例</th></tr></thead><tbody><tr><td><strong>类适配器</strong></td><td>使用继承的方式实现适配（单继承）</td><td>少用，适用于只需要适配一个类</td></tr><tr><td><strong>对象适配器</strong></td><td>使用组合方式适配（推荐）</td><td><code>InputStreamReader</code>、Spring AOP</td></tr><tr><td><strong>接口适配器</strong></td><td>针对接口中方法太多，只需部分实现时使用</td><td><code>MouseAdapter</code>、<code>KeyAdapter</code> 等</td></tr></tbody></table><hr><h3 id="✅-4-示例-对象适配器模式" tabindex="-1"><a class="header-anchor" href="#✅-4-示例-对象适配器模式"><span>✅ 4. 示例：对象适配器模式</span></a></h3><h4 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景：</span></a></h4><p>我们已有一个 <code>V220Power</code> 提供 220V，但我们要使用 5V 接口（如手机充电器）。</p><h4 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现"><span>代码实现：</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 目标接口（客户希望的）</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> V5Power</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> provide5V</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 被适配者类（已有的）</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> V220Power</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> provide220V</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 220</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 适配器类</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> PowerAdapter</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> V5Power</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> V220Power</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> v220Power</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> PowerAdapter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">V220Power</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> v220Power</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">v220Power</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> v220Power;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> provide5V</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> power</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> v220Power</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">provide220V</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 模拟降压逻辑</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> power </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 44</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例"><span>使用示例：</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TestAdapter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        V220Power</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> power220</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> V220Power</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        V5Power</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> adapter</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> PowerAdapter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(power220);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;输出电压: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> adapter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">provide5V</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;V&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="✅-5-spring-中的适配器应用场景" tabindex="-1"><a class="header-anchor" href="#✅-5-spring-中的适配器应用场景"><span>✅ 5. Spring 中的适配器应用场景</span></a></h3><table><thead><tr><th>场景</th><th>描述</th></tr></thead><tbody><tr><td><code>HandlerAdapter</code></td><td>Spring MVC 请求处理适配器</td></tr><tr><td><code>WebMvcConfigurerAdapter</code></td><td>简化配置类，用户只需实现感兴趣的方法</td></tr><tr><td><code>MethodAdapter</code></td><td>将方法处理转换为统一调用入口</td></tr><tr><td><code>InputStreamReader</code></td><td>把字节流 <code>InputStream</code> 转为字符流 <code>Reader</code></td></tr></tbody></table><hr><h3 id="✅-6-适配器模式的优缺点" tabindex="-1"><a class="header-anchor" href="#✅-6-适配器模式的优缺点"><span>✅ 6. 适配器模式的优缺点</span></a></h3><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>解耦客户端与被适配类，提高复用性</td><td>类适配器受限于单继承</td></tr><tr><td>增强已有类的功能，无需修改原有代码（开闭原则）</td><td>增加代码结构复杂度</td></tr><tr><td>提供灵活转换不同接口对象的能力</td><td>有时会造成不必要的适配，带来维护成本</td></tr></tbody></table><hr><h3 id="✅-7-面试答题模板-建议背诵" tabindex="-1"><a class="header-anchor" href="#✅-7-面试答题模板-建议背诵"><span>✅ 7. 面试答题模板（建议背诵）</span></a></h3><blockquote><p>适配器模式是一种结构型设计模式，用于将一个类的接口转换成客户端希望的接口，解决接口不兼容的问题。常见的实现方式有类适配器和对象适配器，Java 中 <code>InputStreamReader</code>、<code>HandlerAdapter</code> 都是典型应用。该模式遵循开闭原则，便于老代码复用和新功能适配.</p></blockquote>',27)]))}]]),t=JSON.parse('{"path":"/Interview/%E9%9D%A2%E8%AF%95%E7%AD%94%E9%A2%98%E5%8D%A1/Java/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F%EF%BC%88Adapter%20Pattern%EF%BC%89.html","title":"","lang":"zh-CN","frontmatter":{"gitInclude":[]},"headers":[{"level":2,"title":"☕ Java 面试答题卡：适配器模式（Adapter Pattern）详解","slug":"☕-java-面试答题卡-适配器模式-adapter-pattern-详解","link":"#☕-java-面试答题卡-适配器模式-adapter-pattern-详解","children":[{"level":3,"title":"✅ 1. 什么是适配器模式？","slug":"✅-1-什么是适配器模式","link":"#✅-1-什么是适配器模式","children":[]},{"level":3,"title":"✅ 2. 模式结构图","slug":"✅-2-模式结构图","link":"#✅-2-模式结构图","children":[]},{"level":3,"title":"✅ 3. 适配器模式的分类","slug":"✅-3-适配器模式的分类","link":"#✅-3-适配器模式的分类","children":[]},{"level":3,"title":"✅ 4. 示例：对象适配器模式","slug":"✅-4-示例-对象适配器模式","link":"#✅-4-示例-对象适配器模式","children":[]},{"level":3,"title":"✅ 5. Spring 中的适配器应用场景","slug":"✅-5-spring-中的适配器应用场景","link":"#✅-5-spring-中的适配器应用场景","children":[]},{"level":3,"title":"✅ 6. 适配器模式的优缺点","slug":"✅-6-适配器模式的优缺点","link":"#✅-6-适配器模式的优缺点","children":[]},{"level":3,"title":"✅ 7. 面试答题模板（建议背诵）","slug":"✅-7-面试答题模板-建议背诵","link":"#✅-7-面试答题模板-建议背诵","children":[]}]}],"readingTime":{"minutes":2.11,"words":632},"filePathRelative":"Interview/面试答题卡/Java/适配器模式（Adapter Pattern）.md","excerpt":"<h2>☕ Java 面试答题卡：适配器模式（Adapter Pattern）详解</h2>\\n<h3>✅ 1. 什么是适配器模式？</h3>\\n<blockquote>\\n<p><strong>适配器模式</strong>是一种结构型设计模式，主要用于将一个类的接口转换成客户端所期望的另一个接口，从而实现<strong>接口不兼容的类之间协同工作</strong>。</p>\\n</blockquote>\\n<p>通俗地说：<strong>旧接口不能直接用？写个“转接头”适配上就能用了。</strong></p>\\n<hr>\\n<h3>✅ 2. 模式结构图</h3>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>          ┌────────────┐</span></span>\\n<span class=\\"line\\"><span>          │ Target     │&lt;────────────┐</span></span>\\n<span class=\\"line\\"><span>          │（期望接口）│              │</span></span>\\n<span class=\\"line\\"><span>          └────────────┘              │</span></span>\\n<span class=\\"line\\"><span>                 ▲                    │</span></span>\\n<span class=\\"line\\"><span>                 │                    │</span></span>\\n<span class=\\"line\\"><span>           ┌──────────┐         ┌────────────┐</span></span>\\n<span class=\\"line\\"><span>           │ Adapter  │────────▶│ Adaptee    │</span></span>\\n<span class=\\"line\\"><span>           │（适配器）│         │（被适配者）│</span></span>\\n<span class=\\"line\\"><span>           └──────────┘         └────────────┘</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}')}}]);