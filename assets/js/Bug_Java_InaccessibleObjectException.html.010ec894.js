"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2871],{66262:(a,e)=>{e.A=(a,e)=>{const s=a.__vccOpts||a;for(const[a,i]of e)s[a]=i;return s}},26565:(a,e,s)=>{s.r(e),s.d(e,{comp:()=>d,data:()=>l});var i=s(20641);const n={},d=(0,s(66262).A)(n,[["render",function(a,e){return(0,i.uX)(),(0,i.CE)("div",null,[e[0]||(e[0]=(0,i.Lk)("h1",{id:"解决-java-反射问题-inaccessibleobjectexception-和-add-opens-配置",tabindex:"-1"},[(0,i.Lk)("a",{class:"header-anchor",href:"#解决-java-反射问题-inaccessibleobjectexception-和-add-opens-配置"},[(0,i.Lk)("span",null,[(0,i.eW)("解决 Java 反射问题："),(0,i.Lk)("code",null,"InaccessibleObjectException"),(0,i.eW)(" 和 "),(0,i.Lk)("code",null,"--add-opens"),(0,i.eW)(" 配置")])])],-1)),e[1]||(e[1]=(0,i.Lk)("p",null,[(0,i.eW)("在 Java 9 及更高版本中，Java 引入了模块化系统（Jigsaw），这让 Java 程序能够更好地管理模块间的访问权限。然而，这也带来了一些问题，特别是在使用反射时，某些类、字段或方法会因为模块化系统的限制而变得不可访问。今天我们就来讨论一个常见的 Java 异常 —— "),(0,i.Lk)("code",null,"java.lang.reflect.InaccessibleObjectException"),(0,i.eW)("，以及如何通过 IntelliJ IDEA 配置解决这个问题。")],-1)),(0,i.Q3)(" more "),e[2]||(e[2]=(0,i.Fv)('<h3 id="问题描述" tabindex="-1"><a class="header-anchor" href="#问题描述"><span>问题描述</span></a></h3><p>当我们在 Java 程序中使用反射时，常常会遇到一些访问权限的问题。具体来说，错误信息通常会提示你无法访问某个字段或方法，原因是该类或字段被模块化系统保护了。例如，假设我们遇到了以下错误：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Unable to make field private java.util.concurrent.Callable java.util.concurrent.FutureTask.callable accessible: module java.base does not &quot;opens java.util.concurrent&quot; to unnamed module</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>从错误信息可以看出，程序试图通过反射访问 <code>java.util.concurrent.FutureTask</code> 中的 <code>callable</code> 字段，但是因为 Java 9 引入了模块化系统，<code>java.base</code> 模块并没有“开放”<code>java.util.concurrent</code> 包给外部模块，导致反射访问被拒绝。</p><h3 id="解决方案-使用-add-opens" tabindex="-1"><a class="header-anchor" href="#解决方案-使用-add-opens"><span>解决方案：使用 <code>--add-opens</code></span></a></h3><p>在 Java 9 及更高版本中，模块化系统控制了包的访问权限。为了通过反射访问被模块化保护的包，可以使用 <code>--add-opens</code> 选项显式允许访问这些包。</p><p>例如，如果你希望访问 <code>java.util.concurrent</code> 包中的类，可以在运行时通过添加 <code>--add-opens</code> 选项来解决该问题。</p><h4 id="_1-命令行解决方案" tabindex="-1"><a class="header-anchor" href="#_1-命令行解决方案"><span>1. 命令行解决方案</span></a></h4><p>如果你是在命令行下运行 Java 程序，可以通过以下命令启动程序：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --add-opens</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> java.base/java.util.concurrent=ALL-UNNAMED</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> your-application.jar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这条命令的意思是：“允许所有未命名模块访问 <code>java.base</code> 模块中的 <code>java.util.concurrent</code> 包”。</p><h4 id="_2-在-intellij-idea-中配置-add-opens" tabindex="-1"><a class="header-anchor" href="#_2-在-intellij-idea-中配置-add-opens"><span>2. 在 IntelliJ IDEA 中配置 <code>--add-opens</code></span></a></h4><p>如果你使用 IntelliJ IDEA 作为开发工具，可以按照以下步骤配置 <code>--add-opens</code> 选项：</p><h5 id="步骤-1-打开运行-调试配置" tabindex="-1"><a class="header-anchor" href="#步骤-1-打开运行-调试配置"><span>步骤 1: 打开运行/调试配置</span></a></h5><ol><li>打开 IntelliJ IDEA，并加载你的项目。</li><li>在右上角找到 <strong>运行/调试配置</strong> 下拉菜单，选择你要修改的配置（通常是你的主程序类或者测试类），然后点击 <strong>编辑配置</strong>（或者从菜单中选择 <strong>Run &gt; Edit Configurations</strong>）。</li></ol><h5 id="步骤-2-修改-vm-选项" tabindex="-1"><a class="header-anchor" href="#步骤-2-修改-vm-选项"><span>步骤 2: 修改 VM 选项</span></a></h5><ol><li><p>在 <strong>Run/Debug Configurations</strong> 窗口中，选择需要修改的配置项。</p></li><li><p>在右侧的 <strong>VM options</strong> 输入框中添加以下内容：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--add-opens</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> java.base/java.util.concurrent=ALL-UNNAMED</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这条配置将允许你的程序访问 <code>java.util.concurrent</code> 包中的类。</p></li></ol><h5 id="步骤-3-保存并运行" tabindex="-1"><a class="header-anchor" href="#步骤-3-保存并运行"><span>步骤 3: 保存并运行</span></a></h5><ol><li>点击 <strong>OK</strong> 保存修改。</li><li>重新运行程序，你应该不再遇到 <code>InaccessibleObjectException</code> 错误。</li></ol><h4 id="_3-多个-add-opens-配置" tabindex="-1"><a class="header-anchor" href="#_3-多个-add-opens-配置"><span>3. 多个 <code>--add-opens</code> 配置</span></a></h4><p>如果你需要同时访问多个包，可以在 <strong>VM options</strong> 中通过空格分隔多个 <code>--add-opens</code> 配置。例如：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">--add-opens</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> java.base/java.util.concurrent=ALL-UNNAMED</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --add-opens</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> java.base/java.lang=ALL-UNNAMED</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这样，程序将能够访问 <code>java.util.concurrent</code> 和 <code>java.lang</code> 包中的类。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>当你在 Java 9 及更高版本中遇到 <code>java.lang.reflect.InaccessibleObjectException</code> 错误时，通常是因为反射访问了受模块化系统保护的类或字段。解决这个问题的一种常见方法是使用 <code>--add-opens</code> 选项，显式地打开访问权限，允许反射操作受保护的包。</p><p>在 IntelliJ IDEA 中，你可以通过修改 <strong>VM options</strong> 配置来轻松解决这个问题，确保你的程序能够通过反射访问所需的字段或方法。这种方法不仅适用于当前的问题，也能帮助你更好地理解和应对 Java 模块化系统带来的挑战。</p>',26))])}]]),l=JSON.parse('{"path":"/Bug/Java/InaccessibleObjectException.html","title":"解决 Java 反射问题：InaccessibleObjectException 和 --add-opens 配置","lang":"zh-CN","frontmatter":{"gitInclude":[]},"headers":[{"level":3,"title":"问题描述","slug":"问题描述","link":"#问题描述","children":[]},{"level":3,"title":"解决方案：使用 --add-opens","slug":"解决方案-使用-add-opens","link":"#解决方案-使用-add-opens","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"readingTime":{"minutes":3.06,"words":917},"filePathRelative":"Bug/Java/InaccessibleObjectException.md","excerpt":"\\n<p>在 Java 9 及更高版本中，Java 引入了模块化系统（Jigsaw），这让 Java 程序能够更好地管理模块间的访问权限。然而，这也带来了一些问题，特别是在使用反射时，某些类、字段或方法会因为模块化系统的限制而变得不可访问。今天我们就来讨论一个常见的 Java 异常 —— <code>java.lang.reflect.InaccessibleObjectException</code>，以及如何通过 IntelliJ IDEA 配置解决这个问题。</p>\\n"}')}}]);