"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6667],{66262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,e]of s)a[i]=e;return a}},49025:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>l,data:()=>t});var e=a(20641);const n={},l=(0,a(66262).A)(n,[["render",function(i,s){return(0,e.uX)(),(0,e.CE)("div",null,[s[0]||(s[0]=(0,e.Fv)('<h1 id="jenkins-配置后端工程-自动拉取代码、打包与重新部署" tabindex="-1"><a class="header-anchor" href="#jenkins-配置后端工程-自动拉取代码、打包与重新部署"><span>Jenkins 配置后端工程，自动拉取代码、打包与重新部署</span></a></h1><p>本小节中，将演示如何在 <code>Jenkins</code> 中配置一键部署 <code>weblog</code> 后端工程，流程中包括拉取最新的 <code>master</code> 分支代码、执行 <code>maven</code> 打包，并最终连接云服务器，上传 <code>jar</code> 包并重启 <code>Spring Boot</code> 服务。</p>',2)),(0,e.Q3)(" more "),s[1]||(s[1]=(0,e.Fv)('<h2 id="_1-创建-job" tabindex="-1"><a class="header-anchor" href="#_1-创建-job"><span>1. 创建 Job</span></a></h2><p>首先，在 <code>Jenkins</code> 首页中，点击 <em>Create a job</em> , 或者点击左侧栏的 <em>新建 Item</em>：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061721690.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>输入任务名称，取名为 <code>weblog-springboot</code> , 选择 <em>Freestyle project</em> 自由类型的项目，点击<em>确定</em>按钮：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061722705.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>进入到 <code>weblog-springboot</code> 任务的具体配置环节，先给这个任务填写描述文字，如下图所示：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061721901.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_2-配置-git-源码管理" tabindex="-1"><a class="header-anchor" href="#_2-配置-git-源码管理"><span>2. 配置 Git 源码管理</span></a></h2><p>接着，进入到源码管理的配置，如下图所示：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061722668.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><ul><li><p>①： Git 仓库的地址，可以在 Gitee 中该仓库主页，复制其仓库地址；</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061721822.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure></li><li><p>②：配置 Gitee 的登录账号、密码（未配置，或者登录信息不正确，会提示<em>无法连接仓库</em>）；</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061722551.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure></li></ul></blockquote><p>添加完成后，若账号、密码正确，则<em>无法连接仓库</em>的错误信息会自动消失。在 Credentials 选项中，选择刚刚配置好的登录账号/密码，指定拉取 <code>master</code> 主分支的代码，最后点击<em>保存</em>：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061722904.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_3-构建任务" tabindex="-1"><a class="header-anchor" href="#_3-构建任务"><span>3. 构建任务</span></a></h2><p>配置完成后，回到首页中，点击右侧的<em>运行</em>按钮，开始构建任务：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061722342.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>点击左侧正在构建的任务，再点击<em>控制台输出</em>，即可实时查看构建日志：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061722072.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>解释一下构建日志关键的几个地方：</p><ul><li>①：表示构建空间的路径在 <code>/var/jenkins_home/workspace/weblog-spring</code> 目录下，根据之前运行容器时指定的挂载路径，即为宿主机中的 <code>E:\\docker\\jenkins2\\jenkins_home\\workspace\\weblog-springboot</code> 目录；</li><li>②：拉取远程仓库的最新代码，对应的提交信息，可以依此来判断拉取的，是不是最新的代码；</li><li>③：构建完毕；</li></ul></blockquote><p>任务执行成功后，进入到 <code>E:\\docker\\jenkins2\\jenkins_home\\workspace\\weblog-springboot</code>工作空间下，确认一下代码是否拉取成功：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061722932.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_4-配置-maven" tabindex="-1"><a class="header-anchor" href="#_4-配置-maven"><span>4. 配置 Maven</span></a></h2><p>拉取远程仓库 <code>master</code> 分支代码是第一步，这一步完成后，就要开始通过 <code>maven</code> 来打包了。首先，将本机中下载解压完成的 <code>maven</code> 文件夹，整个复制到 <code>E:\\docker\\jenkins2\\jenkins_home</code> 文件夹下：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061722668.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>复制完成后，还需要将 <code>/apache-maven-3.9.4/conf/settings.xml</code> 配置文件中的仓库地址修改一下，根据运行容器时，指定的路径挂载关系，配置如下：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">localRepository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/var/jenkins_home/apache-maven-3.9.4/repository</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/localRepository&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061722171.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>接下来，开始在 <code>Jenkins</code> 中配置 <code>maven</code> , 依次点击 <em>Manage Jenkins | Tools</em> ：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061723535.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>设置 <code>maven</code> 的 <code>settings.xml</code> 具体路径，如下图：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061722214.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>配置完成后，滑动到最后，如下图：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061722874.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><ul><li>①：自定义 <code>maven</code> 的名称；</li><li>②：填写 <code>maven</code> 根文件夹路径；</li></ul></blockquote><p>点击保存。</p><h2 id="_5-maven-打包" tabindex="-1"><a class="header-anchor" href="#_5-maven-打包"><span>5. Maven 打包</span></a></h2><p><code>maven</code> 配置完成后，继续配置 <code>weblog-springboot</code> 任务，在拉取代码后面的 <code>Build Steps</code> 选项中，点击<em>增加构建步骤</em>， 选择<em>调用顶层 Maven 目标</em> ：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061722953.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061722561.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>①：选择刚刚配置好的 <code>maven</code> 版本；</p><p>②：<strong>目标</strong>填写执行的打包命令，因为我们没有编写单元测试，添加跳过测试参数，命令如下：</p><div class="language-go line-numbers-mode" data-highlighter="shiki" data-ext="go" data-title="go" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">clean</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> package</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> -</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Dmaven</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">skip</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>③：针对哪个 <code>pom</code> 文件打包，定位到工作空间中父项目 <code>weblog-springboot/pom.xml</code>；</p><p>④：点击保存；</p></blockquote><p>这一步配置完成后，再次回到首页，执行构建任务，一步一个脚印，保证每个环节都是 <code>ok</code> 的，直到将整个流程测试完成。查看构建日志，若提示 <code>BUILD SUCCESS</code> 则打包也没有问题了：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061722228.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>也可以到 <code>jenkins</code> 工作空间的 <code>weblog-web/target</code> 目录下，确认一下 <code>jar</code> 包是否打成功了：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061722632.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_6-publish-over-ssh-插件安装" tabindex="-1"><a class="header-anchor" href="#_6-publish-over-ssh-插件安装"><span>6. Publish Over SSH 插件安装</span></a></h2><p><code>jar</code> 包打成功后，就要开始配置将 <code>jar</code> 包上传到云服务器，并重启服务了。为了完成这一步，我们需要先下载 <em>Publish Over SSH 插件</em> ，依次点击菜单<em>系统管理 | 插件管理</em> ：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061722851.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>点击左侧栏的 <em>Avaliable plugins</em> , 在搜索栏中搜索插件关键字：<em>publish over ssh</em> ，勾选上点击<em>安装</em>按钮：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061722520.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>勾选<em>安装完成后重启 Jenkins</em> , 等待安装完成，观察容器是否运行，若停止了则表示插件安装成功了，这个时候，手动重启一下 <code>jenkins</code> 容器：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061722303.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_7-配置服务器连接" tabindex="-1"><a class="header-anchor" href="#_7-配置服务器连接"><span>7. 配置服务器连接</span></a></h2><p>重启成功后，重新访问 <code>jenkins</code> 后台，点击 <em>系统管理 | 系统配置</em>，滑到下面，找到 Publish over SSH, 开始配置云服务器的连接信息：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061722014.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><ul><li>①：自定义服务器名称；</li><li>②：服务器 <code>IP</code> 地址；</li><li>③：登录用户名；</li><li>④：Remote Directory : 远程文件夹填写 <code>/</code>;</li><li>如下图，勾选 <code>Use password authentication</code> , 填写登录密码，如下图所示：</li></ul></blockquote><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061722218.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>滑动到下面，点击 <em>Test Configuration</em> 按钮，若提示 <code>Success</code> , 则表示服务器连接信息配置正确，接着点击<em>保存</em>：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061722429.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_8-上传-jar-包-重启服务" tabindex="-1"><a class="header-anchor" href="#_8-上传-jar-包-重启服务"><span>8. 上传 Jar 包，重启服务</span></a></h2><p>继续配置 <code>weblog-springboot</code> 任务，在 <code>maven</code> 打包步骤的后面，点击<em>增加构建步骤</em> ，选择 <em>Send files or execute commands over SSH</em> :</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061722801.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061722531.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><ul><li><p>①： 选择刚刚配置好的云服务器；</p></li><li><p>②：配置要上传的文件，这里是打包好的 <code>jar</code> 文件；</p></li><li><p>③：移除路径的前缀文件夹；</p></li><li><p>④：上传到云服务器中的哪个文件夹下；</p></li><li><p>⑤：上传完成后，想要执行的脚本，脚本如下；</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#!/bin/bash</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">APP_NAME</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">weblog-web-0.0.1-SNAPSHOT.jar</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">pid</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ps</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -ef</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> grep</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $APP_NAME</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> grep</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> grep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;{print $2}&#39;`</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> is_exist</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\tpid</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ps</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -ef</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> grep</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $APP_NAME</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> grep</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> grep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">awk</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;{print $2}&#39;`</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\tif</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [ </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-z</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;"> ${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">pid</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ]; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">then</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\t\tString</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;notExist&quot;</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\t\techo</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $String</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\telse</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">\t\tString</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;exist&quot;</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\t\techo</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $String</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">\tfi</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">is_exist</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [ </span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">str</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;exist&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ]; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">then</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\techo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot; 检测到服务已启动，pid 是 </span><span style="--shiki-light:#E45649;--shiki-dark:#98C379;">${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">pid</span><span style="--shiki-light:#E45649;--shiki-dark:#98C379;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\tkill</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -9</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> $pid</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\techo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot; 服务未启动 &quot;</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\techo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#E45649;--shiki-dark:#98C379;">${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">APP_NAME</span><span style="--shiki-light:#E45649;--shiki-dark:#98C379;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> is not running&quot;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fi</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">$(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">is_exist</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [ </span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">str</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;exist&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ]; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">then</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\techo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#E45649;--shiki-dark:#98C379;">${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">APP_NAME</span><span style="--shiki-light:#E45649;--shiki-dark:#98C379;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 已经启动了. pid=</span><span style="--shiki-light:#E45649;--shiki-dark:#98C379;">${</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">pid</span><span style="--shiki-light:#E45649;--shiki-dark:#98C379;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .&quot;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\tsource</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /etc/profile</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">\tnohup</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Xms300m</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Xmx300m</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /app/weblog/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">$APP_NAME</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --spring.profiles.active=prod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/dev/null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 2&gt;&amp;1 &amp;</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\techo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;服务已重新启动 ..&quot;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fi</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>⑥：点击保存；</p></li></ul></blockquote><p>再次执行 <code>weblog-springboot</code> 构建任务，注意，同时连接到云服务器中，通过 <code>tail -f</code> 命令来观察服务日志，看看任务构建完毕后，服务是否重启，是否有启动相关日志：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061722150.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>如上图，查看的构建日志，打包成功后，另外连接到了云服务中，并上传了一个文件，即 <code>jar</code> 包。</p></blockquote><p>同时，观察云服务器的服务日志，服务也被重启了，如下图所示：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061723119.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>再确认一下 <code>jar</code> 包的更新时间，如果是最新的时间，说明是刚刚上传的。</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061722629.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>至此，通过 <code>jenkins</code> 一键拉取远程仓库 <code>master</code> 分支的最新代码，本地构建打包并上传到云服务器，重启服务的配置工作就完成后，后续如果有新功能迭代，只需将代码合并到远程仓库的 <code>master</code> 分支，然后登录 <code>jenkins</code> 后台，点击运行一下构建任务即可完成发版工作，解放双手。</p>',71))])}]]),t=JSON.parse('{"path":"/CICD/Jenkins%20%E9%85%8D%E7%BD%AE%E5%90%8E%E7%AB%AF%E5%B7%A5%E7%A8%8B%EF%BC%8C%E8%87%AA%E5%8A%A8%E6%8B%89%E5%8F%96%E4%BB%A3%E7%A0%81%E3%80%81%E6%89%93%E5%8C%85%E4%B8%8E%E9%87%8D%E6%96%B0%E9%83%A8%E7%BD%B2.html","title":"Jenkins配置后端","lang":"zh-CN","frontmatter":{"title":"Jenkins配置后端","date":"2025-04-06T00:00:00.000Z","category":["DevOps"],"tag":["CICD","Jenkins"],"gitInclude":[]},"headers":[{"level":2,"title":"1. 创建 Job","slug":"_1-创建-job","link":"#_1-创建-job","children":[]},{"level":2,"title":"2. 配置 Git 源码管理","slug":"_2-配置-git-源码管理","link":"#_2-配置-git-源码管理","children":[]},{"level":2,"title":"3. 构建任务","slug":"_3-构建任务","link":"#_3-构建任务","children":[]},{"level":2,"title":"4. 配置 Maven","slug":"_4-配置-maven","link":"#_4-配置-maven","children":[]},{"level":2,"title":"5. Maven 打包","slug":"_5-maven-打包","link":"#_5-maven-打包","children":[]},{"level":2,"title":"6. Publish Over SSH 插件安装","slug":"_6-publish-over-ssh-插件安装","link":"#_6-publish-over-ssh-插件安装","children":[]},{"level":2,"title":"7. 配置服务器连接","slug":"_7-配置服务器连接","link":"#_7-配置服务器连接","children":[]},{"level":2,"title":"8. 上传 Jar 包，重启服务","slug":"_8-上传-jar-包-重启服务","link":"#_8-上传-jar-包-重启服务","children":[]}],"readingTime":{"minutes":6.27,"words":1882},"filePathRelative":"CICD/Jenkins 配置后端工程，自动拉取代码、打包与重新部署.md","localizedDate":"2025年4月6日","excerpt":"\\n<p>本小节中，将演示如何在 <code>Jenkins</code> 中配置一键部署 <code>weblog</code> 后端工程，流程中包括拉取最新的 <code>master</code> 分支代码、执行 <code>maven</code> 打包，并最终连接云服务器，上传 <code>jar</code> 包并重启 <code>Spring Boot</code> 服务。</p>\\n"}')}}]);