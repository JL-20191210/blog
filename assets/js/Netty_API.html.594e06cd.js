"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8029],{66262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,e]of s)a[i]=e;return a}},91442:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>n,data:()=>l});var e=a(20641);const h={},n=(0,a(66262).A)(h,[["render",function(i,s){return(0,e.uX)(),(0,e.CE)("div",null,s[0]||(s[0]=[(0,e.Fv)('<h1 id="api" tabindex="-1"><a class="header-anchor" href="#api"><span>API</span></a></h1><hr><h3 id="scheduleatfixedrate" tabindex="-1"><a class="header-anchor" href="#scheduleatfixedrate"><span><code>scheduleAtFixedRate</code></span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ScheduledFuture</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> scheduleAtFixedRate</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Runnable</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> var1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> long</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> var2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> long</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> var4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> var6)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数：</span></a></h4><ul><li><strong><code>var1</code></strong> (<code>Runnable</code>): 要调度执行的任务。此任务是一个实现了 <code>Runnable</code> 接口的对象，<code>run()</code> 方法将定期执行。</li><li><strong><code>var2</code></strong> (<code>long</code>): 第一次任务执行前的初始延迟。任务将在调用此方法后，等待 <code>var2</code> 参数指定的时间量后开始执行。单位由 <code>var6</code> 参数指定。</li><li><strong><code>var4</code></strong> (<code>long</code>): 任务执行之间的固定时间间隔。每次任务执行完毕后，系统将等待 <code>var4</code> 参数指定的时间量后再执行下一次任务。单位由 <code>var6</code> 参数指定。</li><li><strong><code>var6</code></strong> (<code>TimeUnit</code>): 时间单位，用于指定 <code>var2</code> 和 <code>var4</code> 的时间单位。可以是以下之一： <ul><li><code>TimeUnit.NANOSECONDS</code></li><li><code>TimeUnit.MILLISECONDS</code></li><li><code>TimeUnit.SECONDS</code></li><li><code>TimeUnit.MINUTES</code></li><li><code>TimeUnit.HOURS</code></li><li><code>TimeUnit.DAYS</code></li></ul></li></ul><h4 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值"><span>返回值：</span></a></h4><ul><li><strong><code>ScheduledFuture&lt;?&gt;</code></strong>: 返回一个 <code>ScheduledFuture</code> 对象，代表已调度的任务。<code>ScheduledFuture</code> 提供了对任务的控制，可以查询任务的状态、取消任务等。</li></ul><h4 id="异常" tabindex="-1"><a class="header-anchor" href="#异常"><span>异常：</span></a></h4><ul><li><strong><code>NullPointerException</code></strong>: 如果 <code>var1</code>（即任务）为 <code>null</code>，抛出此异常。</li><li><strong><code>RejectedExecutionException</code></strong>: 如果任务不能被执行（例如任务调度器已关闭或其他原因），抛出此异常。</li><li><strong><code>IllegalArgumentException</code></strong>: 如果 <code>var2</code> 或 <code>var4</code> 为负值，抛出此异常。</li></ul><h4 id="描述" tabindex="-1"><a class="header-anchor" href="#描述"><span>描述：</span></a></h4><p>该方法将任务 <code>var1</code> 在一个特定的延迟后执行，随后每隔固定的时间间隔执行一次。调度的时间间隔是根据 <strong>上次任务执行结束后的时间</strong> 来计算的，而不是上一次调度的起始时间。执行的任务间隔由 <code>var4</code> 参数指定。</p><p>此方法适用于需要按照固定时间间隔重复执行的任务。若任务的执行时间较长，并且希望任务间隔保持固定时间，可能会发生延迟。</p><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例：</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ScheduledExecutorService</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> scheduler </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Executors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">newScheduledThreadPool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">scheduler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">scheduleAtFixedRate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Task executed at: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">currentTimeMillis</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">SECONDS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此代码示例会在首次执行任务前等待 <strong>1 秒</strong>，然后每 <strong>3 秒</strong> 执行一次任务。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//1.创建事件循环组</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">NioEventLoopGroup</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> group </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> NioEventLoopGroup</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // io事件，普通任务，定时任务</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">group</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">scheduleAtFixedRate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(()</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">debug</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;yes&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">},</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">SECONDS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法会在 <strong>10 秒后</strong> 首次执行任务 <code>log.debug(&quot;yes&quot;)</code>，然后每 <strong>1 秒</strong> 执行一次。</p><h4 id="注意" tabindex="-1"><a class="header-anchor" href="#注意"><span>注意：</span></a></h4><ul><li><code>scheduleAtFixedRate</code> 方法调度的任务，通常执行时间是相对于上次任务结束后的时间间隔。如果任务的执行时间过长，下一次任务的开始时间将根据任务结束后的间隔进行调整。</li><li>如果任务的执行时间较长，可以考虑使用 <code>scheduleWithFixedDelay</code>，该方法会基于上次任务结束后的延迟时间来调度任务，而不是固定间隔。</li></ul>',20)]))}]]),l=JSON.parse('{"path":"/Netty/API.html","title":"API","lang":"zh-CN","frontmatter":{"gitInclude":[]},"headers":[{"level":3,"title":"scheduleAtFixedRate","slug":"scheduleatfixedrate","link":"#scheduleatfixedrate","children":[]}],"readingTime":{"minutes":2.16,"words":647},"filePathRelative":"Netty/API.md","excerpt":"\\n<hr>\\n<h3><code>scheduleAtFixedRate</code></h3>\\n<div class=\\"language-java line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"java\\" data-title=\\"java\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\">ScheduledFuture</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">&lt;</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">?</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">&gt;</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> scheduleAtFixedRate</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">(</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\">Runnable</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> var1</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">,</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> long</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> var2</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">,</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> long</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> var4</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">,</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\"> TimeUnit</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> var6)</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>"}')}}]);