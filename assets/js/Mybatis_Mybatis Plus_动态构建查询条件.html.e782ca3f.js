"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[33833],{66262:(e,o)=>{o.A=(e,o)=>{const d=e.__vccOpts||e;for(const[e,c]of o)d[e]=c;return d}},83233:(e,o,d)=>{d.r(o),d.d(o,{comp:()=>t,data:()=>r});var c=d(20641);const l={},t=(0,d(66262).A)(l,[["render",function(e,o){return(0,c.uX)(),(0,c.CE)("div",null,o[0]||(o[0]=[(0,c.Fv)('<h1 id="动态构建查询条件" tabindex="-1"><a class="header-anchor" href="#动态构建查询条件"><span>动态构建查询条件</span></a></h1><p><code>wrapper.eq(categoryId！=null，AttrGroupEntity::getCatelogId, categoryId);</code></p><p>这段代码是使用 <code>LambdaQueryWrapper</code> 的 <code>eq</code> 方法来构建一个查询条件，主要用于在查询时根据 <code>categoryId</code> 的值来设置条件。以下是对这段代码的总结：</p><ol><li><p><strong>代码解释</strong>：</p><ul><li><code>wrapper</code> 是一个 <code>LambdaQueryWrapper</code> 对象，用于构建查询条件。</li><li><code>eq</code> 方法用于设置等于条件。</li><li><code>AttrGroupEntity::getCatelogId</code> 是一个方法引用，表示要查询的字段为 <code>catelogId</code>。</li><li><code>categoryId != null</code> 是一个条件判断，用于确定 <code>categoryId</code> 是否为 <code>null</code>。</li><li><code>categoryId</code> 是一个变量，用于存储某个值。</li></ul></li><li><p><strong>逻辑</strong>：</p><ul><li>如果 <code>categoryId</code> 不为 <code>null</code>，则会设置查询条件为 <code>catelogId = categoryId</code>。</li><li>如果 <code>categoryId</code> 为 <code>null</code>，则不会添加该查询条件。</li></ul></li><li><p><strong>用法总结</strong>：</p><ul><li>这种写法利用了条件判断来动态设置查询条件，根据 <code>categoryId</code> 的值决定是否添加特定的查询条件，实现了灵活性和可重用性。</li><li>通过这种方式，可以根据不同的情况动态构建查询条件，避免了重复的代码和提高了代码的可读性。</li></ul></li></ol>',4)]))}]]),r=JSON.parse('{"path":"/Mybatis/Mybatis%20Plus/%E5%8A%A8%E6%80%81%E6%9E%84%E5%BB%BA%E6%9F%A5%E8%AF%A2%E6%9D%A1%E4%BB%B6.html","title":"动态构建查询条件","lang":"zh-CN","frontmatter":{"icon":"mybatis plus","date":"2024-11-26T00:00:00.000Z","category":["Mybatis"],"tag":["查询"],"gitInclude":[]},"headers":[],"readingTime":{"minutes":0.96,"words":287},"filePathRelative":"Mybatis/Mybatis Plus/动态构建查询条件.md","localizedDate":"2024年11月26日","excerpt":"\\n<p><code>wrapper.eq(categoryId！=null，AttrGroupEntity::getCatelogId, categoryId);</code></p>\\n<p>这段代码是使用 <code>LambdaQueryWrapper</code> 的 <code>eq</code> 方法来构建一个查询条件，主要用于在查询时根据 <code>categoryId</code> 的值来设置条件。以下是对这段代码的总结：</p>\\n<ol>\\n<li>\\n<p><strong>代码解释</strong>：</p>\\n<ul>\\n<li><code>wrapper</code> 是一个 <code>LambdaQueryWrapper</code> 对象，用于构建查询条件。</li>\\n<li><code>eq</code> 方法用于设置等于条件。</li>\\n<li><code>AttrGroupEntity::getCatelogId</code> 是一个方法引用，表示要查询的字段为 <code>catelogId</code>。</li>\\n<li><code>categoryId != null</code> 是一个条件判断，用于确定 <code>categoryId</code> 是否为 <code>null</code>。</li>\\n<li><code>categoryId</code> 是一个变量，用于存储某个值。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>逻辑</strong>：</p>\\n<ul>\\n<li>如果 <code>categoryId</code> 不为 <code>null</code>，则会设置查询条件为 <code>catelogId = categoryId</code>。</li>\\n<li>如果 <code>categoryId</code> 为 <code>null</code>，则不会添加该查询条件。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>用法总结</strong>：</p>\\n<ul>\\n<li>这种写法利用了条件判断来动态设置查询条件，根据 <code>categoryId</code> 的值决定是否添加特定的查询条件，实现了灵活性和可重用性。</li>\\n<li>通过这种方式，可以根据不同的情况动态构建查询条件，避免了重复的代码和提高了代码的可读性。</li>\\n</ul>\\n</li>\\n</ol>"}')}}]);