"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[20932],{66262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,e]of s)a[i]=e;return a}},22185:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>l,data:()=>h});var e=a(20641);const n={},l=(0,a(66262).A)(n,[["render",function(i,s){return(0,e.uX)(),(0,e.CE)("div",null,s[0]||(s[0]=[(0,e.Fv)('<h1 id="📝-sql-中-from-a-b-与-join-的区别详解" tabindex="-1"><a class="header-anchor" href="#📝-sql-中-from-a-b-与-join-的区别详解"><span>📝 SQL 中 <code>FROM A, B</code> 与 <code>JOIN</code> 的区别详解</span></a></h1><p>在日常开发或面试中，经常会被问到： <strong>「SQL 里 <code>FROM A, B</code> 和 <code>JOIN</code> 有什么区别？」</strong> 很多人以为它们是等价的，其实并不完全正确。本文将深入解析这两种写法的区别，并扩展一些常见的陷阱和最佳实践。</p><hr><h2 id="_1️⃣-基本写法对比" tabindex="-1"><a class="header-anchor" href="#_1️⃣-基本写法对比"><span>1️⃣ 基本写法对比</span></a></h2><h3 id="🔹-传统逗号分隔" tabindex="-1"><a class="header-anchor" href="#🔹-传统逗号分隔"><span>🔹 传统逗号分隔</span></a></h3><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> *</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> A, B</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> B</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>👉 这是 SQL-92 之前的写法，本质上是 <strong>笛卡尔积 + 过滤条件</strong>。 先做 <code>A × B</code>，然后再用 <code>WHERE</code> 进行筛选。</p><hr><h3 id="🔹-显式-join" tabindex="-1"><a class="header-anchor" href="#🔹-显式-join"><span>🔹 显式 <code>JOIN</code></span></a></h3><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> *</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> A</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">INNER JOIN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> B </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ON</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> B</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>👉 这是 SQL-92 及之后推荐的写法，逻辑上直接告诉数据库： “我想把 A 和 B 按 <code>id</code> 连接起来”。</p><hr><h2 id="_2️⃣-结果等价-但语义不同" tabindex="-1"><a class="header-anchor" href="#_2️⃣-结果等价-但语义不同"><span>2️⃣ 结果等价，但语义不同</span></a></h2><p>从结果来看，<code>FROM A, B WHERE ...</code> 和 <code>INNER JOIN ... ON ...</code> 在功能上是 <strong>等价的</strong>。 但是，<code>JOIN</code> 写法的语义更清晰：</p><ul><li><strong>旧写法（逗号）</strong>：先做笛卡尔积，再用 <code>WHERE</code> 过滤。</li><li><strong>新写法（JOIN）</strong>：直接告诉数据库怎么连接，<strong>避免误解</strong>。</li></ul><hr><h2 id="_3️⃣-常见问题与陷阱" tabindex="-1"><a class="header-anchor" href="#_3️⃣-常见问题与陷阱"><span>3️⃣ 常见问题与陷阱</span></a></h2><h3 id="⚠️-1-忘记写-where" tabindex="-1"><a class="header-anchor" href="#⚠️-1-忘记写-where"><span>⚠️ 1. 忘记写 <code>WHERE</code></span></a></h3><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> *</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> A, B;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>👉 这会生成笛卡尔积（Cross Join），结果集大小 = <code>|A| × |B|</code>，非常危险。</p><hr><h3 id="⚠️-2-join-不写-on" tabindex="-1"><a class="header-anchor" href="#⚠️-2-join-不写-on"><span>⚠️ 2. <code>JOIN</code> 不写 <code>ON</code></span></a></h3><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> *</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> A </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">JOIN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> B;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>👉 在 MySQL / PostgreSQL 中会报错，除非显式使用 <code>CROSS JOIN</code>：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> *</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> A </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CROSS JOIN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> B;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这才等价于 <code>FROM A, B</code>。</p><hr><h3 id="⚠️-3-left-join-right-join-必须带-on" tabindex="-1"><a class="header-anchor" href="#⚠️-3-left-join-right-join-必须带-on"><span>⚠️ 3. LEFT JOIN/RIGHT JOIN 必须带 <code>ON</code></span></a></h3><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> *</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> A </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">LEFT JOIN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> B;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>👉 错误！必须写 <code>ON</code> 指定条件：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> *</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> A </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">LEFT JOIN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> B </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ON</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> B</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_4️⃣-性能与可读性对比" tabindex="-1"><a class="header-anchor" href="#_4️⃣-性能与可读性对比"><span>4️⃣ 性能与可读性对比</span></a></h2><ul><li><strong>性能</strong>：现代数据库优化器会自动转换，两者执行计划通常相同。</li><li><strong>可读性</strong>：<code>JOIN ... ON</code> 语义更清晰，便于团队协作与维护。</li></ul><p>💡 建议在项目中 <strong>统一使用显式 JOIN</strong>，特别是涉及多个表时。</p><hr><h2 id="_5️⃣-拓展知识-几种-join-的区别" tabindex="-1"><a class="header-anchor" href="#_5️⃣-拓展知识-几种-join-的区别"><span>5️⃣ 拓展知识：几种 JOIN 的区别</span></a></h2><table><thead><tr><th>写法</th><th>含义</th><th>是否需要 <code>ON</code></th></tr></thead><tbody><tr><td><code>INNER JOIN</code></td><td>取两表交集</td><td>✅ 必须</td></tr><tr><td><code>LEFT JOIN</code></td><td>取左表全部，右表匹配的部分</td><td>✅ 必须</td></tr><tr><td><code>RIGHT JOIN</code></td><td>取右表全部，左表匹配的部分</td><td>✅ 必须</td></tr><tr><td><code>FULL JOIN</code></td><td>左右表的并集</td><td>✅ 必须</td></tr><tr><td><code>CROSS JOIN</code></td><td>笛卡尔积</td><td>❌ 不需要</td></tr></tbody></table><hr><h2 id="_6️⃣-实际开发建议" tabindex="-1"><a class="header-anchor" href="#_6️⃣-实际开发建议"><span>6️⃣ 实际开发建议</span></a></h2><ol><li><strong>少用逗号分隔</strong>，除非是很简单的临时查询。</li><li><strong>统一使用 JOIN ... ON</strong>，代码语义清晰，维护成本更低。</li><li><strong>注意 JOIN 顺序</strong>，有时候会影响优化器的执行计划。</li><li><strong>善用 EXPLAIN</strong>，查看 SQL 执行计划，避免笛卡尔积带来的性能问题。</li></ol><hr><h2 id="🎯-总结" tabindex="-1"><a class="header-anchor" href="#🎯-总结"><span>🎯 总结</span></a></h2><ul><li><code>FROM A, B WHERE ...</code> 是旧写法，等价于 <strong>INNER JOIN</strong>。</li><li><code>JOIN ... ON ...</code> 是新写法，语义清晰，推荐使用。</li><li>不写 <code>ON</code> 的 <code>JOIN</code> 会报错，除非是 <code>CROSS JOIN</code>。</li><li>实际项目中，<strong>建议统一使用显式 JOIN</strong>，避免歧义和性能问题。</li></ul><hr><p>👉 面试回答示例：</p><blockquote><p>&quot;<code>FROM A, B</code> 属于旧写法，本质是笛卡尔积加条件过滤，而 <code>JOIN ... ON</code> 是 SQL-92 引入的标准写法，语义更清晰，也能避免遗漏条件导致的笛卡尔积。现在的数据库执行计划基本一样，但在团队开发中推荐使用显式 JOIN。&quot;</p></blockquote>',47)]))}]]),h=JSON.parse('{"path":"/Database/MySQL/%E9%9A%8F%E7%AC%94/FROM%20A_%20B%20%E4%B8%8E%20JOIN%20%E7%9A%84%E5%8C%BA%E5%88%AB.html","title":"📝 SQL 中 FROM A, B 与 JOIN 的区别详解","lang":"zh-CN","frontmatter":{"gitInclude":[]},"headers":[{"level":2,"title":"1️⃣ 基本写法对比","slug":"_1️⃣-基本写法对比","link":"#_1️⃣-基本写法对比","children":[{"level":3,"title":"🔹 传统逗号分隔","slug":"🔹-传统逗号分隔","link":"#🔹-传统逗号分隔","children":[]},{"level":3,"title":"🔹 显式 JOIN","slug":"🔹-显式-join","link":"#🔹-显式-join","children":[]}]},{"level":2,"title":"2️⃣ 结果等价，但语义不同","slug":"_2️⃣-结果等价-但语义不同","link":"#_2️⃣-结果等价-但语义不同","children":[]},{"level":2,"title":"3️⃣ 常见问题与陷阱","slug":"_3️⃣-常见问题与陷阱","link":"#_3️⃣-常见问题与陷阱","children":[{"level":3,"title":"⚠️ 1. 忘记写 WHERE","slug":"⚠️-1-忘记写-where","link":"#⚠️-1-忘记写-where","children":[]},{"level":3,"title":"⚠️ 2. JOIN 不写 ON","slug":"⚠️-2-join-不写-on","link":"#⚠️-2-join-不写-on","children":[]},{"level":3,"title":"⚠️ 3. LEFT JOIN/RIGHT JOIN 必须带 ON","slug":"⚠️-3-left-join-right-join-必须带-on","link":"#⚠️-3-left-join-right-join-必须带-on","children":[]}]},{"level":2,"title":"4️⃣ 性能与可读性对比","slug":"_4️⃣-性能与可读性对比","link":"#_4️⃣-性能与可读性对比","children":[]},{"level":2,"title":"5️⃣ 拓展知识：几种 JOIN 的区别","slug":"_5️⃣-拓展知识-几种-join-的区别","link":"#_5️⃣-拓展知识-几种-join-的区别","children":[]},{"level":2,"title":"6️⃣ 实际开发建议","slug":"_6️⃣-实际开发建议","link":"#_6️⃣-实际开发建议","children":[]},{"level":2,"title":"🎯 总结","slug":"🎯-总结","link":"#🎯-总结","children":[]}],"readingTime":{"minutes":2.63,"words":789},"filePathRelative":"Database/MySQL/随笔/FROM A, B 与 JOIN 的区别.md","excerpt":"\\n<p>在日常开发或面试中，经常会被问到：\\n<strong>「SQL 里 <code>FROM A, B</code> 和 <code>JOIN</code> 有什么区别？」</strong>\\n很多人以为它们是等价的，其实并不完全正确。本文将深入解析这两种写法的区别，并扩展一些常见的陷阱和最佳实践。</p>\\n<hr>\\n<h2>1️⃣ 基本写法对比</h2>\\n<h3>🔹 传统逗号分隔</h3>\\n<div class=\\"language-sql line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"sql\\" data-title=\\"sql\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">SELECT</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> *</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">FROM</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> A, B</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">WHERE</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> A</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">id</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> B</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">id</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}')}}]);