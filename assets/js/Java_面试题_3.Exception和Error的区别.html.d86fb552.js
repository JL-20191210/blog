"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8264],{6262:(o,e)=>{e.A=(o,e)=>{const t=o.__vccOpts||o;for(const[o,r]of e)t[o]=r;return t}},768:(o,e,t)=>{t.r(e),t.d(e,{comp:()=>c,data:()=>p});var r=t(641);const n={},c=(0,t(6262).A)(n,[["render",function(o,e){return(0,r.uX)(),(0,r.CE)("div",null,e[0]||(e[0]=[(0,r.Fv)('<h1 id="_3-java-中-exception-和-error-有什么区别" tabindex="-1"><a class="header-anchor" href="#_3-java-中-exception-和-error-有什么区别"><span>3.Java 中 Exception 和 Error 有什么区别？</span></a></h1><blockquote><p>[!tip]</p><p><strong>定义</strong></p></blockquote><blockquote><p>都是<code>Throwable</code>的子类。（在 Java 代码中只有继承了 Throwable 类的实例才可以被 throw 或者被 catch）</p><ul><li><strong>Exception</strong>：表示程序中可以被捕获和处理的异常情况。通常由程序错误、外部资源问题等引发。</li><li><strong>Error</strong>：表示严重的问题，通常是 JVM 或硬件层面的错误，不应该由应用程序进行捕获或处理。</li></ul></blockquote><blockquote><p>[!tip]</p><p>举例</p></blockquote><blockquote><p>Exception：是程序中可以处理的异常情况，表示程序逻辑 或外部环境中的问题，可以通过代码进行恢复或处理。 常见子类有： IOException 、 SQLException 、 NullPointerException 、 IndexOutOfBoundsException 等。 Exception 又分为 Checked Exception（编译期异常）和 Unchecked Exception（运行时异常）。 Checked Exception：在编译时必须显式处理（如使用 try-catch 块或通过 throws 声明抛出）。如 IOException 。 Unchecked Exception：运行时异常，不需要显式捕获。 常见的如 NullPointerException 、 IllegalArgumentException 等，继承自 RuntimeException 。 2）Error：表示严重的错误，通常是 JVM 层次内系统级的、无 法预料的错误，程序无法通过代码进行处理或恢复。例如内存 耗尽（ OutOfMemoryError ）、栈溢出 （ StackOverflowError ）。 Error 不应该被程序捕获或处理，因为一般出现这种错误时程 序无法继续运行。</p></blockquote>',5)]))}]]),p=JSON.parse('{"path":"/Java/%E9%9D%A2%E8%AF%95%E9%A2%98/3.Exception%E5%92%8CError%E7%9A%84%E5%8C%BA%E5%88%AB.html","title":"3.Java 中 Exception 和 Error 有什么区别？","lang":"zh-CN","frontmatter":{"gitInclude":[]},"headers":[],"readingTime":{"minutes":1.08,"words":324},"filePathRelative":"Java/面试题/3.Exception和Error的区别.md","excerpt":"\\n<blockquote>\\n<p>[!tip]</p>\\n<p><strong>定义</strong></p>\\n</blockquote>\\n<blockquote>\\n<p>都是<code>Throwable</code>的子类。（在 Java 代码中只有继承了 Throwable 类的实例才可以被 throw 或者被 catch）</p>\\n<ul>\\n<li><strong>Exception</strong>：表示程序中可以被捕获和处理的异常情况。通常由程序错误、外部资源问题等引发。</li>\\n<li><strong>Error</strong>：表示严重的问题，通常是 JVM 或硬件层面的错误，不应该由应用程序进行捕获或处理。</li>\\n</ul>\\n</blockquote>"}')}}]);