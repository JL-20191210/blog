"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[13494],{66262:(e,a)=>{a.A=(e,a)=>{const r=e.__vccOpts||e;for(const[e,n]of a)r[e]=n;return r}},82645:(e,a,r)=>{r.r(a),r.d(a,{comp:()=>t,data:()=>i});var n=r(20641);const d={},t=(0,r(66262).A)(d,[["render",function(e,a){const r=(0,n.g2)("Badge");return(0,n.uX)(),(0,n.CE)("div",null,[a[0]||(a[0]=(0,n.Lk)("h1",{id:"_1-什么情况下会出现读取记录的事务id比创建readview的事务id大",tabindex:"-1"},[(0,n.Lk)("a",{class:"header-anchor",href:"#_1-什么情况下会出现读取记录的事务id比创建readview的事务id大"},[(0,n.Lk)("span",null,"1.什么情况下会出现读取记录的事务id比创建readview的事务id大")])],-1)),(0,n.bF)(r,{text:"了解即可",type:"warning"}),a[1]||(a[1]=(0,n.eW)()),a[2]||(a[2]=(0,n.Lk)("p",null,[(0,n.eW)("在使用 "),(0,n.Lk)("strong",null,"MVCC（多版本并发控制）"),(0,n.eW)(" 和 "),(0,n.Lk)("strong",null,"Read View（读视图）"),(0,n.eW)(" 的数据库系统中，通常情况下，读取记录时事务 ID 应该小于或等于创建 "),(0,n.Lk)("strong",null,"Read View"),(0,n.eW)(" 时的事务 ID。但在某些特殊情况下，确实可能出现读取记录的事务 ID 比创建 "),(0,n.Lk)("strong",null,"Read View"),(0,n.eW)(" 的事务 ID 大的情况，以下是几种可能的原因：")],-1)),(0,n.Q3)(" more "),a[3]||(a[3]=(0,n.Fv)('<h3 id="_1-提交的事务的-id-大于当前事务-id" tabindex="-1"><a class="header-anchor" href="#_1-提交的事务的-id-大于当前事务-id"><span>1. <strong>提交的事务的 ID 大于当前事务 ID</strong></span></a></h3><p>如果一个事务已经提交，且它的事务 ID 大于当前创建 <strong>Read View</strong> 时的事务 ID，那么读取数据时，可能会看到这些已提交事务的 ID（因为它们已经提交并且对后续事务可见）。尽管当前事务的 ID 较小，但由于提交的事务数据对后续事务可见，它会出现比当前事务 ID 大的情况。</p><ul><li><strong>场景</strong>：一个事务执行了 <code>UPDATE</code> 操作并提交，而其他事务读取时可能会看到该事务的提交数据，即便该事务的 ID 比当前事务的 ID 大。</li></ul><h3 id="_2-跨事务读取-dirty-read" tabindex="-1"><a class="header-anchor" href="#_2-跨事务读取-dirty-read"><span>2. <strong>跨事务读取（Dirty Read）</strong></span></a></h3><p>在某些数据库系统中，可能开启了允许脏读的行为，或者隔离级别未严格遵守，导致事务读取了其他事务的未提交数据。虽然严格的 <strong>RC（Read Committed）</strong> 或更高隔离级别会避免脏读，但如果隔离级别设置较低（如 <strong>Read Uncommitted</strong>），则可能发生脏读，导致当前事务读取到一个未提交事务的内容，即事务 ID 可能比当前事务的 ID 大。</p><ul><li><strong>场景</strong>：在 <strong>Read Uncommitted</strong> 隔离级别下，事务 A 读取事务 B 未提交的更新数据，而事务 B 的事务 ID 比事务 A 的事务 ID 大。</li></ul><h3 id="_3-事务-id-回绕-wraparound" tabindex="-1"><a class="header-anchor" href="#_3-事务-id-回绕-wraparound"><span>3. <strong>事务 ID 回绕（Wraparound）</strong></span></a></h3><p>如果系统中的事务 ID 使用的是有限的数字范围（如整数类型），在事务 ID 达到上限时，可能会发生回绕（wraparound）。此时，较新的事务 ID 可能会比已经存在的事务 ID 小。虽然这种情况较为罕见，但它也可能导致事务 ID 比当前事务 ID 大的现象。</p><ul><li><strong>场景</strong>：事务 ID 超过最大值后回绕，导致较新的事务 ID 反而比旧的事务 ID 更小。</li></ul><h3 id="_4-快照读视图的行为" tabindex="-1"><a class="header-anchor" href="#_4-快照读视图的行为"><span>4. <strong>快照读视图的行为</strong></span></a></h3><p>在某些数据库的实现中，当一个事务正在创建 <strong>Read View</strong> 时，它会看到在其开始执行前已经提交的事务。因此，如果一个事务 ID 较大，而该事务提交时间晚于当前事务的创建时间，读取的记录的事务 ID 可能会大于当前事务创建 <strong>Read View</strong> 时的事务 ID。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>虽然在大多数情况下，读取记录的事务 ID 应该小于或等于创建 <strong>Read View</strong> 时的事务 ID，但在特定的隔离级别或特定的数据库实现中，可能会出现读取的记录的事务 ID 比当前事务 ID 大的情况。这通常与事务的提交时机、隔离级别、事务 ID 的分配方式以及读写时的数据一致性控制等因素有关。</p>',13))])}]]),i=JSON.parse('{"path":"/Database/MySQL/1.%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8B%E4%BC%9A%E5%87%BA%E7%8E%B0%E8%AF%BB%E5%8F%96%E8%AE%B0%E5%BD%95%E7%9A%84%E4%BA%8B%E5%8A%A1id%E6%AF%94%E5%88%9B%E5%BB%BAreadview%E7%9A%84%E4%BA%8B%E5%8A%A1id%E5%A4%A7.html","title":"1.什么情况下会出现读取记录的事务id比创建readview的事务id大","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-03-11T00:00:00.000Z","category":["MySQL"],"tag":["事务","了解"],"gitInclude":[]},"headers":[{"level":3,"title":"1. 提交的事务的 ID 大于当前事务 ID","slug":"_1-提交的事务的-id-大于当前事务-id","link":"#_1-提交的事务的-id-大于当前事务-id","children":[]},{"level":3,"title":"2. 跨事务读取（Dirty Read）","slug":"_2-跨事务读取-dirty-read","link":"#_2-跨事务读取-dirty-read","children":[]},{"level":3,"title":"3. 事务 ID 回绕（Wraparound）","slug":"_3-事务-id-回绕-wraparound","link":"#_3-事务-id-回绕-wraparound","children":[]},{"level":3,"title":"4. 快照读视图的行为","slug":"_4-快照读视图的行为","link":"#_4-快照读视图的行为","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"readingTime":{"minutes":2.85,"words":854},"filePathRelative":"Database/MySQL/1.什么情况下会出现读取记录的事务id比创建readview的事务id大.md","localizedDate":"2025年3月11日","excerpt":"\\n"}')}}]);