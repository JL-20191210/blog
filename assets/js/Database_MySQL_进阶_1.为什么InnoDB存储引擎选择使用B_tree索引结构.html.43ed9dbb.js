"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[37179],{66262:(e,n)=>{n.A=(e,n)=>{const t=e.__vccOpts||e;for(const[e,r]of n)t[e]=r;return t}},53527:(e,n,t)=>{t.r(n),t.d(n,{comp:()=>B,data:()=>l});var r=t(20641);const a={},B=(0,t(66262).A)(a,[["render",function(e,n){return(0,r.uX)(),(0,r.CE)("div",null,n[0]||(n[0]=[(0,r.Lk)("h3",{id:"",tabindex:"-1"},[(0,r.Lk)("a",{class:"header-anchor",href:"#"},[(0,r.Lk)("span")])],-1),(0,r.Lk)("h1",{id:"_1-为什么innodb存储引擎选择使用b-tree索引结构",tabindex:"-1"},[(0,r.Lk)("a",{class:"header-anchor",href:"#_1-为什么innodb存储引擎选择使用b-tree索引结构"},[(0,r.Lk)("span",null,"1.为什么InnoDB存储引擎选择使用B+tree索引结构？")])],-1),(0,r.Lk)("blockquote",null,[(0,r.Lk)("p",null,"相对于二叉树，层级更少，搜索效率高； 对于B-tree,无论是叶子节点还是非叶子节点，都会保存数据，这样导致一 页中存储的键值减少，指针跟着减少，要同样保存大量数据，只能增加树的 高度，导致性能降低； 相对Hash索引，B+tree支持范围匹配及排序操作；")],-1)]))}]]),l=JSON.parse('{"path":"/Database/MySQL/%E8%BF%9B%E9%98%B6/1.%E4%B8%BA%E4%BB%80%E4%B9%88InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E9%80%89%E6%8B%A9%E4%BD%BF%E7%94%A8B_tree%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%84.html","title":"1.为什么InnoDB存储引擎选择使用B+tree索引结构？","lang":"zh-CN","frontmatter":{"gitInclude":[]},"headers":[{"level":3,"title":"","slug":"","link":"#","children":[]}],"readingTime":{"minutes":0.4,"words":119},"filePathRelative":"Database/MySQL/进阶/1.为什么InnoDB存储引擎选择使用B+tree索引结构.md","excerpt":"<h3></h3>\\n<h1>1.为什么InnoDB存储引擎选择使用B+tree索引结构？</h1>\\n<blockquote>\\n<p>相对于二叉树，层级更少，搜索效率高；\\n对于B-tree,无论是叶子节点还是非叶子节点，都会保存数据，这样导致一\\n页中存储的键值减少，指针跟着减少，要同样保存大量数据，只能增加树的\\n高度，导致性能降低；\\n相对Hash索引，B+tree支持范围匹配及排序操作；</p>\\n</blockquote>\\n"}')}}]);