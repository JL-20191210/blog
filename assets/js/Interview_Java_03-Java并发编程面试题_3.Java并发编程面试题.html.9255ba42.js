"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[49271],{66262:(a,e)=>{e.A=(a,e)=>{const n=a.__vccOpts||a;for(const[a,r]of e)n[a]=r;return n}},77794:(a,e,n)=>{n.r(e),n.d(e,{comp:()=>s,data:()=>i});var r=n(20641);const t=n.p+"assets/img/1750775848681-79ce019d-ebe9-40cb-8a17-0c71082a7266.f7f80129.webp",l={},s=(0,n(66262).A)(l,[["render",function(a,e){return(0,r.uX)(),(0,r.CE)("div",null,e[0]||(e[0]=[(0,r.Fv)('<h1 id="java并发编程面试题" tabindex="-1"><a class="header-anchor" href="#java并发编程面试题"><span>Java并发编程面试题</span></a></h1><h2 id="多线程" tabindex="-1"><a class="header-anchor" href="#多线程"><span>多线程</span></a></h2><h3 id="_1-java里面的线程和操作系统的线程一样吗" tabindex="-1"><a class="header-anchor" href="#_1-java里面的线程和操作系统的线程一样吗"><span>1.java里面的线程和操作系统的线程一样吗？</span></a></h3><p>Java 底层会调用 pthread_create 来创建线程，所以本质上 java 程序创建的线程，就是和操作系统线程是一样的，是 1 对 1 的线程模型。 <img src="'+t+'" alt="img" loading="lazy"> 2.使用多线程要注意哪些问题？</p><p>要保证多线程的程序是安全，不要出现数据竞争造成的数据混乱的问题。Java的线程安全在三个方面体现：</p><ul><li><strong>原子性</strong>：提供互斥访问，同一时刻只能有一个线程对数据进行操作，在Java中使用了atomic包（这个包提供了一些支持原子操作的类，这些类可以在多线程环境下保证操作的原子性）和synchronized关键字来确保原子性；</li><li><strong>可见性</strong>：一个线程对主内存的修改可以及时地被其他线程看到，在Java中使用了synchronized和volatile这两个关键字确保可见性；</li><li><strong>有序性</strong>：一个线程观察其他线程中的指令执行顺序，由于指令重排序，该观察结果一般杂乱无序，在Java中使用了happens-before原则来确保有序性。</li></ul>',6)]))}]]),i=JSON.parse('{"path":"/Interview/Java/03-Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%9D%A2%E8%AF%95%E9%A2%98/3.Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E9%9D%A2%E8%AF%95%E9%A2%98.html","title":"Java并发编程面试题","lang":"zh-CN","frontmatter":{"gitInclude":[]},"headers":[{"level":2,"title":"多线程","slug":"多线程","link":"#多线程","children":[{"level":3,"title":"1.java里面的线程和操作系统的线程一样吗？","slug":"_1-java里面的线程和操作系统的线程一样吗","link":"#_1-java里面的线程和操作系统的线程一样吗","children":[]}]}],"readingTime":{"minutes":1.07,"words":322},"filePathRelative":"Interview/Java/03-Java并发编程面试题/3.Java并发编程面试题.md","excerpt":"\\n<h2>多线程</h2>\\n<h3>1.java里面的线程和操作系统的线程一样吗？</h3>\\n<p>Java 底层会调用 pthread_create 来创建线程，所以本质上 java 程序创建的线程，就是和操作系统线程是一样的，是 1 对 1 的线程模型。\\n\\n2.使用多线程要注意哪些问题？</p>\\n<p>要保证多线程的程序是安全，不要出现数据竞争造成的数据混乱的问题。Java的线程安全在三个方面体现：</p>\\n<ul>\\n<li><strong>原子性</strong>：提供互斥访问，同一时刻只能有一个线程对数据进行操作，在Java中使用了atomic包（这个包提供了一些支持原子操作的类，这些类可以在多线程环境下保证操作的原子性）和synchronized关键字来确保原子性；</li>\\n<li><strong>可见性</strong>：一个线程对主内存的修改可以及时地被其他线程看到，在Java中使用了synchronized和volatile这两个关键字确保可见性；</li>\\n<li><strong>有序性</strong>：一个线程观察其他线程中的指令执行顺序，由于指令重排序，该观察结果一般杂乱无序，在Java中使用了happens-before原则来确保有序性。</li>\\n</ul>"}')}}]);