"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[79716],{66262:(s,i)=>{i.A=(s,i)=>{const a=s.__vccOpts||s;for(const[s,n]of i)a[s]=n;return a}},10999:(s,i,a)=>{a.r(i),a.d(i,{comp:()=>e,data:()=>l});var n=a(20641);const t={},e=(0,a(66262).A)(t,[["render",function(s,i){return(0,n.uX)(),(0,n.CE)("div",null,i[0]||(i[0]=[(0,n.Fv)('<h1 id="initbinder" tabindex="-1"><a class="header-anchor" href="#initbinder"><span>@InitBinder</span></a></h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><blockquote><p>在开发中，后端通常使用专用模型对象（<code>FindStudentInfoReq.java</code>）来接收web请求参数。该对象仅声明输入所需的值，可以防止恶意客户端提供额外的值。</p><p>另一种方法是构造函数绑定</p><p><code>@InitBinder</code> 在 Spring 开发中是一个有用但<strong>相对较少使用</strong>的功能。这主要是因为现代 Web 开发中，很多绑定和数据处理的需求已经被更高级和专用的机制（如 <code>@RequestBody</code>、校验框架、全局拦截器等）所替代。</p></blockquote><p>💁‍♂️<code>模型对象</code>及其<code>嵌套对象图</code>有时也称为<em>命令对象</em>、<em>表单支持对象</em>或<em>POJO</em>（普通旧 Java 对象）。</p><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><blockquote><p><code>数据绑定</code>用于将 Web 请求绑定到模型对象</p><p>在<code>@Controller</code> 或 <code>@ControllerAdvice</code> 类可以用 <code>@InitBinder</code> 方法来初始化 <code>WebDataBinder</code> 实例</p></blockquote><h2 id="作用" tabindex="-1"><a class="header-anchor" href="#作用"><span>作用</span></a></h2><ul><li>请求参数绑定到模型对象</li><li>请求值从字符串转换为对象属性类型</li><li>模型对象属性类型格式化为字符串</li><li>拦截请求参数</li></ul><h2 id="对比-requestbody" tabindex="-1"><a class="header-anchor" href="#对比-requestbody"><span>对比@RequestBody</span></a></h2><p><code>@RequestBody</code> 和 <code>@InitBinder</code> 是 Spring MVC 中的两个完全不同的概念，分别用于处理 HTTP 请求数据的不同场景。以下是它们的详细对比和区别：</p><hr><h3 id="_1-概念和作用" tabindex="-1"><a class="header-anchor" href="#_1-概念和作用"><span><strong>1. 概念和作用</strong></span></a></h3><h4 id="requestbody" tabindex="-1"><a class="header-anchor" href="#requestbody"><span><strong><code>@RequestBody</code></strong></span></a></h4><ul><li><strong>概念</strong>：将 HTTP 请求体（通常是 JSON、XML 或纯文本）直接解析为 Java 对象。</li><li><strong>作用</strong>：基于 <strong>HttpMessageConverter</strong>（如 Jackson），从请求体中提取数据并转换为目标对象。</li><li><strong>常见场景</strong>：处理 RESTful API 的请求数据。</li><li><strong>示例</strong>：<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">PostMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/user&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> createUser</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RequestBody</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> User</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> user) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Received user: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>请求数据：JSON 格式<div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;John&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;age&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">25</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>Spring 使用 Jackson（默认的 <code>HttpMessageConverter</code>）将 JSON 转换为 <code>User</code> 对象。</li></ul></li></ul><hr><h4 id="initbinder-1" tabindex="-1"><a class="header-anchor" href="#initbinder-1"><span><strong><code>@InitBinder</code></strong></span></a></h4><ul><li><strong>概念</strong>：用于自定义绑定逻辑，处理来自 HTTP 请求参数（表单数据或 URL 查询参数）的数据。</li><li><strong>作用</strong>：通过 WebDataBinder 提供细粒度的自定义数据绑定规则。</li><li><strong>常见场景</strong>：处理传统表单数据的绑定、忽略字段、数据格式转换等。</li><li><strong>示例</strong>：<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">InitBinder</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> initBinder</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">WebDataBinder</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> binder) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    binder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">registerCustomEditor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> PropertyEditorSupport</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> setAsText</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> text</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            setValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(text </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ?</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> :</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> text</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">trim</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    });</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">PostMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/form&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> submitForm</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ModelAttribute</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> User</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> user) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Received user: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>请求数据：表单格式<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>name=  John Doe &amp;age=25</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><code>@InitBinder</code> 去除 <code>name</code> 的前后空格。</li></ul></li></ul><hr><h3 id="_2-数据来源" tabindex="-1"><a class="header-anchor" href="#_2-数据来源"><span><strong>2. 数据来源</strong></span></a></h3><table><thead><tr><th>特性</th><th><code>@RequestBody</code></th><th><code>@InitBinder</code></th></tr></thead><tbody><tr><td><strong>数据来源</strong></td><td>请求体（<code>application/json</code> 或 XML）</td><td>请求参数（URL 查询参数或表单）</td></tr><tr><td><strong>常见数据格式</strong></td><td>JSON、XML、纯文本</td><td><code>application/x-www-form-urlencoded</code> 或 <code>multipart/form-data</code></td></tr></tbody></table><hr><h3 id="_3-工作机制" tabindex="-1"><a class="header-anchor" href="#_3-工作机制"><span><strong>3. 工作机制</strong></span></a></h3><table><thead><tr><th>特性</th><th><code>@RequestBody</code></th><th><code>@InitBinder</code></th></tr></thead><tbody><tr><td><strong>底层机制</strong></td><td>使用 <strong>HttpMessageConverter</strong> 进行数据转换</td><td>使用 <strong>WebDataBinder</strong> 进行绑定和转换</td></tr><tr><td><strong>适用注解或对象</strong></td><td>处理 JSON/XML 转换成 Java 对象</td><td>自定义字段绑定逻辑，处理 <code>@ModelAttribute</code> 对象</td></tr><tr><td><strong>应用范围</strong></td><td>主要用于 RESTful API</td><td>用于表单数据绑定或查询参数预处理</td></tr><tr><td><strong>支持的请求方法</strong></td><td>任意方法（GET、POST、PUT 等）</td><td>主要用于 GET 和 POST 方法</td></tr></tbody></table><hr><h3 id="_4-适用场景" tabindex="-1"><a class="header-anchor" href="#_4-适用场景"><span><strong>4. 适用场景</strong></span></a></h3><table><thead><tr><th>场景</th><th>使用 <code>@RequestBody</code></th><th>使用 <code>@InitBinder</code></th></tr></thead><tbody><tr><td><strong>处理 JSON 或 XML 数据</strong></td><td>✅ 常见场景</td><td>❌ 不适用</td></tr><tr><td><strong>处理表单数据</strong></td><td>❌ 不适用</td><td>✅ 处理传统表单提交数据</td></tr><tr><td><strong>字段级预处理</strong></td><td>通过 <code>@JsonSetter</code> 或自定义序列化器</td><td>通过 <code>registerCustomEditor</code> 或 <code>DisallowedFields</code></td></tr><tr><td><strong>忽略某些字段</strong></td><td>通过 DTO 或全局拦截逻辑实现</td><td>✅ 直接在 <code>@InitBinder</code> 中忽略字段</td></tr><tr><td><strong>全局预处理或转换规则</strong></td><td><code>RequestBodyAdvice</code> 更适用</td><td>只能局部生效</td></tr></tbody></table><hr><h3 id="_5-示例对比" tabindex="-1"><a class="header-anchor" href="#_5-示例对比"><span><strong>5. 示例对比</strong></span></a></h3><h4 id="使用-requestbody" tabindex="-1"><a class="header-anchor" href="#使用-requestbody"><span>使用 <code>@RequestBody</code></span></a></h4><p>处理 JSON 数据：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RestController</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RequestMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/api&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserController</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">PostMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/user&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> createUser</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RequestBody</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> User</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;User name: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请求示例：</p><div class="language-http line-numbers-mode" data-highlighter="shiki" data-ext="http" data-title="http" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">POST</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /api/user </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">HTTP</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1.1</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Content-Type</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> application/json</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;John&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;age&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">25</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Spring 自动将 JSON 转换为 <code>User</code> 对象。</p><hr><h4 id="使用-initbinder" tabindex="-1"><a class="header-anchor" href="#使用-initbinder"><span>使用 <code>@InitBinder</code></span></a></h4><p>处理表单数据：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Controller</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RequestMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/form&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> FormController</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">InitBinder</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> initBinder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">WebDataBinder</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> binder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        binder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">registerCustomEditor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> PropertyEditorSupport</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> setAsText</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> text</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">                setValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">text</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">trim</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        });</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">PostMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/user&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> submitForm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">ModelAttribute</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> User</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;User name: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请求示例：</p><div class="language-http line-numbers-mode" data-highlighter="shiki" data-ext="http" data-title="http" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">POST</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /form/user </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">HTTP</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1.1</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Content-Type</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> application/x-www-form-urlencoded</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">name=  John Doe &amp;age=25</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@InitBinder</code> 去除 <code>name</code> 的前后空格。</p><hr><h3 id="_6-两者能否结合使用" tabindex="-1"><a class="header-anchor" href="#_6-两者能否结合使用"><span><strong>6. 两者能否结合使用？</strong></span></a></h3><ul><li><p><strong>直接结合：不支持</strong><br><code>@InitBinder</code> 不会对 <code>@RequestBody</code> 生效，因为两者使用了不同的绑定机制。</p></li><li><p><strong>间接结合：可通过其他方式</strong><br> 如果需要对 JSON 数据进行预处理，可以使用以下方法：</p><ul><li><strong>自定义反序列化器</strong>：通过 Jackson 的自定义反序列化实现字段预处理。</li><li><strong>RequestBodyAdvice</strong>：全局处理 <code>@RequestBody</code> 数据。</li><li><strong>AOP 拦截</strong>：在控制器方法调用前对数据进行拦截和修改。</li></ul></li></ul><hr><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span><strong>总结</strong></span></a></h3><table><thead><tr><th>特性</th><th><code>@RequestBody</code></th><th><code>@InitBinder</code></th></tr></thead><tbody><tr><td><strong>常见场景</strong></td><td>RESTful API，处理 JSON/XML</td><td>表单数据绑定或字段预处理</td></tr><tr><td><strong>数据来源</strong></td><td>请求体</td><td>请求参数</td></tr><tr><td><strong>机制</strong></td><td>基于 <code>HttpMessageConverter</code></td><td>基于 <code>WebDataBinder</code></td></tr><tr><td><strong>互补性</strong></td><td>不直接兼容 <code>@InitBinder</code>，需通过其他方式间接结合</td><td>无法作用于 JSON 请求体</td></tr></tbody></table><p>选择时依据场景和数据格式，针对性地使用两者。</p>',48)]))}]]),l=JSON.parse('{"path":"/Spring/%E6%B3%A8%E8%A7%A3/@InitBinder.html","title":"@InitBinder","lang":"zh-CN","frontmatter":{"icon":"fa-solid fa-hashtag","date":"2024-11-17T00:00:00.000Z","category":["Spring"],"tag":["注解"],"gitInclude":[]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"作用","slug":"作用","link":"#作用","children":[]},{"level":2,"title":"对比@RequestBody","slug":"对比-requestbody","link":"#对比-requestbody","children":[{"level":3,"title":"1. 概念和作用","slug":"_1-概念和作用","link":"#_1-概念和作用","children":[]},{"level":3,"title":"2. 数据来源","slug":"_2-数据来源","link":"#_2-数据来源","children":[]},{"level":3,"title":"3. 工作机制","slug":"_3-工作机制","link":"#_3-工作机制","children":[]},{"level":3,"title":"4. 适用场景","slug":"_4-适用场景","link":"#_4-适用场景","children":[]},{"level":3,"title":"5. 示例对比","slug":"_5-示例对比","link":"#_5-示例对比","children":[]},{"level":3,"title":"6. 两者能否结合使用？","slug":"_6-两者能否结合使用","link":"#_6-两者能否结合使用","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"readingTime":{"minutes":4,"words":1201},"filePathRelative":"Spring/注解/@InitBinder.md","localizedDate":"2024年11月17日","excerpt":"\\n<h2>前言</h2>\\n<blockquote>\\n<p>在开发中，后端通常使用专用模型对象（<code>FindStudentInfoReq.java</code>）来接收web请求参数。该对象仅声明输入所需的值，可以防止恶意客户端提供额外的值。</p>\\n<p>另一种方法是构造函数绑定</p>\\n<p><code>@InitBinder</code> 在 Spring 开发中是一个有用但<strong>相对较少使用</strong>的功能。这主要是因为现代 Web 开发中，很多绑定和数据处理的需求已经被更高级和专用的机制（如 <code>@RequestBody</code>、校验框架、全局拦截器等）所替代。</p>\\n</blockquote>"}')}}]);