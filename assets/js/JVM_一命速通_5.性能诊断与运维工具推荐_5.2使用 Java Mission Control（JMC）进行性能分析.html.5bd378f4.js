"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[77583],{66262:(t,i)=>{i.A=(t,i)=>{const l=t.__vccOpts||t;for(const[t,a]of i)l[t]=a;return l}},56180:(t,i,l)=>{l.r(i),l.d(i,{comp:()=>s,data:()=>n});var a=l(20641);const e={},s=(0,l(66262).A)(e,[["render",function(t,i){const l=(0,a.g2)("RouteLink");return(0,a.uX)(),(0,a.CE)("div",null,[i[2]||(i[2]=(0,a.Lk)("h1",{id:"📊-5-2-使用-java-mission-control-jmc-进行性能分析",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#📊-5-2-使用-java-mission-control-jmc-进行性能分析"},[(0,a.Lk)("span",null,"📊 5.2 使用 Java Mission Control（JMC）进行性能分析")])],-1)),i[3]||(i[3]=(0,a.Lk)("p",null,"Java Mission Control（JMC）是 Oracle JDK 自带的轻量级性能分析和监控工具，基于 Java Flight Recorder（JFR）技术。它能捕获 JVM 运行时详细事件，帮助开发和运维人员深入理解程序性能瓶颈和资源消耗。",-1)),i[4]||(i[4]=(0,a.Lk)("hr",null,null,-1)),(0,a.Q3)(" more "),i[5]||(i[5]=(0,a.Fv)('<h2 id="🧰-jmc-核心功能" tabindex="-1"><a class="header-anchor" href="#🧰-jmc-核心功能"><span>🧰 JMC 核心功能</span></a></h2><ul><li><strong>实时监控 JVM 性能</strong>：CPU 使用率、内存使用、GC 活动、线程状态等</li><li><strong>事件记录与回放</strong>：详细捕获应用和 JVM 事件，可保存成文件分析</li><li><strong>分析热点和锁竞争</strong>：查找 CPU 最高消耗方法及线程阻塞点</li><li><strong>内存分配跟踪</strong>：对象分配热点及泄漏嫌疑</li><li><strong>低开销</strong>：JFR 技术保证低影响，适合生产环境采样</li></ul><hr><h2 id="🚀-启动与连接" tabindex="-1"><a class="header-anchor" href="#🚀-启动与连接"><span>🚀 启动与连接</span></a></h2><h3 id="_1-启用-jfr-记录-jdk-11" tabindex="-1"><a class="header-anchor" href="#_1-启用-jfr-记录-jdk-11"><span>1. 启用 JFR 记录（JDK 11+）</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:StartFlightRecording=filename=recording.jfr,duration=60s,settings=profile</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> MyApp</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_2-启动-jmc-并打开录制文件" tabindex="-1"><a class="header-anchor" href="#_2-启动-jmc-并打开录制文件"><span>2. 启动 JMC 并打开录制文件</span></a></h3><ul><li>打开 JMC（通常在 JDK bin 目录）</li><li>连接本地或远程 JVM</li><li>加载 JFR 文件进行分析</li></ul><hr><h2 id="🔎-分析视角" tabindex="-1"><a class="header-anchor" href="#🔎-分析视角"><span>🔎 分析视角</span></a></h2><table><thead><tr><th>视角</th><th>说明</th><th>应用场景</th></tr></thead><tbody><tr><td>JVM 概览</td><td>查看 CPU、GC、堆使用情况</td><td>快速定位整体健康状况</td></tr><tr><td>方法剖析</td><td>显示热点方法及调用栈</td><td>优化热点代码</td></tr><tr><td>线程活动</td><td>线程状态分布、阻塞与等待时间</td><td>发现线程死锁和竞争</td></tr><tr><td>分配跟踪</td><td>对象创建及生命周期</td><td>识别内存分配热点和泄漏点</td></tr><tr><td>锁竞争分析</td><td>查看锁的获取与等待情况</td><td>优化同步锁</td></tr></tbody></table><hr><h2 id="🛠-使用技巧" tabindex="-1"><a class="header-anchor" href="#🛠-使用技巧"><span>🛠 使用技巧</span></a></h2><ul><li>选择合适的采样配置（Profile vs Continuous）</li><li>配合生产环境低开销采样，避免性能影响</li><li>定期对比历史 JFR 文件，发现趋势和异常</li><li>配合其他诊断工具（如 jstack、jstat）辅助分析</li></ul><hr><h2 id="📝-小结" tabindex="-1"><a class="header-anchor" href="#📝-小结"><span>📝 小结</span></a></h2><ul><li>JMC 是生产环境性能分析利器，结合 JFR 采样能精确定位瓶颈</li><li>低开销采样机制适合长时间运行的应用</li><li>通过事件视图深入剖析 CPU、内存和线程问题</li><li>建议与日常性能测试结合，建立性能基线</li></ul><hr>',18)),(0,a.Lk)("p",null,[i[1]||(i[1]=(0,a.eW)("👉 下一篇推荐：")),(0,a.bF)(l,{to:"/JVM/%E4%B8%80%E5%91%BD%E9%80%9F%E9%80%9A/5.%E6%80%A7%E8%83%BD%E8%AF%8A%E6%96%AD%E4%B8%8E%E8%BF%90%E7%BB%B4%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/5.3Arthas%20%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A7%A3%E6%9E%90.html"},{default:(0,a.k6)((()=>i[0]||(i[0]=[(0,a.eW)("5.3 Arthas 使用指南及常用命令解析")]))),_:1})])])}]]),n=JSON.parse('{"path":"/JVM/%E4%B8%80%E5%91%BD%E9%80%9F%E9%80%9A/5.%E6%80%A7%E8%83%BD%E8%AF%8A%E6%96%AD%E4%B8%8E%E8%BF%90%E7%BB%B4%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/5.2%E4%BD%BF%E7%94%A8%20Java%20Mission%20Control%EF%BC%88JMC%EF%BC%89%E8%BF%9B%E8%A1%8C%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90.html","title":"5.2 使用 Java Mission Control（JMC）进行性能分析","lang":"zh-CN","frontmatter":{"title":"5.2 使用 Java Mission Control（JMC）进行性能分析","icon":"fa-solid fa-chart-line","date":"2025-07-10T00:00:00.000Z","author":"JeanHu","category":["JVM","性能分析","工具"],"tag":["JMC","Java Mission Control","性能监控","诊断"],"summary":"本文介绍了 Java Mission Control（JMC）的核心功能和使用方法，结合案例讲解如何通过 JMC 进行实时性能监控、事件分析与故障排查，提升 Java 应用的性能调优效率。","gitInclude":[]},"headers":[{"level":2,"title":"🧰 JMC 核心功能","slug":"🧰-jmc-核心功能","link":"#🧰-jmc-核心功能","children":[]},{"level":2,"title":"🚀 启动与连接","slug":"🚀-启动与连接","link":"#🚀-启动与连接","children":[{"level":3,"title":"1. 启用 JFR 记录（JDK 11+）","slug":"_1-启用-jfr-记录-jdk-11","link":"#_1-启用-jfr-记录-jdk-11","children":[]},{"level":3,"title":"2. 启动 JMC 并打开录制文件","slug":"_2-启动-jmc-并打开录制文件","link":"#_2-启动-jmc-并打开录制文件","children":[]}]},{"level":2,"title":"🔎 分析视角","slug":"🔎-分析视角","link":"#🔎-分析视角","children":[]},{"level":2,"title":"🛠 使用技巧","slug":"🛠-使用技巧","link":"#🛠-使用技巧","children":[]},{"level":2,"title":"📝 小结","slug":"📝-小结","link":"#📝-小结","children":[]}],"readingTime":{"minutes":2.2,"words":659},"filePathRelative":"JVM/一命速通/5.性能诊断与运维工具推荐/5.2使用 Java Mission Control（JMC）进行性能分析.md","localizedDate":"2025年7月10日","excerpt":"\\n<p>Java Mission Control（JMC）是 Oracle JDK 自带的轻量级性能分析和监控工具，基于 Java Flight Recorder（JFR）技术。它能捕获 JVM 运行时详细事件，帮助开发和运维人员深入理解程序性能瓶颈和资源消耗。</p>\\n<hr>\\n"}')}}]);