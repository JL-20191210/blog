"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[63696],{66262:(i,s)=>{s.A=(i,s)=>{const t=i.__vccOpts||i;for(const[i,a]of s)t[i]=a;return t}},77766:(i,s,t)=>{t.r(s),t.d(s,{comp:()=>h,data:()=>l});var a=t(20641);const n={},h=(0,t(66262).A)(n,[["render",function(i,s){return(0,a.uX)(),(0,a.CE)("div",null,s[0]||(s[0]=[(0,a.Fv)('<h1 id="java-面试答题卡-string-vs-stringbuffer-vs-stringbuilder" tabindex="-1"><a class="header-anchor" href="#java-面试答题卡-string-vs-stringbuffer-vs-stringbuilder"><span>Java 面试答题卡：String vs StringBuffer vs StringBuilder</span></a></h1><h3 id="✅-1-三者的基本作用" tabindex="-1"><a class="header-anchor" href="#✅-1-三者的基本作用"><span><strong>✅ 1. 三者的基本作用</strong></span></a></h3><table><thead><tr><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>String</td><td>不可变的字符序列（final 类）</td></tr><tr><td>StringBuffer</td><td>可变字符序列，<strong>线程安全</strong></td></tr><tr><td>StringBuilder</td><td>可变字符序列，<strong>非线程安全</strong></td></tr></tbody></table><h3 id="✅-2-三者的区别-核心对比表" tabindex="-1"><a class="header-anchor" href="#✅-2-三者的区别-核心对比表"><span><strong>✅ 2. 三者的区别（核心对比表）</strong></span></a></h3><table><thead><tr><th><strong>特性</strong></th><th><strong>String</strong></th><th><strong>StringBuffer</strong></th><th><strong>StringBuilder</strong></th></tr></thead><tbody><tr><td>可变性</td><td>❌ 不可变</td><td>✅ 可变</td><td>✅ 可变</td></tr><tr><td>线程安全</td><td>✅ 安全（不可变天然安全）</td><td>✅ 安全（方法有 synchronized）</td><td>❌ 不安全（适用于单线程）</td></tr><tr><td>性能（效率）</td><td>最慢（频繁创建新对象）</td><td>中等（线程安全影响性能）</td><td>最快（无锁，单线程场景）</td></tr><tr><td>使用场景</td><td>常用于字符串常量和不变文本</td><td>多线程环境下频繁修改字符串</td><td>单线程下频繁修改字符串</td></tr><tr><td>底层实现</td><td>char[]（JDK 9 后为 byte[]）</td><td>char[]</td><td>char[]</td></tr></tbody></table><h3 id="✅-3-示例说明" tabindex="-1"><a class="header-anchor" href="#✅-3-示例说明"><span><strong>✅ 3. 示例说明</strong></span></a></h3><h4 id="string-不可变" tabindex="-1"><a class="header-anchor" href="#string-不可变"><span><strong>String（不可变）</strong></span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">s </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot; World&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 实际创建了两个新的 String 对象</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="stringbuffer-线程安全" tabindex="-1"><a class="header-anchor" href="#stringbuffer-线程安全"><span><strong>StringBuffer（线程安全）</strong></span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">StringBuffer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> sb </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> StringBuffer</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">sb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot; World&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 修改原有对象</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="stringbuilder-高性能" tabindex="-1"><a class="header-anchor" href="#stringbuilder-高性能"><span><strong>StringBuilder（高性能）</strong></span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">StringBuilder</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> sb </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> StringBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">sb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot; World&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 修改原有对象</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="✅-4-内存效率对比-模拟" tabindex="-1"><a class="header-anchor" href="#✅-4-内存效率对比-模拟"><span><strong>✅ 4. 内存效率对比（模拟）</strong></span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    s </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 会产生大量临时对象</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">StringBuilder</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> sb </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> StringBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    sb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(i);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 更高效</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="✅-5-推荐使用场景" tabindex="-1"><a class="header-anchor" href="#✅-5-推荐使用场景"><span><strong>✅ 5. 推荐使用场景</strong></span></a></h3><table><thead><tr><th><strong>场景</strong></th><th><strong>推荐类型</strong></th></tr></thead><tbody><tr><td>多线程环境下字符串频繁拼接</td><td>StringBuffer</td></tr><tr><td>单线程环境下字符串频繁拼接</td><td>StringBuilder</td></tr><tr><td>字符串内容不会变（常量、配置）</td><td>String</td></tr></tbody></table><h3 id="✅-6-源码层面小结-jdk-8" tabindex="-1"><a class="header-anchor" href="#✅-6-源码层面小结-jdk-8"><span><strong>✅ 6. 源码层面小结（JDK 8）</strong></span></a></h3><ul><li>String：底层是 final char[] value（不可变）</li><li>StringBuilder：继承自 AbstractStringBuilder，方法无锁</li><li>StringBuffer：继承自 AbstractStringBuilder，方法有 synchronized</li></ul>',18)]))}]]),l=JSON.parse('{"path":"/Interview/%E9%9D%A2%E8%AF%95%E7%AD%94%E9%A2%98%E5%8D%A1/Java/String%20vs%20StringBuffer%20vs%20StringBuilder.html","title":"Java 面试答题卡：String vs StringBuffer vs StringBuilder","lang":"zh-CN","frontmatter":{"gitInclude":[]},"headers":[{"level":3,"title":"✅ 1. 三者的基本作用","slug":"✅-1-三者的基本作用","link":"#✅-1-三者的基本作用","children":[]},{"level":3,"title":"✅ 2. 三者的区别（核心对比表）","slug":"✅-2-三者的区别-核心对比表","link":"#✅-2-三者的区别-核心对比表","children":[]},{"level":3,"title":"✅ 3. 示例说明","slug":"✅-3-示例说明","link":"#✅-3-示例说明","children":[]},{"level":3,"title":"✅ 4. 内存效率对比（模拟）","slug":"✅-4-内存效率对比-模拟","link":"#✅-4-内存效率对比-模拟","children":[]},{"level":3,"title":"✅ 5. 推荐使用场景","slug":"✅-5-推荐使用场景","link":"#✅-5-推荐使用场景","children":[]},{"level":3,"title":"✅ 6. 源码层面小结（JDK 8）","slug":"✅-6-源码层面小结-jdk-8","link":"#✅-6-源码层面小结-jdk-8","children":[]}],"readingTime":{"minutes":1.34,"words":402},"filePathRelative":"Interview/面试答题卡/Java/String vs StringBuffer vs StringBuilder.md","excerpt":"\\n<h3><strong>✅ 1. 三者的基本作用</strong></h3>\\n<table>\\n<thead>\\n<tr>\\n<th><strong>类型</strong></th>\\n<th><strong>说明</strong></th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>String</td>\\n<td>不可变的字符序列（final 类）</td>\\n</tr>\\n<tr>\\n<td>StringBuffer</td>\\n<td>可变字符序列，<strong>线程安全</strong></td>\\n</tr>\\n<tr>\\n<td>StringBuilder</td>\\n<td>可变字符序列，<strong>非线程安全</strong></td>\\n</tr>\\n</tbody>\\n</table>"}')}}]);