"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[99435],{66262:(s,a)=>{a.A=(s,a)=>{const n=s.__vccOpts||s;for(const[s,e]of a)n[s]=e;return n}},23352:(s,a,n)=>{n.r(a),n.d(a,{comp:()=>r,data:()=>p});var e=n(20641);const i=n.p+"assets/img/java-arraydeque-class.b94443f4.png",l={},r=(0,n(66262).A)(l,[["render",function(s,a){return(0,e.uX)(),(0,e.CE)("div",null,a[0]||(a[0]=[(0,e.Fv)('<h1 id="java-arraydeque" tabindex="-1"><a class="header-anchor" href="#java-arraydeque"><span>Java ArrayDeque</span></a></h1><p>在本教程中，我们将借助示例来学习ArrayDeque类及其方法。此外，我们还将学习使用ArrayDeque来实现堆栈。</p><p>在Java中，我们可以使用ArrayDeque该类使用数组来实现队列和双端队列数据结构。</p><h2 id="由arraydeque实现的接口" tabindex="-1"><a class="header-anchor" href="#由arraydeque实现的接口"><span>由ArrayDeque实现的接口</span></a></h2><p>在ArrayDeque类实现这两个接口：</p><ul><li><a href="https://www.cainiaojc.com/java/java-queue.html" target="_blank" rel="noopener noreferrer">Java Queue接口</a></li><li><a href="https://www.cainiaojc.com/java/java-deque.html" target="_blank" rel="noopener noreferrer">Java Deque接口</a></li></ul><figure><img src="'+i+'" alt="Java中的ArrayDeque实现了两个接口：Queue和Deque" tabindex="0" loading="lazy"><figcaption>Java中的ArrayDeque实现了两个接口：Queue和Deque</figcaption></figure><h2 id="创建arraydeque" tabindex="-1"><a class="header-anchor" href="#创建arraydeque"><span>创建ArrayDeque</span></a></h2><p>为了创建ArrayDeque双端队列，我们必须导入java.util.ArrayDeque包。</p><p>这是我们可以用Java创建ArrayDeque双端队列的方法：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ArrayDeque&lt;Type&gt; animal = new ArrayDeque&lt;&gt;();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在此，Type表示ArrayDeque双端队列的类型。例如，</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>//创建字符串类型ArrayDeque</span></span>\n<span class="line"><span>ArrayDeque&lt;String&gt; animals = new ArrayDeque&lt;&gt;();</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>//创建整数类型ArrayDeque</span></span>\n<span class="line"><span>ArrayDeque&lt;Integer&gt; age = new ArrayDeque&lt;&gt;();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="arraydeque方法" tabindex="-1"><a class="header-anchor" href="#arraydeque方法"><span>ArrayDeque方法</span></a></h2><p>ArrayDeque类提供了所有的存在于方法Queue和Deque接口。</p><h3 id="将元素插入双端队列" tabindex="-1"><a class="header-anchor" href="#将元素插入双端队列"><span>将元素插入双端队列</span></a></h3><p><strong>1.使用add()，addFirst()和addLast()添加元素</strong></p><ul><li>add() - 将指定的元素插入ArrayDeque双端队列的末尾</li><li>addFirst() -在ArrayDeque双端队列的开头，插入指定的元素</li><li>addLast() - 在ArrayDeque双端队列的末尾插入指定的内容（等效于add()）</li></ul><p>**注意：**如果ArrayDeque双端队列已满，则所有这些方法add()，addFirst()和addLast()都会引发IllegalStateException。</p><p>例如，</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>import java.util.ArrayDeque;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>class Main {</span></span>\n<span class="line"><span>    public static void main(String[] args) {</span></span>\n<span class="line"><span>        ArrayDeque&lt;String&gt; animals= new ArrayDeque&lt;&gt;();</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        //使用add ()</span></span>\n<span class="line"><span>        animals.add(&quot;Dog&quot;);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        //使用addFirst ()</span></span>\n<span class="line"><span>        animals.addFirst(&quot;Cat&quot;);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        //使用addLast()</span></span>\n<span class="line"><span>        animals.addLast(&quot;Horse&quot;);</span></span>\n<span class="line"><span>        System.out.println(&quot;ArrayDeque: &quot; + animals);</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出结果</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ArrayDeque: [Cat, Dog, Horse]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>2.使用 offer()，offerFirst()和offerLast()插入元素</strong></p><ul><li>offer() - 将指定的元素插入ArrayDeque双端队列的末尾</li><li>offerFirst() - 在ArrayDeque双端队列的开始处插入指定的元素</li><li>offerLast() - 将指定的元素插入ArrayDeque双端队列的末尾</li></ul><p><strong>注意：</strong> offer()，offerFirst()并offerLast()返回true是否成功插入元素；否则，返回。如果ArrayDeque双端队列已满，则这些方法返回false。</p><p>例如，</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>import java.util.ArrayDeque;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>class Main {</span></span>\n<span class="line"><span>    public static void main(String[] args) {</span></span>\n<span class="line"><span>        ArrayDeque&lt;String&gt; animals= new ArrayDeque&lt;&gt;();</span></span>\n<span class="line"><span>        //使用offer()</span></span>\n<span class="line"><span>        animals.offer(&quot;Dog&quot;);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        //使用offerFirst()</span></span>\n<span class="line"><span>        animals.offerFirst(&quot;Cat&quot;);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        //使用offerLast()</span></span>\n<span class="line"><span>        animals.offerLast(&quot;Horse&quot;);</span></span>\n<span class="line"><span>        System.out.println(&quot;ArrayDeque: &quot; + animals);</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出结果</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ArrayDeque: [Cat, Dog, Horse]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="访问arraydeque元素" tabindex="-1"><a class="header-anchor" href="#访问arraydeque元素"><span>访问ArrayDeque元素</span></a></h3><p><strong>1.使用getFirst()和getLast()访问元素</strong></p><ul><li>getFirst() - 返回ArrayDeque双端队列的第一个元素</li><li>getLast() - 返回ArrayDeque双端队列的最后一个元素</li></ul><p>**注：**如果ArrayDeque双端队列为空，getFirst()和getLast()抛出NoSuchElementException。</p><p>例如，</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>import java.util.ArrayDeque;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>class Main {</span></span>\n<span class="line"><span>    public static void main(String[] args) {</span></span>\n<span class="line"><span>        ArrayDeque&lt;String&gt; animals= new ArrayDeque&lt;&gt;();</span></span>\n<span class="line"><span>        animals.add(&quot;Dog&quot;);</span></span>\n<span class="line"><span>        animals.add(&quot;Cat&quot;);</span></span>\n<span class="line"><span>        animals.add(&quot;Horse&quot;);</span></span>\n<span class="line"><span>        System.out.println(&quot;ArrayDeque: &quot; + animals);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        // 获取第一个元素</span></span>\n<span class="line"><span>        String firstElement = animals.getFirst();</span></span>\n<span class="line"><span>        System.out.println(&quot;第一个元素： &quot; + firstElement);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        //获取最后一个元素</span></span>\n<span class="line"><span>        String lastElement = animals.getLast();</span></span>\n<span class="line"><span>        System.out.println(&quot;最后一个元素： &quot; + lastElement);</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出结果</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ArrayDeque: [Dog, Cat, Horse]</span></span>\n<span class="line"><span>第一个元素： Dog</span></span>\n<span class="line"><span>最后一个元素： Horse</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.使用peek()，peekFirst()和peekLast()方法访问元素</strong></p><ul><li>peek() - 返回ArrayDeque双端队列的第一个元素</li><li>peekFirst() - 返回ArrayDeque双端队列的第一个元素（等效于peek()）</li><li>peekLast() - 返回ArrayDeque双端队列的最后一个元素</li></ul><p>例如，</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>import java.util.ArrayDeque;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>class Main {</span></span>\n<span class="line"><span>    public static void main(String[] args) {</span></span>\n<span class="line"><span>        ArrayDeque&lt;String&gt; animals= new ArrayDeque&lt;&gt;();</span></span>\n<span class="line"><span>        animals.add(&quot;Dog&quot;);</span></span>\n<span class="line"><span>        animals.add(&quot;Cat&quot;);</span></span>\n<span class="line"><span>        animals.add(&quot;Horse&quot;);</span></span>\n<span class="line"><span>        System.out.println(&quot;ArrayDeque: &quot; + animals);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        //使用peek()</span></span>\n<span class="line"><span>        String element = animals.peek();</span></span>\n<span class="line"><span>        System.out.println(&quot;头元素： &quot; + element);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        //使用peekFirst()</span></span>\n<span class="line"><span>        String firstElement = animals.peekFirst();</span></span>\n<span class="line"><span>        System.out.println(&quot;第一个元素： &quot; + firstElement);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        //使用peekLast</span></span>\n<span class="line"><span>        String lastElement = animals.peekLast();</span></span>\n<span class="line"><span>        System.out.println(&quot;最后一个元素： &quot; + lastElement);</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出结果</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ArrayDeque: [Dog, Cat, Horse]</span></span>\n<span class="line"><span>Head Element: Dog</span></span>\n<span class="line"><span>第一个元素： Dog</span></span>\n<span class="line"><span>最后一个元素： Horse</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**注意：**如果ArrayDeque双端队列为空，peek()，peekFirst()和getLast()抛出NoSuchElementException。</p><h3 id="删除-arraydeque-元素" tabindex="-1"><a class="header-anchor" href="#删除-arraydeque-元素"><span>删除 ArrayDeque 元素</span></a></h3><p><strong>1.使用remove()，removeFirst()，removeLast()方法删除元素</strong></p><ul><li>remove() - 返回并从ArrayDeque双端队列的第一个元素中删除一个元素</li><li>remove(element) - 返回并从ArrayDeque双端队列的头部删除指定的元素</li><li>removeFirst() - 返回并从ArrayDeque双端队列中删除第一个元素（等效于remove()）</li><li>removeLast() - 返回并从ArrayDeque双端队列中删除最后一个元素</li></ul><p>**注意：**如果数组双端队列为空，则remove()，removeFirst()和removeLast()方法将引发异常。 另外，如果找不到元素，则remove(element)会引发异常。</p><p>例如，</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>import java.util.ArrayDeque;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>class Main {</span></span>\n<span class="line"><span>    public static void main(String[] args) {</span></span>\n<span class="line"><span>        ArrayDeque&lt;String&gt; animals= new ArrayDeque&lt;&gt;();</span></span>\n<span class="line"><span>        animals.add(&quot;Dog&quot;);</span></span>\n<span class="line"><span>        animals.add(&quot;Cat&quot;);</span></span>\n<span class="line"><span>        animals.add(&quot;Cow&quot;);</span></span>\n<span class="line"><span>        animals.add(&quot;Horse&quot;);</span></span>\n<span class="line"><span>        System.out.println(&quot;ArrayDeque: &quot; + animals);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        //使用remove()</span></span>\n<span class="line"><span>        String element = animals.remove();</span></span>\n<span class="line"><span>        System.out.println(&quot;删除Element: &quot; + element);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        System.out.println(&quot;新的ArrayDeque： &quot; + animals);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        //使用removeFirst()</span></span>\n<span class="line"><span>        String firstElement = animals.removeFirst();</span></span>\n<span class="line"><span>        System.out.println(&quot;删除第一个元素： &quot; + firstElement);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        //使用removeLast()</span></span>\n<span class="line"><span>        String lastElement = animals.removeLast();</span></span>\n<span class="line"><span>        System.out.println(&quot;删除最后一个元素： &quot; + lastElement);</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出结果</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ArrayDeque: [Dog, Cat, Cow, Horse]</span></span>\n<span class="line"><span>删除Element: Dog</span></span>\n<span class="line"><span>新的ArrayDeque： [Cat, Cow, Horse]</span></span>\n<span class="line"><span>删除第一个元素： Cat</span></span>\n<span class="line"><span>删除最后一个元素： Horse</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.使用poll()，pollFirst()和pollLast()方法删除元素</strong></p><ul><li>poll() - 返回并删除ArrayDeque双端队列的第一个元素</li><li>pollFirst() - 返回并删除ArrayDeque双端队列的第一个元素（等效于poll()）</li><li>pollLast() - 返回并删除ArrayDeque双端队列的最后一个元素</li></ul><p>**注意：**如果ArrayDeque双端队列为空，则如果找不到该元素，则poll()，pollFirst()和pollLast()返回null。</p><p>例如，</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>import java.util.ArrayDeque;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>class Main {</span></span>\n<span class="line"><span>    public static void main(String[] args) {</span></span>\n<span class="line"><span>        ArrayDeque&lt;String&gt; animals= new ArrayDeque&lt;&gt;();</span></span>\n<span class="line"><span>        animals.add(&quot;Dog&quot;);</span></span>\n<span class="line"><span>        animals.add(&quot;Cat&quot;);</span></span>\n<span class="line"><span>        animals.add(&quot;Cow&quot;);</span></span>\n<span class="line"><span>        animals.add(&quot;Horse&quot;);</span></span>\n<span class="line"><span>        System.out.println(&quot;ArrayDeque: &quot; + animals);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        //使用poll()</span></span>\n<span class="line"><span>        String element = animals.poll();</span></span>\n<span class="line"><span>        System.out.println(&quot;删除Element: &quot; + element);</span></span>\n<span class="line"><span>        System.out.println(&quot;新的ArrayDeque： &quot; + animals);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        //使用pollFirst()</span></span>\n<span class="line"><span>        String firstElement = animals.pollFirst();</span></span>\n<span class="line"><span>        System.out.println(&quot;删除第一个元素： &quot; + firstElement);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        //使用pollLast()</span></span>\n<span class="line"><span>        String lastElement = animals.pollLast();</span></span>\n<span class="line"><span>        System.out.println(&quot;删除最后一个元素： &quot; + lastElement);</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出结果</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ArrayDeque: [Dog, Cat, Cow, Horse]</span></span>\n<span class="line"><span>删除Element: Dog</span></span>\n<span class="line"><span>新的ArrayDeque： [Cat, Cow, Horse]</span></span>\n<span class="line"><span>删除第一个元素： Cat</span></span>\n<span class="line"><span>删除最后一个元素： Horse</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3.删除元素：使用clear()方法</strong></p><p>要从ArrayDeque双端队列中删除所有元素，我们使用clear()方法。例如，</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>import java.util.ArrayDeque;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>class Main {</span></span>\n<span class="line"><span>    public static void main(String[] args) {</span></span>\n<span class="line"><span>        ArrayDeque&lt;String&gt; animals= new ArrayDeque&lt;&gt;();</span></span>\n<span class="line"><span>        animals.add(&quot;Dog&quot;);</span></span>\n<span class="line"><span>        animals.add(&quot;Cat&quot;);</span></span>\n<span class="line"><span>        animals.add(&quot;Horse&quot;);</span></span>\n<span class="line"><span>        System.out.println(&quot;ArrayDeque: &quot; + animals);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        //使用clear()</span></span>\n<span class="line"><span>        animals.clear();</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        System.out.println(&quot;新的ArrayDeque： &quot; + animals);</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出结果</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ArrayDeque: [Dog, Cat, Horse]</span></span>\n<span class="line"><span>新的ArrayDeque： []</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="迭代遍历arraydeque" tabindex="-1"><a class="header-anchor" href="#迭代遍历arraydeque"><span>迭代遍历ArrayDeque</span></a></h3><ul><li>iterator() - 返回可用于遍历ArrayDeque双端队列的迭代器</li><li>descendingIterator() -返回一个迭代器，该迭代器可用于以相反顺序遍历ArrayDeque双端队列</li></ul><p>为了使用这些方法，我们必须导入java.util.Iterator包。例如，</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>import java.util.ArrayDeque;</span></span>\n<span class="line"><span>import java.util.Iterator;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>class Main {</span></span>\n<span class="line"><span>    public static void main(String[] args) {</span></span>\n<span class="line"><span>        ArrayDeque&lt;String&gt; animals= new ArrayDeque&lt;&gt;();</span></span>\n<span class="line"><span>        animals.add(&quot;Dog&quot;);</span></span>\n<span class="line"><span>        animals.add(&quot;Cat&quot;);</span></span>\n<span class="line"><span>        animals.add(&quot;Horse&quot;);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        System.out.print(&quot;ArrayDeque: &quot;);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        //使用iterator()</span></span>\n<span class="line"><span>        Iterator&lt;String&gt; iterate = animals.iterator();</span></span>\n<span class="line"><span>        while(iterate.hasNext()) {</span></span>\n<span class="line"><span>            System.out.print(iterate.next());</span></span>\n<span class="line"><span>            System.out.print(&quot;, &quot;);</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        System.out.print(&quot;\\n反向ArrayDeque: &quot;);</span></span>\n<span class="line"><span>        //使用descendingIterator()</span></span>\n<span class="line"><span>        Iterator&lt;String&gt; desIterate = animals.descendingIterator();</span></span>\n<span class="line"><span>        while(desIterate.hasNext()) {</span></span>\n<span class="line"><span>            System.out.print(desIterate.next());</span></span>\n<span class="line"><span>            System.out.print(&quot;, &quot;);</span></span>\n<span class="line"><span>        }</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出结果</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ArrayDeque: [Dog, Cat, Horse]</span></span>\n<span class="line"><span>反向ArrayDeque: [Horse, Cat, Dog]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其他方法" tabindex="-1"><a class="header-anchor" href="#其他方法"><span>其他方法</span></a></h2><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">内容描述</th></tr></thead><tbody><tr><td style="text-align:left;">element()</td><td style="text-align:left;">从ArrayDeque双端队列的头部返回一个元素。</td></tr><tr><td style="text-align:left;">contains(element)</td><td style="text-align:left;">在ArrayDeque双端队列中搜索指定的元素。 如果找到该元素，则返回true，否则返回false。</td></tr><tr><td style="text-align:left;">size()</td><td style="text-align:left;">返回ArrayDeque双端队列的长度。</td></tr><tr><td style="text-align:left;">toArray()</td><td style="text-align:left;">将ArrayDeque双端队列转换为数组并返回。</td></tr><tr><td style="text-align:left;">clone()</td><td style="text-align:left;">创建ArrayDeque双端队列的副本并返回它。</td></tr></tbody></table><h2 id="arraydeque作为堆栈" tabindex="-1"><a class="header-anchor" href="#arraydeque作为堆栈"><span>ArrayDeque作为堆栈</span></a></h2><p>要在Java中实现**LIFO（后进先出）**堆栈，建议在<a href="https://www.cainiaojc.com/java/java-stack.html" target="_blank" rel="noopener noreferrer">Stack类</a>上使用双端队列。该ArrayDeque类比Stack类快。</p><p>ArrayDeque 提供了以下可用于实现堆栈的方法。</p><ul><li>push() - 在堆栈顶部添加一个元素</li><li>peek() - 从堆栈顶部返回一个元素</li><li>pop() - 返回并从堆栈顶部删除元素</li></ul><p>例如，</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>import java.util.ArrayDeque;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>class Main {</span></span>\n<span class="line"><span>    public static void main(String[] args) {</span></span>\n<span class="line"><span>        ArrayDeque&lt;String&gt; stack = new ArrayDeque&lt;&gt;();</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        //将元素添加到stack</span></span>\n<span class="line"><span>        stack.push(&quot;Dog&quot;);</span></span>\n<span class="line"><span>        stack.push(&quot;Cat&quot;);</span></span>\n<span class="line"><span>        stack.push(&quot;Horse&quot;);</span></span>\n<span class="line"><span>        System.out.println(&quot;Stack: &quot; + stack);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        //从堆栈顶部访问元素</span></span>\n<span class="line"><span>        String element = stack.peek();</span></span>\n<span class="line"><span>        System.out.println(&quot;访问元素： &quot; + element);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        //从堆栈顶部删除元素</span></span>\n<span class="line"><span>        String remElement = stack.pop();</span></span>\n<span class="line"><span>        System.out.println(&quot;删除element: &quot; + remElement);</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出结果</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Stack: [Horse, Cat, Dog]</span></span>\n<span class="line"><span>访问元素： Horse</span></span>\n<span class="line"><span>删除Element: Horse</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="arraydeque与-linkedlist类" tabindex="-1"><a class="header-anchor" href="#arraydeque与-linkedlist类"><span>ArrayDeque与 LinkedList类</span></a></h2><p>ArrayDeque和<a href="https://www.cainiaojc.com/java/java-linkedlist.html" target="_blank" rel="noopener noreferrer">Java的LinkedList都</a>实现了Deque接口。但是，它们之间存在一些差异。</p><ul><li>LinkedList支持空元素，而ArrayDeque不支持。</li><li>链表中的每个节点都包含到其他节点的链接。这就是LinkedList比ArrayDeque需要更多存储空间的原因。</li><li>如果要实现队列或双端队列数据结构，则ArrayDeque可能比LinkedList快。</li></ul>',84)]))}]]),p=JSON.parse('{"path":"/Java/%E9%98%9F%E5%88%97/ArrayDeque.html","title":"Java ArrayDeque","lang":"zh-CN","frontmatter":{"gitInclude":[]},"headers":[{"level":2,"title":"由ArrayDeque实现的接口","slug":"由arraydeque实现的接口","link":"#由arraydeque实现的接口","children":[]},{"level":2,"title":"创建ArrayDeque","slug":"创建arraydeque","link":"#创建arraydeque","children":[]},{"level":2,"title":"ArrayDeque方法","slug":"arraydeque方法","link":"#arraydeque方法","children":[{"level":3,"title":"将元素插入双端队列","slug":"将元素插入双端队列","link":"#将元素插入双端队列","children":[]},{"level":3,"title":"访问ArrayDeque元素","slug":"访问arraydeque元素","link":"#访问arraydeque元素","children":[]},{"level":3,"title":"删除 ArrayDeque 元素","slug":"删除-arraydeque-元素","link":"#删除-arraydeque-元素","children":[]},{"level":3,"title":"迭代遍历ArrayDeque","slug":"迭代遍历arraydeque","link":"#迭代遍历arraydeque","children":[]}]},{"level":2,"title":"其他方法","slug":"其他方法","link":"#其他方法","children":[]},{"level":2,"title":"ArrayDeque作为堆栈","slug":"arraydeque作为堆栈","link":"#arraydeque作为堆栈","children":[]},{"level":2,"title":"ArrayDeque与 LinkedList类","slug":"arraydeque与-linkedlist类","link":"#arraydeque与-linkedlist类","children":[]}],"readingTime":{"minutes":6.32,"words":1896},"filePathRelative":"Java/队列/ArrayDeque.md","excerpt":"\\n<p>在本教程中，我们将借助示例来学习ArrayDeque类及其方法。此外，我们还将学习使用ArrayDeque来实现堆栈。</p>\\n<p>在Java中，我们可以使用ArrayDeque该类使用数组来实现队列和双端队列数据结构。</p>\\n<h2>由ArrayDeque实现的接口</h2>\\n<p>在ArrayDeque类实现这两个接口：</p>\\n<ul>\\n<li><a href=\\"https://www.cainiaojc.com/java/java-queue.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Java Queue接口</a></li>\\n<li><a href=\\"https://www.cainiaojc.com/java/java-deque.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Java Deque接口</a></li>\\n</ul>"}')}}]);