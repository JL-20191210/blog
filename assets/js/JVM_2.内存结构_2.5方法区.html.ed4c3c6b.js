"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[460],{6262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}},5912:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>r,data:()=>k});var n=a(641);const l=a.p+"assets/img/2.feb45513.png",e=a.p+"assets/img/3.8ffd14e0.png",t=a.p+"assets/img/4.138dd655.png",h={},r=(0,a(6262).A)(h,[["render",function(i,s){return(0,n.uX)(),(0,n.CE)("div",null,s[0]||(s[0]=[(0,n.Fv)('<h1 id="_5-方法区" tabindex="-1"><a class="header-anchor" href="#_5-方法区"><span>5 方法区</span></a></h1><figure><img src="'+l+'" alt="方法区" tabindex="0" loading="lazy"><figcaption>方法区</figcaption></figure><h2 id="_5-1-定义" tabindex="-1"><a class="header-anchor" href="#_5-1-定义"><span>5.1 定义</span></a></h2><p>方法区用于存储类结构信息、运行时常量池、静态变量以及即时编译器编译后的代码等。</p><h2 id="_5-2-特点" tabindex="-1"><a class="header-anchor" href="#_5-2-特点"><span>5.2 特点</span></a></h2><ul><li>方法区是线程共享的，存储类的信息、方法、字段、运行时常量池等数据。</li><li>数据在类加载时存入方法区，是静态数据区域。</li></ul><h2 id="_5-3-内存溢出" tabindex="-1"><a class="header-anchor" href="#_5-3-内存溢出"><span>5.3 内存溢出</span></a></h2><p>方法区内存溢出（OutOfMemoryError）通常发生在加载大量类时，导致空间不足。</p><ul><li>在 JDK 1.8 之前，方法区被称为<strong>永久代</strong>，可以通过 <code>-XX:MaxPermSize</code> 参数调整大小。</li><li>在 JDK 1.8 之后，方法区被改为<strong>元空间</strong>，通过 <code>-XX:MaxMetaspaceSize</code> 参数调整大小。</li></ul><h2 id="_5-4-诊断工具" tabindex="-1"><a class="header-anchor" href="#_5-4-诊断工具"><span>5.4 诊断工具</span></a></h2><p>可以使用 <strong>jmap</strong>、<strong>jconsole</strong>、<strong>jvisualvm</strong> 等工具来监控和诊断方法区内存的使用情况。</p><h2 id="_5-5-常量池" tabindex="-1"><a class="header-anchor" href="#_5-5-常量池"><span>5.5 常量池</span></a></h2><ul><li><strong>定义</strong>：常量池存储编译期生成的字面量和符号引用。</li><li><strong>特点</strong>：属于方法区的一部分，包含类名、方法名、字段名等符号引用和字面量。</li></ul><p><strong>内存溢出</strong>：常量池内存溢出通常发生在常量过多时。可以通过增加常量池的大小或优化代码来避免溢出。</p><h3 id="_1-字面量的实例" tabindex="-1"><a class="header-anchor" href="#_1-字面量的实例"><span>1. 字面量的实例</span></a></h3><p>在 Java 中，字面量（Literal）是指直接在代码中表示的固定值。例如：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> number </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // &quot;100&quot; 是字面量，&quot;number&quot; 是变量</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这里，<code>100</code> 是字面量，而 <code>number</code> 是变量。字面量通常用于表示具体的数值、字符串、布尔值等常量。</p><h3 id="_2-符号引用的实例" tabindex="-1"><a class="header-anchor" href="#_2-符号引用的实例"><span>2. 符号引用的实例</span></a></h3><p>符号引用是指代码中使用的标识符，经过编译后，会被转换成一种指向具体内存位置的引用。以 <code>String str = &quot;Hello&quot;;</code> 为例：</p><h4 id="_2-1-编译阶段" tabindex="-1"><a class="header-anchor" href="#_2-1-编译阶段"><span>2.1 编译阶段：</span></a></h4><ul><li>字符串 <code>&quot;Hello&quot;</code> 以及 <code>String</code> 类的符号引用会被存储在 <code>.class</code> 文件的常量池中。</li><li>常量池中的引用是符号引用，指向具体的类或对象。</li></ul><h4 id="_2-2-运行时" tabindex="-1"><a class="header-anchor" href="#_2-2-运行时"><span>2.2 运行时：</span></a></h4><ul><li>JVM 会将符号引用 <code>&quot;Hello&quot;</code> 解析为直接引用，指向字符串常量池中的内存地址。</li><li>同时，<code>String</code> 类的符号引用会被解析为方法区中 <code>String</code> 类定义的内存地址，确保正确加载类的结构。</li></ul><h2 id="_5-6-stringtable-字符串常量池" tabindex="-1"><a class="header-anchor" href="#_5-6-stringtable-字符串常量池"><span>5.6 <strong>StringTable：字符串常量池</strong></span></a></h2><figure><img src="'+e+'" alt="方法区" tabindex="0" loading="lazy"><figcaption>方法区</figcaption></figure><blockquote><p><code>StringTable</code> 是 JVM 中用于存储字符串常量池的机制，旨在提高内存利用效率，避免重复创建相同的字符串对象。以下是关于 <code>StringTable</code> 的总结和关键概念。</p></blockquote><hr><h3 id="_1-字符串常量池-stringtable" tabindex="-1"><a class="header-anchor" href="#_1-字符串常量池-stringtable"><span><strong>1. 字符串常量池（StringTable）</strong></span></a></h3><ul><li><strong>作用</strong>：为了避免重复创建相同的字符串对象，JVM 会先检查常量池中是否已存在该字符串对象。如果已存在，直接返回该对象；如果不存在，则将该字符串添加到常量池。</li><li><strong>历史变化</strong>： <ul><li><strong>JDK 1.6 及以前</strong>：字符串常量池位于 <strong>永久代（PermGen）</strong> 中。</li><li><strong>JDK 1.8 及以后</strong>：<code>StringTable</code> 被移至 <strong>堆内存</strong> 中，不再使用永久代。</li></ul></li></ul><hr><h3 id="_2-字符串拼接的机制" tabindex="-1"><a class="header-anchor" href="#_2-字符串拼接的机制"><span><strong>2. 字符串拼接的机制</strong></span></a></h3><ul><li><strong>普通字符串拼接</strong>：在拼接时，JVM 使用 <code>StringBuilder</code> 来合并字符串，从而避免每次拼接时生成新的字符串对象。例如：</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> str </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;a&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;b&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 使用 StringBuilder 进行拼接</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>字符串常量拼接</strong>：编译器会在编译时将常量字符串拼接成一个新的字符串，而不是在运行时拼接。这样能减少运行时的内存分配。</li></ul><hr><h3 id="_3-intern-方法的作用" tabindex="-1"><a class="header-anchor" href="#_3-intern-方法的作用"><span><strong>3. <code>intern()</code> 方法的作用</strong></span></a></h3><ul><li><strong><code>intern()</code> 方法</strong>：将字符串放入字符串常量池中。如果常量池中已有该字符串，则返回常量池中的引用；如果没有，则将该字符串添加到常量池，并返回它的引用。</li></ul><p><strong>重要特性</strong>：</p><ul><li>如果字符串已存在于常量池中，<code>intern()</code> 方法不会将新字符串加入池中，而是返回常量池中已存在的字符串。</li><li>如果字符串不在常量池中，<code>intern()</code> 会将其添加到池中，并返回引用。</li></ul><p><strong>例子</strong>：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> str </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;a&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;b&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> st2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">intern</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 将 &quot;ab&quot; 加入常量池</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> str3 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;ab&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // &quot;ab&quot; 已在常量池中</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(str </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> st2);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // true, 因为 st2 是常量池中的对象</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(str </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> str3);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // true, 因为 str3 是常量池中的对象</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解释：</p><ul><li><code>str</code> 是通过拼接生成的字符串，位于堆内存。</li><li><code>st2</code> 是通过 <code>intern()</code> 方法得到的常量池中的引用，因此与常量池中的 <code>str3</code> 相同。</li></ul><hr><h3 id="_4-stringtable-的位置" tabindex="-1"><a class="header-anchor" href="#_4-stringtable-的位置"><span><strong>4. StringTable 的位置</strong></span></a></h3><ul><li><strong>JDK 1.6 之前</strong>：<code>StringTable</code> 位于 <strong>永久代（PermGen）</strong> 中。</li><li><strong>JDK 1.8 及以后</strong>：<code>StringTable</code> 被移至 <strong>堆内存</strong> 中，避免了永久代空间限制。</li></ul><hr><h3 id="_5-stringtable-垃圾回收" tabindex="-1"><a class="header-anchor" href="#_5-stringtable-垃圾回收"><span><strong>5. StringTable 垃圾回收</strong></span></a></h3><ul><li><strong>堆内存大小</strong>：可以通过 <code>-Xmx</code> 参数设置堆内存的最大大小。例如：</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Xmx512m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> MyApp</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>GC 日志输出</strong>：可以通过 <code>-XX:+PrintStringTableStatistics</code> 打印字符串常量池的相关统计信息，帮助开发者分析内存使用。</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:+PrintStringTableStatistics</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> MyApp</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>垃圾回收调试</strong>：使用 <code>-XX:+PrintGCDetails</code> 和 <code>-verbose:gc</code> 输出垃圾回收的详细信息，帮助分析 GC 性能和内存分配。</li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:+PrintGCDetails</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -verbose:gc</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> MyApp</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>示例代码</strong>：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> StringTableTest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> j</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; j </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; j++) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">valueOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(j).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">intern</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 将数字转换为字符串并尝试加入常量池</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                i++;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Exception</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">printStackTrace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">finally</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(i);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该代码将数字转换为字符串并尝试将其加入常量池，从而模拟字符串常量池的填充过程。</p><hr><h3 id="_6-stringtable-性能调优" tabindex="-1"><a class="header-anchor" href="#_6-stringtable-性能调优"><span><strong>6. StringTable 性能调优</strong></span></a></h3><ul><li><p><strong>HashTable 实现</strong>：<code>StringTable</code> 使用 <code>HashTable</code> 存储字符串，因此通过调整 <code>HashTable</code> 的桶数可以优化查找性能。</p><p>例如，通过设置 <code>-XX:StringTableSize=1009</code> 来增加桶的数量，减少字符串放入常量池时的查找时间：</p></li></ul><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -XX:StringTableSize=1009</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> MyApp</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>合理使用 <code>intern()</code></strong>：通过 <code>intern()</code> 方法可以避免重复的字符串对象加入常量池，节省内存。但频繁调用 <code>intern()</code> 可能会导致性能下降，因此应该谨慎使用。</li></ul><hr><h3 id="_7-总结" tabindex="-1"><a class="header-anchor" href="#_7-总结"><span><strong>7. 总结</strong></span></a></h3><figure><img src="'+t+'" alt="方法区" tabindex="0" loading="lazy"><figcaption>方法区</figcaption></figure><ul><li><strong>StringTable</strong>：JVM 中用于存储字符串常量池的机制，主要用于提高内存效率，避免重复创建相同的字符串对象。</li><li><strong><code>intern()</code> 方法</strong>：显式将字符串添加到常量池中，并返回池中已有的字符串对象。</li><li><strong>位置变化</strong>： <ul><li><strong>JDK 1.6 之前</strong>：<code>StringTable</code> 位于永久代（PermGen）。</li><li><strong>JDK 1.8 及以后</strong>：<code>StringTable</code> 移至堆内存。</li></ul></li><li><strong>性能调优</strong>： <ul><li>通过调整 <code>StringTable</code> 的大小（如 <code>-XX:StringTableSize</code>）来优化性能。</li><li>合理使用 <code>intern()</code> 方法，以减少内存占用并提高性能。</li></ul></li></ul>',67)]))}]]),k=JSON.parse('{"path":"/JVM/2.%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/2.5%E6%96%B9%E6%B3%95%E5%8C%BA.html","title":"5 方法区","lang":"zh-CN","frontmatter":{"gitInclude":[]},"headers":[{"level":2,"title":"5.1 定义","slug":"_5-1-定义","link":"#_5-1-定义","children":[]},{"level":2,"title":"5.2 特点","slug":"_5-2-特点","link":"#_5-2-特点","children":[]},{"level":2,"title":"5.3 内存溢出","slug":"_5-3-内存溢出","link":"#_5-3-内存溢出","children":[]},{"level":2,"title":"5.4 诊断工具","slug":"_5-4-诊断工具","link":"#_5-4-诊断工具","children":[]},{"level":2,"title":"5.5 常量池","slug":"_5-5-常量池","link":"#_5-5-常量池","children":[{"level":3,"title":"1. 字面量的实例","slug":"_1-字面量的实例","link":"#_1-字面量的实例","children":[]},{"level":3,"title":"2. 符号引用的实例","slug":"_2-符号引用的实例","link":"#_2-符号引用的实例","children":[]}]},{"level":2,"title":"5.6 StringTable：字符串常量池","slug":"_5-6-stringtable-字符串常量池","link":"#_5-6-stringtable-字符串常量池","children":[{"level":3,"title":"1. 字符串常量池（StringTable）","slug":"_1-字符串常量池-stringtable","link":"#_1-字符串常量池-stringtable","children":[]},{"level":3,"title":"2. 字符串拼接的机制","slug":"_2-字符串拼接的机制","link":"#_2-字符串拼接的机制","children":[]},{"level":3,"title":"3. intern() 方法的作用","slug":"_3-intern-方法的作用","link":"#_3-intern-方法的作用","children":[]},{"level":3,"title":"4. StringTable 的位置","slug":"_4-stringtable-的位置","link":"#_4-stringtable-的位置","children":[]},{"level":3,"title":"5. StringTable 垃圾回收","slug":"_5-stringtable-垃圾回收","link":"#_5-stringtable-垃圾回收","children":[]},{"level":3,"title":"6. StringTable 性能调优","slug":"_6-stringtable-性能调优","link":"#_6-stringtable-性能调优","children":[]},{"level":3,"title":"7. 总结","slug":"_7-总结","link":"#_7-总结","children":[]}]}],"readingTime":{"minutes":5.44,"words":1633},"filePathRelative":"JVM/2.内存结构/2.5方法区.md","excerpt":"\\n<figure><figcaption>方法区</figcaption></figure>\\n<h2>5.1 定义</h2>\\n<p>方法区用于存储类结构信息、运行时常量池、静态变量以及即时编译器编译后的代码等。</p>\\n<h2>5.2 特点</h2>\\n<ul>\\n<li>方法区是线程共享的，存储类的信息、方法、字段、运行时常量池等数据。</li>\\n<li>数据在类加载时存入方法区，是静态数据区域。</li>\\n</ul>\\n<h2>5.3 内存溢出</h2>\\n<p>方法区内存溢出（OutOfMemoryError）通常发生在加载大量类时，导致空间不足。</p>\\n<ul>\\n<li>在 JDK 1.8 之前，方法区被称为<strong>永久代</strong>，可以通过 <code>-XX:MaxPermSize</code> 参数调整大小。</li>\\n<li>在 JDK 1.8 之后，方法区被改为<strong>元空间</strong>，通过 <code>-XX:MaxMetaspaceSize</code> 参数调整大小。</li>\\n</ul>"}')}}]);