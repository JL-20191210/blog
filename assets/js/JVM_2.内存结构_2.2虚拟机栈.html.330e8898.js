"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[80702],{66262:(l,e)=>{e.A=(l,e)=>{const n=l.__vccOpts||l;for(const[l,i]of e)n[l]=i;return n}},95098:(l,e,n)=>{n.r(e),n.d(e,{comp:()=>r,data:()=>s});var i=n(20641);const a={},r=(0,n(66262).A)(a,[["render",function(l,e){return(0,i.uX)(),(0,i.CE)("div",null,e[0]||(e[0]=[(0,i.Fv)('<h1 id="_2-虚拟机栈" tabindex="-1"><a class="header-anchor" href="#_2-虚拟机栈"><span>2. 虚拟机栈</span></a></h1><h2 id="_2-1-定义" tabindex="-1"><a class="header-anchor" href="#_2-1-定义"><span>2.1 定义</span></a></h2><p>虚拟机栈为每个线程分配的内存区域，由多个栈帧组成。每个栈帧对应一次方法调用时所需的内存。</p><p><strong>特点：</strong></p><ul><li>栈大小可调整，超出限制会抛出 <code>StackOverflowError</code>。</li><li>栈空间可以动态扩展，但无法收缩。</li></ul><h2 id="_2-2-内存结构" tabindex="-1"><a class="header-anchor" href="#_2-2-内存结构"><span>2.2 内存结构</span></a></h2><ul><li>虚拟机栈包含多个栈帧，每个栈帧保存当前方法的局部变量表、操作数栈、动态链接、方法出口等信息。</li></ul><h2 id="_2-3-线程切换" tabindex="-1"><a class="header-anchor" href="#_2-3-线程切换"><span>2.3 线程切换</span></a></h2><ul><li>每个线程有独立的虚拟机栈，确保数据隔离，线程切换时能够正确恢复执行位置。</li></ul><h2 id="_2-4-异常情况" tabindex="-1"><a class="header-anchor" href="#_2-4-异常情况"><span>2.4 异常情况</span></a></h2><ul><li>可能会发生 <code>StackOverflowError</code>，栈空间不足时抛出。</li><li>由于栈是线程私有的，不会导致线程安全问题。</li></ul><h2 id="_2-5-问题辨析" tabindex="-1"><a class="header-anchor" href="#_2-5-问题辨析"><span>2.5 问题辨析</span></a></h2><ul><li><strong>垃圾回收</strong>：虚拟机栈内存不涉及垃圾回收，方法调用结束后栈帧被弹出。</li><li><strong>栈内存分配</strong>：栈内存过大会支持更多递归调用，但减少可执行线程数。</li><li><strong>局部变量线程安全性</strong>：局部变量在线程栈内是线程安全的，但如果其作用域超出栈（如被引用到堆），需要考虑线程安全问题。</li></ul><h2 id="_2-6-栈内存溢出" tabindex="-1"><a class="header-anchor" href="#_2-6-栈内存溢出"><span>2.6 栈内存溢出</span></a></h2><ul><li>栈溢出的原因可能是栈帧过大或栈的深度过深。可以通过调整 <code>-Xss256k</code> 参数来设置栈的大小。</li></ul><h2 id="_2-7-线程运行诊断" tabindex="-1"><a class="header-anchor" href="#_2-7-线程运行诊断"><span>2.7 线程运行诊断</span></a></h2><ul><li><strong>诊断工具</strong>： <ul><li>使用 <code>top</code> 查看 CPU 占用情况。</li><li>使用 <code>ps</code> 查看哪个线程占用 CPU。</li><li>使用 <code>jstack</code> 查看线程信息，定位具体线程。</li></ul></li></ul>',17)]))}]]),s=JSON.parse('{"path":"/JVM/2.%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/2.2%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88.html","title":"2. 虚拟机栈","lang":"zh-CN","frontmatter":{"gitInclude":[]},"headers":[{"level":2,"title":"2.1 定义","slug":"_2-1-定义","link":"#_2-1-定义","children":[]},{"level":2,"title":"2.2 内存结构","slug":"_2-2-内存结构","link":"#_2-2-内存结构","children":[]},{"level":2,"title":"2.3 线程切换","slug":"_2-3-线程切换","link":"#_2-3-线程切换","children":[]},{"level":2,"title":"2.4 异常情况","slug":"_2-4-异常情况","link":"#_2-4-异常情况","children":[]},{"level":2,"title":"2.5 问题辨析","slug":"_2-5-问题辨析","link":"#_2-5-问题辨析","children":[]},{"level":2,"title":"2.6 栈内存溢出","slug":"_2-6-栈内存溢出","link":"#_2-6-栈内存溢出","children":[]},{"level":2,"title":"2.7 线程运行诊断","slug":"_2-7-线程运行诊断","link":"#_2-7-线程运行诊断","children":[]}],"readingTime":{"minutes":1.34,"words":403},"filePathRelative":"JVM/2.内存结构/2.2虚拟机栈.md","excerpt":"\\n<h2>2.1 定义</h2>\\n<p>虚拟机栈为每个线程分配的内存区域，由多个栈帧组成。每个栈帧对应一次方法调用时所需的内存。</p>\\n<p><strong>特点：</strong></p>\\n<ul>\\n<li>栈大小可调整，超出限制会抛出 <code>StackOverflowError</code>。</li>\\n<li>栈空间可以动态扩展，但无法收缩。</li>\\n</ul>\\n<h2>2.2 内存结构</h2>\\n<ul>\\n<li>虚拟机栈包含多个栈帧，每个栈帧保存当前方法的局部变量表、操作数栈、动态链接、方法出口等信息。</li>\\n</ul>\\n<h2>2.3 线程切换</h2>\\n<ul>\\n<li>每个线程有独立的虚拟机栈，确保数据隔离，线程切换时能够正确恢复执行位置。</li>\\n</ul>"}')}}]);