"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[14617],{66262:(a,n)=>{n.A=(a,n)=>{const l=a.__vccOpts||a;for(const[a,i]of n)l[a]=i;return l}},2381:(a,n,l)=>{l.r(n),l.d(n,{comp:()=>g,data:()=>p});var i=l(20641);const t=l.p+"assets/img/1713860588639-bb89fc8e-30b6-4d18-a329-f3fea52c729a-17485330387364.3296f137.png",s=l.p+"assets/img/image-20240725230247664.5d6f00fa.png",r=l.p+"assets/img/1715928000183-44fc6130-8abc-4f0b-8f6d-79de0ab09509.adc172ae.webp",e=l.p+"assets/img/数据类型-9526523.9eca7b6c.webp",o={},g=(0,l(66262).A)(o,[["render",function(a,n){return(0,i.uX)(),(0,i.CE)("div",null,n[0]||(n[0]=[(0,i.Fv)('<h1 id="java基础面试题" tabindex="-1"><a class="header-anchor" href="#java基础面试题"><span>Java基础面试题</span></a></h1><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h2><h3 id="_1-说一下java的特点" tabindex="-1"><a class="header-anchor" href="#_1-说一下java的特点"><span>1.说一下Java的特点</span></a></h3><p>主要有以下的特点：</p><ul><li><strong>平台无关性</strong>：Java的“编写一次，运行无处不在&quot;哲学是其最大的特点之一。Java编译器将源代码编译成 字节码(bytecode)，该字节码可以在任何安装了Java虚拟机（JVM)的系统上运行。</li><li><strong>面向对象</strong>：Java是一门严格的面向对象编程语言，几乎一切都是对象。面向对象编程(OOP)特性使 得代码更易于维护和重用，包括类(class)、对象（object)、继承(inheritance)、多态 (polymorphism)、抽象（abstraction)和封装(encapsulation)。</li><li><strong>内存管理</strong>：Java有自己的垃圾回收机制，自动管理内存和回收不再使用的对象。这样，开发者不需要 手动管理内存，从而减少内存泄漏和其他内存相关的问题。</li></ul><h3 id="_2-java-的优势和劣势是什么" tabindex="-1"><a class="header-anchor" href="#_2-java-的优势和劣势是什么"><span>2.Java 的优势和劣势是什么？</span></a></h3><p>首先，Java的优势，我记得跨平台应该是一个大点，因为JVM的存在，一次编写到处运行。然后面向对象，这个可能也是优势，不过现在很多语言都支持面向对象，但是Java的设计从一开始就是OOP的。还有强大的生态系统，比如Spring框架，Hibernate，各种库和工具，社区支持大，企业应用广泛。另外，内存管理方面，自动垃圾回收制，减少了内存泄漏的问题，对开发者友好。还有多线程支持，内置的线程机制，方便并发编程。安全性方面，Java有安全模型，比如沙箱机制，适合网络环境。还有稳定性，企业级应用长期使用，版本更新也比较注重向后兼容。</p><p>劣势的话，性能可能是一个，虽然JVM优化了很多，但相比C++或者Rust这种原生编译语言，还是有一定开销。特别是启动时间，比如微服务场景下，可能不如GO之类的快。语法繁琐，比如样板代码多，之前没有lambda的时候更麻烦，现在有了但比起Python还是不够简洁。内存消耗，JVM本身占内存，对于资源有限的环境可能不太友好还有面向对象过于严格，有时候写简单程序反而麻烦，虽然Java8引入了函数式编程，但不如其他语言自然。还有开发效率，相比动态语言如Python，Java需要更多代码，编译过程也可能拖慢开发节奏。</p><h3 id="_3-java为什么是跨平台的" tabindex="-1"><a class="header-anchor" href="#_3-java为什么是跨平台的"><span>3.Java为什么是跨平台的？</span></a></h3><p>Java能支持跨平台，主要依赖于JVM关系比较大。</p><p>JVM也是一个软件，不同的平台有不同的版本。我们编写的Java源码，编译后会生成一种.class文件，称为字节码文件。Java虚拟机就是负责将字节码文件翻译成特定平台下的机器码然后运行。也就是说，只要在不同平台上安装对应的JVM，就可以运行字节码文件，运行我们编写的Java程序。</p><p>而这个过程中，我们编写的Java程序没有做任何改变，仅仅是通过JVM这一&quot;中间层”，就能在不同平台上运行，真正实现了&quot;一次编译，到处运行&quot;的目的。</p><p>JVM是一个&quot;桥梁&quot;，是一个&quot;中间件&quot;，是实现跨平台的关键，Java代码首先被编译成字节码文件，再由JVM将字节码文件翻译成机器语言，从而达到运行Java程序的目的。</p><p>编译的结果不是生成机器码，而是生成字节码，字节码不能直接运行，必须通过VM翻译成机器码才能运行。不同平台下编译生成的字节码是一样的，但是由JVM翻译成的机器码却不一样。</p><p>所以，运行Java程序必须有JVM的支持，因为编译的结果不是机器码，必须要经过JVM的再次翻译才能执行。即使你将Java程序打包成可执行文件（例如.exe），仍然需要VM的支持。</p><p>跨平台的是Java程序，不是JVM。JVM是用C/C++开发的，是编译后的机器码，不能跨平台，不同平台下需要安装不同版本的VM。</p><figure><img src="'+t+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_4-jvm、jdk、jre三者关系" tabindex="-1"><a class="header-anchor" href="#_4-jvm、jdk、jre三者关系"><span>4. JVM、JDK、JRE三者关系？</span></a></h3><figure><img src="'+s+'" alt="image-20240725230247664" tabindex="0" loading="lazy"><figcaption>image-20240725230247664</figcaption></figure><p>它们之间的关系如下：</p><ul><li>JVM是Java虚拟机，是Java程序运行的环境。它负责将Java字节码（由Java编译器生成）解释或编译成 机器码，并执行程序。JVM提供了内存管理、垃圾回收、安全性等功能，使得Java程序具备跨平台性。</li><li>JRE是Java运行时环境，是Java程序运行所需的最小环境。它包含了JVM和一组Java类库，用于支持Java程序的执行。JRE不包含开发工具，只提供Java程序运行所需的运行环境。</li><li>JDK是Java开发工具包，是开发Java程序所需的工具集合。它包含了JVM、编译器(javac)、调试器（jdb)等开发工具，以及一系列的类库（如Java标准库和开发工具库）。JDK提供了开发、编译、调试和运行Java程序所需的全部工具和环境。</li></ul><h3 id="_5-为什么java解释和编译都有" tabindex="-1"><a class="header-anchor" href="#_5-为什么java解释和编译都有"><span>5. 为什么Java解释和编译都有？</span></a></h3><p>首先在Java经过编译之后生成字节码文件，接下来进入JVM中，就有两个步骤编译和解释。 如下图：</p><figure><img src="'+r+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>这段话的意思是，Java 语言在运行时既使用了编译的方式，也使用了解释的方式，具体解释如下：</p><p><strong>编译性</strong>：</p><ul><li>Java 程序源代码首先被<strong>编译</strong>成字节码（<code>.class</code> 文件）。字节码是一种平台无关的中间表示，意味着它可以在任何安装了 Java 虚拟机（JVM）的操作系统上运行，而不需要重新编译。</li><li><strong>JIT（即时编译器）</strong>：JIT 是 JVM 的一部分，它在程序运行时将字节码转化为机器码（即具体操作系统的本地代码）。JIT 会缓存这些机器码，避免每次执行时都重新编译，这样可以提高程序的执行效率。</li></ul><p><strong>解释性</strong>：</p><ul><li><strong>解释器</strong>：在程序执行的过程中，JVM 有一个解释器，它可以逐行读取字节码并直接执行，而不需要将字节码完全转化为机器码。解释器是较为“实时”的执行方式，但相对较慢。</li><li><strong>方法调用计数器</strong>：JVM 采用一种优化机制，当某个方法被调用的次数超过一定阈值时，JIT 编译器会将该方法的字节码编译为机器码，以提高后续的执行效率。如果调用次数较少，JVM 就继续使用解释器来执行，避免不必要的编译开销。</li></ul><p><strong>混合模式</strong>：</p><ul><li>Java 的执行模式是<strong>混合型的</strong>，既有<strong>编译</strong>也有<strong>解释</strong>： <ul><li>初始阶段，字节码通常是通过解释器执行的（即逐行解释执行）。</li><li>如果某个方法被频繁调用，JIT 编译器会将该方法编译成机器码，减少重复解释的开销。</li></ul></li></ul><h3 id="_6-jvm是什么" tabindex="-1"><a class="header-anchor" href="#_6-jvm是什么"><span>6.JVM是什么</span></a></h3><p>JVM是 Java 虚拟机，其主要任务是解释自己的指令集（即字节码），并将其映射到本地的 CPU 指令集和操作系统的系统调用上。</p><p>JVM 屏蔽了与操作系统平台相关的细节，使得 Java 程序只需生成在 Java 虚拟机上运行的字节码，便可以在多个平台上无修改地运行。这也是 Java 实现“编译一次，到处运行”的根本原因。</p><h3 id="_7-编译型语言和解释型语言的区别" tabindex="-1"><a class="header-anchor" href="#_7-编译型语言和解释型语言的区别"><span>7.<strong>编译型语言和解释型语言的区别？</strong></span></a></h3><ol><li><p><strong>编译型语言：</strong></p><ul><li><strong>定义</strong>：在程序执行之前，整个源代码会被编译成机器码或字节码，生成可执行文件。</li><li><strong>执行方式</strong>：程序执行时直接运行已编译的代码，执行速度较快。</li><li><strong>特点</strong>：编译后的程序与平台紧密相关，跨平台性较差。</li><li><strong>典型语言</strong>：C、C++。</li></ul></li><li><p><strong>解释型语言：</strong></p><ul><li><strong>定义</strong>：程序执行时，源代码被逐行解释并执行，不生成独立的可执行文件。</li><li><strong>执行方式</strong>：由解释器动态解释并执行代码，通常需要源代码和解释器一起运行。</li><li><strong>特点</strong>：具有较好的跨平台性，但执行速度相对较慢。</li><li><strong>典型语言</strong>：Python、JavaScript。</li></ul></li></ol><h3 id="_8-python和java的区别" tabindex="-1"><a class="header-anchor" href="#_8-python和java的区别"><span>8.<strong>Python和Java的区别：</strong></span></a></h3><ol><li><p><strong>Java：</strong></p><ul><li>Java 是一种编译型语言，意思是你写的代码会先通过编译器转换成字节码。</li><li>这些字节码不直接运行在操作系统上，而是通过 Java 虚拟机（JVM）来执行。</li><li>这样做的好处是，Java 代码可以在任何支持 JVM 的平台上运行，所以它的跨平台性很好。</li></ul></li><li><p><strong>Python：</strong></p><ul><li>Python 是解释型语言，也就是说，代码是直接由解释器逐行翻译并执行的。</li><li>这意味着每次运行 Python 程序时，解释器都在一边翻译，一边执行，所以执行速度相对较慢。</li><li>尽管如此，Python 也有很好的跨平台性，因为它的解释器可以在不同平台上运行。</li></ul></li></ol><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h2><h3 id="_1-八种基本的数据类型" tabindex="-1"><a class="header-anchor" href="#_1-八种基本的数据类型"><span>1.八种基本的数据类型</span></a></h3><p>Java支持数据类型分为两类：<strong>基本数据类型</strong>和<strong>引用数据类型</strong>。</p><p>🔎基本数据类型共有8种，可以分为四类：</p><p>✅ <strong>数值型</strong>：<strong>整数类型</strong>：byte, short, int, long <strong>浮点数类型</strong>：float, double</p><p>✅ <strong>字符类型</strong>：char（注意 Java 用 Unicode 编码，支持国际化）</p><p>✅ <strong>布尔类型</strong>：boolean</p><figure><img src="'+e+'" alt="数据类型" tabindex="0" loading="lazy"><figcaption>数据类型</figcaption></figure><h3 id="_2-int和long是多少位-多少字节的" tabindex="-1"><a class="header-anchor" href="#_2-int和long是多少位-多少字节的"><span>2.int和long是多少位，多少字节的？</span></a></h3><p><strong>int</strong></p><ul><li><p><strong>字节数</strong>：4 个字节（32 bits）</p></li><li><p><strong>取值范围</strong>：</p><p>-2^{31} 到 2^{31} - 1</p></li></ul><p><strong>long</strong></p><ul><li><p><strong>字节数</strong>：8 个字节（64 bits）</p></li><li><p><strong>取值范围</strong>：</p><p>-2^{63} 到 2^{63} - 1</p></li></ul>',51)]))}]]),p=JSON.parse('{"path":"/Interview/Java/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E7%AF%87/1.Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E7%AF%87.html","title":"Java基础面试题","lang":"zh-CN","frontmatter":{"gitInclude":[]},"headers":[{"level":2,"title":"概念","slug":"概念","link":"#概念","children":[{"level":3,"title":"1.说一下Java的特点","slug":"_1-说一下java的特点","link":"#_1-说一下java的特点","children":[]},{"level":3,"title":"2.Java 的优势和劣势是什么？","slug":"_2-java-的优势和劣势是什么","link":"#_2-java-的优势和劣势是什么","children":[]},{"level":3,"title":"3.Java为什么是跨平台的？","slug":"_3-java为什么是跨平台的","link":"#_3-java为什么是跨平台的","children":[]},{"level":3,"title":"4. JVM、JDK、JRE三者关系？","slug":"_4-jvm、jdk、jre三者关系","link":"#_4-jvm、jdk、jre三者关系","children":[]},{"level":3,"title":"5. 为什么Java解释和编译都有？","slug":"_5-为什么java解释和编译都有","link":"#_5-为什么java解释和编译都有","children":[]},{"level":3,"title":"6.JVM是什么","slug":"_6-jvm是什么","link":"#_6-jvm是什么","children":[]},{"level":3,"title":"7.编译型语言和解释型语言的区别？","slug":"_7-编译型语言和解释型语言的区别","link":"#_7-编译型语言和解释型语言的区别","children":[]},{"level":3,"title":"8.Python和Java的区别：","slug":"_8-python和java的区别","link":"#_8-python和java的区别","children":[]}]},{"level":2,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[{"level":3,"title":"1.八种基本的数据类型","slug":"_1-八种基本的数据类型","link":"#_1-八种基本的数据类型","children":[]},{"level":3,"title":"2.int和long是多少位，多少字节的？","slug":"_2-int和long是多少位-多少字节的","link":"#_2-int和long是多少位-多少字节的","children":[]}]}],"readingTime":{"minutes":8.35,"words":2506},"filePathRelative":"Interview/Java/Java基础面试篇/1.Java基础面试篇.md","excerpt":"\\n<h2>概念</h2>\\n<h3>1.说一下Java的特点</h3>\\n<p>主要有以下的特点：</p>\\n<ul>\\n<li><strong>平台无关性</strong>：Java的“编写一次，运行无处不在\\"哲学是其最大的特点之一。Java编译器将源代码编译成\\n字节码(bytecode)，该字节码可以在任何安装了Java虚拟机（JVM)的系统上运行。</li>\\n<li><strong>面向对象</strong>：Java是一门严格的面向对象编程语言，几乎一切都是对象。面向对象编程(OOP)特性使\\n得代码更易于维护和重用，包括类(class)、对象（object)、继承(inheritance)、多态\\n(polymorphism)、抽象（abstraction)和封装(encapsulation)。</li>\\n<li><strong>内存管理</strong>：Java有自己的垃圾回收机制，自动管理内存和回收不再使用的对象。这样，开发者不需要\\n手动管理内存，从而减少内存泄漏和其他内存相关的问题。</li>\\n</ul>"}')}}]);