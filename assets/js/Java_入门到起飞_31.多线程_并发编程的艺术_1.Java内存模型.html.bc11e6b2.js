"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9853],{66262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,e]of s)a[i]=e;return a}},93963:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>l,data:()=>h});var e=a(20641);const n={},l=(0,a(66262).A)(n,[["render",function(i,s){return(0,e.uX)(),(0,e.CE)("div",null,s[0]||(s[0]=[(0,e.Fv)('<h1 id="jmm详解-java内存模型的深度解析" tabindex="-1"><a class="header-anchor" href="#jmm详解-java内存模型的深度解析"><span>JMM详解：Java内存模型的深度解析</span></a></h1><p>在多线程编程中，Java内存模型（Java Memory Model，简称JMM）是一个非常重要的概念，它决定了多个线程如何通过共享内存来进行通信、协作，并确保线程安全。在这篇文章中，我们将详细解析JMM的核心概念，包括它的原理、特性、关键字的使用以及如何处理并发问题。</p><h4 id="什么是jmm" tabindex="-1"><a class="header-anchor" href="#什么是jmm"><span>什么是JMM？</span></a></h4><p>Java内存模型（JMM）是Java虚拟机（JVM）的一部分，它定义了Java程序中多个线程如何与内存交互、如何保证数据一致性、如何确保线程安全。JMM主要解决了多线程编程中的以下问题：</p><ul><li><strong>内存可见性</strong>：一个线程对共享变量的修改，如何确保其他线程能够看到。</li><li><strong>原子性</strong>：线程对共享变量的操作，如何确保不被其他线程中断。</li><li><strong>有序性</strong>：线程对共享变量的操作，如何确保执行顺序符合预期。</li></ul><blockquote><p>JMM的目的是通过对内存的访问规则进行抽象，提供一种<strong>机制</strong>来保证多线程环境下数据的一致性和程序的正确性。</p></blockquote><h3 id="_1-jmm的基本概念" tabindex="-1"><a class="header-anchor" href="#_1-jmm的基本概念"><span>1. JMM的基本概念</span></a></h3><p>在JMM中，内存的模型可以分为两个主要部分：</p><ul><li><p><strong>主内存（Main Memory）</strong>：这是所有线程共享的内存区域，用于存储实例字段、静态字段和数组元素。主内存中的数据对所有线程可见。</p></li><li><p><strong>工作内存（Working Memory）</strong>：每个线程都有自己的工作内存，它是线程私有的，保存了该线程使用到的变量副本。线程对变量的所有操作，都必须通过工作内存来完成。</p></li></ul><p>为了理解JMM的工作原理，必须了解工作内存和主内存之间的交互：</p><ul><li>每个线程从主内存中读取共享变量的副本到工作内存中。</li><li>线程对共享变量的操作，都是在工作内存中进行的。</li><li>当线程对工作内存中的共享变量进行修改时，修改后的值必须通过特定的方式同步回主内存，以确保其他线程能够看到更新的值。</li></ul><h3 id="_2-jmm的三大特性" tabindex="-1"><a class="header-anchor" href="#_2-jmm的三大特性"><span>2. JMM的三大特性</span></a></h3><p>JMM的设计重点是确保线程间的正确通信，主要通过以下三大特性来实现：</p><h4 id="_1-原子性-atomicity" tabindex="-1"><a class="header-anchor" href="#_1-原子性-atomicity"><span>1. 原子性（Atomicity）</span></a></h4><p>原子性是指某个操作要么全部执行，要么完全不执行，不会被其他线程打断。例如，Java的基本数据类型（如<code>int</code>、<code>long</code>）在某些操作上具有原子性（例如 <code>i = 1</code> 是原子操作），但是像自增操作（<code>i++</code>）这样的复合操作则不具备原子性。</p><p>在JMM中，<code>volatile</code>关键字保证了变量的原子性，但仅限于对单一操作的原子性，对于复合操作（如<code>x++</code>）并没有原子性保障。</p><h4 id="_2-可见性-visibility" tabindex="-1"><a class="header-anchor" href="#_2-可见性-visibility"><span>2. 可见性（Visibility）</span></a></h4><p>可见性是指一个线程对共享变量的修改，如何确保其他线程能够立即看到这个修改。当一个线程修改了某个变量的值时，其他线程应该能够及时看到该变量的更新。</p><p>JMM通过禁止线程在工作内存中缓存共享变量的值，来确保共享变量的修改能够及时刷新到主内存，从而保证其他线程能够看到最新的值。常见的解决可见性问题的方式是使用<code>volatile</code>关键字。</p><h4 id="_3-有序性-ordering" tabindex="-1"><a class="header-anchor" href="#_3-有序性-ordering"><span>3. 有序性（Ordering）</span></a></h4><p>有序性是指程序中的指令执行顺序。JMM允许在不影响程序逻辑的前提下，优化指令执行顺序。指令重排是JMM的一项优化，它可以提升性能，但同时也可能会导致线程间的操作顺序发生变化，从而引发并发问题。</p><p>为了避免指令重排带来的问题，JMM提供了<code>synchronized</code>和<code>volatile</code>等同步机制来保证操作的顺序性，防止指令重排。</p><h3 id="_3-jmm的关键字" tabindex="-1"><a class="header-anchor" href="#_3-jmm的关键字"><span>3. JMM的关键字</span></a></h3><p>JMM中有几个关键字或机制，用于保证内存的可见性、原子性和有序性。</p><h4 id="_1-volatile关键字" tabindex="-1"><a class="header-anchor" href="#_1-volatile关键字"><span>1. <code>volatile</code>关键字</span></a></h4><p><code>volatile</code>关键字用来保证变量在不同线程间的可见性。当一个线程修改了被<code>volatile</code>修饰的变量的值，其他线程能够立即看到这个修改。<code>volatile</code>避免了线程对变量的缓存，从而保证了数据的及时刷新。</p><p>但需要注意的是，<code>volatile</code>并不保证操作的原子性。例如，<code>counter++</code>仍然会存在数据竞争问题，可能会导致线程安全问题。</p><h4 id="_2-synchronized关键字" tabindex="-1"><a class="header-anchor" href="#_2-synchronized关键字"><span>2. <code>synchronized</code>关键字</span></a></h4><p><code>synchronized</code>关键字用于保证同一时刻只有一个线程可以执行被同步保护的代码块。它既保证了操作的原子性，也能确保在进入同步代码块之前，其他线程能够看到修改后的数据。</p><p><code>synchronized</code>的作用不仅仅在于同步线程，它还可以通过内存屏障来保证可见性和有序性。例如，当一个线程释放了锁，另一个线程获取锁时，之前的修改会被及时刷新到主内存，确保数据一致性。</p><h4 id="_3-final关键字" tabindex="-1"><a class="header-anchor" href="#_3-final关键字"><span>3. <code>final</code>关键字</span></a></h4><p><code>final</code>关键字可以用来确保变量的不可变性。在多线程环境中，使用<code>final</code>可以保证变量的初始化安全性。对于<code>final</code>字段，JMM保证它在构造函数执行完毕后被正确地发布到其他线程，确保多线程环境下的一致性。</p><h3 id="_4-jmm中的指令重排" tabindex="-1"><a class="header-anchor" href="#_4-jmm中的指令重排"><span>4. JMM中的指令重排</span></a></h3><p>JMM允许对指令进行重排优化，以提高程序的执行效率。然而，指令重排有时可能导致多线程间的不可预测行为。JMM通过提供<code>volatile</code>和<code>synchronized</code>等关键字来防止在关键代码段中进行重排，从而保证线程间的正确通信。</p><p>例如，考虑以下代码：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">boolean</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> flag </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> method</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // Step 1</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    flag </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // Step 2</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> anotherMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (flag) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(a);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // Step 3</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>a</code>和<code>flag</code>变量可能会由于指令重排而发生顺序错乱。即<code>flag = true</code>可能先于<code>a = 1</code>执行，这会导致<code>anotherMethod</code>中检查<code>flag</code>为<code>true</code>时，仍然看到<code>a</code>的值为0。</p><p>使用<code>volatile</code>关键字可以防止这种情况，因为<code>volatile</code>禁止了重排序，保证了操作的有序性。</p><h3 id="_5-总结" tabindex="-1"><a class="header-anchor" href="#_5-总结"><span>5. 总结</span></a></h3><p>Java内存模型（JMM）是Java中并发编程的核心，它通过定义内存的结构和线程间的交互方式来保证线程安全。通过JMM，我们可以确保多线程程序中的原子性、可见性和有序性。</p><ul><li><code>volatile</code>保证了变量的可见性，但不保证原子性。</li><li><code>synchronized</code>保证了操作的原子性，且确保多线程的同步。</li><li>JMM允许对指令进行重排优化，但在必要时提供机制（如<code>synchronized</code>、<code>volatile</code>）来防止重排对程序逻辑的影响。</li></ul>',41)]))}]]),h=JSON.parse('{"path":"/Java/%E5%85%A5%E9%97%A8%E5%88%B0%E8%B5%B7%E9%A3%9E/31.%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF/1.Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.html","title":"JMM详解：Java内存模型的深度解析","lang":"zh-CN","frontmatter":{"gitInclude":[]},"headers":[{"level":3,"title":"1. JMM的基本概念","slug":"_1-jmm的基本概念","link":"#_1-jmm的基本概念","children":[]},{"level":3,"title":"2. JMM的三大特性","slug":"_2-jmm的三大特性","link":"#_2-jmm的三大特性","children":[]},{"level":3,"title":"3. JMM的关键字","slug":"_3-jmm的关键字","link":"#_3-jmm的关键字","children":[]},{"level":3,"title":"4. JMM中的指令重排","slug":"_4-jmm中的指令重排","link":"#_4-jmm中的指令重排","children":[]},{"level":3,"title":"5. 总结","slug":"_5-总结","link":"#_5-总结","children":[]}],"readingTime":{"minutes":5.95,"words":1784},"filePathRelative":"Java/入门到起飞/31.多线程/并发编程的艺术/1.Java内存模型.md","excerpt":"\\n<p>在多线程编程中，Java内存模型（Java Memory Model，简称JMM）是一个非常重要的概念，它决定了多个线程如何通过共享内存来进行通信、协作，并确保线程安全。在这篇文章中，我们将详细解析JMM的核心概念，包括它的原理、特性、关键字的使用以及如何处理并发问题。</p>\\n<h4>什么是JMM？</h4>\\n<p>Java内存模型（JMM）是Java虚拟机（JVM）的一部分，它定义了Java程序中多个线程如何与内存交互、如何保证数据一致性、如何确保线程安全。JMM主要解决了多线程编程中的以下问题：</p>\\n<ul>\\n<li><strong>内存可见性</strong>：一个线程对共享变量的修改，如何确保其他线程能够看到。</li>\\n<li><strong>原子性</strong>：线程对共享变量的操作，如何确保不被其他线程中断。</li>\\n<li><strong>有序性</strong>：线程对共享变量的操作，如何确保执行顺序符合预期。</li>\\n</ul>"}')}}]);