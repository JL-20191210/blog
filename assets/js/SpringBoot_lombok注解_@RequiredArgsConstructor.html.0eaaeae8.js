"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[75248],{66262:(s,i)=>{i.A=(s,i)=>{const e=s.__vccOpts||s;for(const[s,a]of i)e[s]=a;return e}},76714:(s,i,e)=>{e.r(i),e.d(i,{comp:()=>l,data:()=>r});var a=e(20641);const n={},l=(0,e(66262).A)(n,[["render",function(s,i){return(0,a.uX)(),(0,a.CE)("div",null,[i[0]||(i[0]=(0,a.Fv)('<h1 id="🎯-requiredargsconstructor" tabindex="-1"><a class="header-anchor" href="#🎯-requiredargsconstructor"><span>🎯 <code>@RequiredArgsConstructor</code></span></a></h1><h2 id="🔍-什么是-requiredargsconstructor" tabindex="-1"><a class="header-anchor" href="#🔍-什么是-requiredargsconstructor"><span>🔍 什么是 <code>@RequiredArgsConstructor</code></span></a></h2><p><code>@RequiredArgsConstructor</code> 是 Lombok 提供的注解，用于<strong>自动生成包含所有 <code>final</code> 字段和带 <code>@NonNull</code> 注解字段的构造函数</strong>，简化代码书写，尤其适用于 Spring 的构造函数依赖注入。</p><hr>',4)),(0,a.Q3)(" more "),i[1]||(i[1]=(0,a.Fv)('<h2 id="🌟-主要特点" tabindex="-1"><a class="header-anchor" href="#🌟-主要特点"><span>🌟 主要特点</span></a></h2><ul><li>✅ 只包含 <code>final</code> 和 <code>@NonNull</code> 字段作为参数的构造函数。</li><li>✅ 生成的构造函数帮助实现依赖注入时的<strong>依赖显式声明</strong>。</li><li>✅ 避免手写构造函数样板代码。</li><li>✅ 与 Spring 框架配合使用时非常便利，无需显式写 <code>@Autowired</code>。</li></ul><hr><h2 id="🧱-与其他-lombok-构造注解对比" tabindex="-1"><a class="header-anchor" href="#🧱-与其他-lombok-构造注解对比"><span>🧱 与其他 Lombok 构造注解对比</span></a></h2><table><thead><tr><th>注解</th><th>生成构造函数参数字段</th></tr></thead><tbody><tr><td><code>@NoArgsConstructor</code></td><td>无参数构造函数</td></tr><tr><td><code>@AllArgsConstructor</code></td><td>所有字段（包括非 <code>final</code>）</td></tr><tr><td><code>@RequiredArgsConstructor</code></td><td>仅 <code>final</code> 和 <code>@NonNull</code> 字段</td></tr></tbody></table><hr><h2 id="🛠️-作用" tabindex="-1"><a class="header-anchor" href="#🛠️-作用"><span>🛠️ 作用</span></a></h2><blockquote><p>💡 使用了 Lombok 的 <code>@RequiredArgsConstructor</code> 注解后，<strong>无需再在构造函数或字段上写 <code>@Autowired</code> 注解</strong>，Spring 容器依然可以正确完成依赖注入。</p></blockquote><h3 id="🧾-传统写法-需要写-autowired" tabindex="-1"><a class="header-anchor" href="#🧾-传统写法-需要写-autowired"><span>🧾 传统写法（需要写 <code>@Autowired</code>）</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Service</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserMapper</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> userMapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Autowired</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> UserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">UserMapper</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> userMapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">userMapper</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> userMapper;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="✅-使用-requiredargsconstructor-无需写-autowired" tabindex="-1"><a class="header-anchor" href="#✅-使用-requiredargsconstructor-无需写-autowired"><span>✅ 使用 <code>@RequiredArgsConstructor</code>（无需写 <code>@Autowired</code>）</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Service</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RequiredArgsConstructor</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserMapper</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> userMapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="📦-使用示例" tabindex="-1"><a class="header-anchor" href="#📦-使用示例"><span>📦 使用示例</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Service</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RequiredArgsConstructor</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> UserMapper</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> userMapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> OrderMapper</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> orderMapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Lombok 自动生成如下构造函数：</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // public UserService(UserMapper userMapper, OrderMapper orderMapper) { ... }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>📌 Spring 容器会自动调用生成的构造函数完成依赖注入。</p><hr><h2 id="🌈-优势" tabindex="-1"><a class="header-anchor" href="#🌈-优势"><span>🌈 优势</span></a></h2><ul><li>✅ <strong>简化代码结构</strong>：无需手写构造函数和 <code>@Autowired</code> 注解，减少样板代码。</li><li>✅ <strong>依赖关系清晰</strong>：所有依赖通过构造函数暴露，避免依赖“隐藏”在字段中。</li><li>✅ <strong>提升代码安全性</strong>：构造注入支持 <code>final</code> 字段，避免依赖被误修改，符合不可变设计原则。</li><li>✅ <strong>便于单元测试</strong>：可直接通过构造函数传入 mock 对象，无需依赖 Spring 容器。</li><li>✅ <strong>自动空值检查（配合 @NonNull）</strong>：防止运行时出现 <code>NullPointerException</code>。</li><li>✅ <strong>充分利用 Spring 自动注入机制</strong>：Spring 会自动识别唯一构造函数，无需手动标注 <code>@Autowired</code>。</li><li>✅ <strong>降低出错概率</strong>：由 Lombok 自动生成构造函数，避免漏注、参数顺序错等问题。</li><li>✅ <strong>统一团队代码风格</strong>：团队内统一使用构造注入，代码规范清晰一致。</li><li>✅ <strong>与依赖倒置原则契合</strong>：通过构造器暴露依赖，更符合 SOLID 原则中的 DIP（依赖倒置原则）。</li></ul><hr><h2 id="⚠️-注意事项" tabindex="-1"><a class="header-anchor" href="#⚠️-注意事项"><span>⚠️ 注意事项</span></a></h2><ul><li>📦 需要添加 Lombok 依赖，并在 IDE 中安装 Lombok 插件。</li><li>🔧 如果类中有多个构造函数或特殊需求，可以结合使用其他构造注解。</li><li>🧊 如果需要无参构造函数（例如序列化），需显式添加 <code>@NoArgsConstructor</code>。</li><li>✋ 手动编写构造函数会阻止 Lombok 生成对应构造函数。</li></ul><hr><h2 id="✅-总结" tabindex="-1"><a class="header-anchor" href="#✅-总结"><span>✅ 总结</span></a></h2><blockquote><p><code>@RequiredArgsConstructor</code> 是简化 Spring 构造函数注入的利器，让依赖声明更清晰、代码更简洁、易于维护，是现代 Java 开发的常用实践。</p></blockquote>',25))])}]]),r=JSON.parse('{"path":"/SpringBoot/lombok%E6%B3%A8%E8%A7%A3/@RequiredArgsConstructor.html","title":"RequiredArgsConstructor","lang":"zh-CN","frontmatter":{"title":"RequiredArgsConstructor","icon":"fa-solid fa-code","date":"2025-07-10T00:00:00.000Z","author":"JeanHu","category":["Java","Lombok"],"tag":["Lombok","注解","构造函数","自动生成"],"summary":"本文介绍 Lombok 提供的 @RequiredArgsConstructor 注解的作用、使用方式与注意事项，帮助开发者简化代码并提升构造器管理效率。","gitInclude":[]},"headers":[{"level":2,"title":"🔍 什么是 @RequiredArgsConstructor","slug":"🔍-什么是-requiredargsconstructor","link":"#🔍-什么是-requiredargsconstructor","children":[]},{"level":2,"title":"🌟 主要特点","slug":"🌟-主要特点","link":"#🌟-主要特点","children":[]},{"level":2,"title":"🧱 与其他 Lombok 构造注解对比","slug":"🧱-与其他-lombok-构造注解对比","link":"#🧱-与其他-lombok-构造注解对比","children":[]},{"level":2,"title":"🛠️ 作用","slug":"🛠️-作用","link":"#🛠️-作用","children":[{"level":3,"title":"🧾 传统写法（需要写 @Autowired）","slug":"🧾-传统写法-需要写-autowired","link":"#🧾-传统写法-需要写-autowired","children":[]},{"level":3,"title":"✅ 使用 @RequiredArgsConstructor（无需写 @Autowired）","slug":"✅-使用-requiredargsconstructor-无需写-autowired","link":"#✅-使用-requiredargsconstructor-无需写-autowired","children":[]}]},{"level":2,"title":"📦 使用示例","slug":"📦-使用示例","link":"#📦-使用示例","children":[]},{"level":2,"title":"🌈 优势","slug":"🌈-优势","link":"#🌈-优势","children":[]},{"level":2,"title":"⚠️ 注意事项","slug":"⚠️-注意事项","link":"#⚠️-注意事项","children":[]},{"level":2,"title":"✅ 总结","slug":"✅-总结","link":"#✅-总结","children":[]}],"readingTime":{"minutes":2.59,"words":776},"filePathRelative":"SpringBoot/lombok注解/@RequiredArgsConstructor.md","localizedDate":"2025年7月10日","excerpt":"\\n<h2>🔍 什么是 <code>@RequiredArgsConstructor</code></h2>\\n<p><code>@RequiredArgsConstructor</code> 是 Lombok 提供的注解，用于<strong>自动生成包含所有 <code>final</code> 字段和带 <code>@NonNull</code> 注解字段的构造函数</strong>，简化代码书写，尤其适用于 Spring 的构造函数依赖注入。</p>\\n<hr>\\n"}')}}]);