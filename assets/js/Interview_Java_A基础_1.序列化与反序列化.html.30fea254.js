"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[25921],{66262:(a,e)=>{e.A=(a,e)=>{const i=a.__vccOpts||a;for(const[a,t]of e)i[a]=t;return i}},76384:(a,e,i)=>{i.r(e),i.d(e,{comp:()=>n,data:()=>r});var t=i(20641);const o={},n=(0,i(66262).A)(o,[["render",function(a,e){return(0,t.uX)(),(0,t.CE)("div",null,e[0]||(e[0]=[(0,t.Fv)('<h1 id="_1-序列化与反序列化" tabindex="-1"><a class="header-anchor" href="#_1-序列化与反序列化"><span>1.序列化与反序列化</span></a></h1><div class="hint-container important"><p class="hint-container-title">重要</p><p>序列化是将对象转换为字节流的过程，使对象能够通过网络传输，进行持久化存储或者缓存。Java提供了<code>java.io.serializable</code>接口来支持序列化，只要类实现了该接口，类的实例化对象就能进行序列化。</p><p>反序列化是将字节流重新转化为对象的过程，即从存储中读取数据并重新创建对象。</p><p>每一个实现序列化接口的类都要定义一个<code>serialVersionUID</code>，用于反序列化时验证版本一致性。版本不匹配会导致反序列化失败。若不指定<code>serialVersionUID</code>，Java会根据类的定义自动hash生成一个。不需要进行序列化的成员属性变量可使用<code>transient</code>关键字修饰。</p><p>Java中对应序列化，反序列化机制在java.io包中在顶级父类下封装了ObjectOutputStream类，作用是将Java对象的原始数据类型以流的方式写出到文件,实现对象的持久存储；ObjectInputStream类，作用是把文件中保存的对象,以流的方式读取出来使用。</p><p>Java中默认序列化框架<code>JDK Serializable</code>比较慢，对于大规模分布式系统，选择更加高效的序列化框架（FST， Kryo，Protocol buffer，Thrift，Hessian）</p><p>在身份验证，文件读写，数据传输等功能处，在未对反序列化接口做访问控制，未对序列化数据做加密和签名，加密密钥使用硬编码（如Shiro 1.2.4），使用不安全的反序列化框架库（如Fastjson 1.2.24）或函数的情况下，由于序列化数据可被用户控制，攻击者可以精心构造恶意的序列化数据（执行特定代码或命令的数据）传递给应用程序，在应用程序反序列化对象时执行攻击者构造的恶意代码，达到攻击者的目的。</p></div><ol><li>序列化定义</li><li>反序列化定义</li><li>序列化使用</li><li>涉及类和接口</li><li>序列化框架</li><li>安全问题，反序列化漏洞</li></ol>',3)]))}]]),r=JSON.parse('{"path":"/Interview/Java/A%E5%9F%BA%E7%A1%80/1.%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96.html","title":"1.序列化与反序列化","lang":"zh-CN","frontmatter":{"icon":"fa-brands fa-java","date":"2025-01-08T00:00:00.000Z","category":["Java"],"tag":["必背"],"gitInclude":[]},"headers":[],"readingTime":{"minutes":1.85,"words":555},"filePathRelative":"Interview/Java/A基础/1.序列化与反序列化.md","localizedDate":"2025年1月8日","excerpt":"\\n<div class=\\"hint-container important\\">\\n<p class=\\"hint-container-title\\">重要</p>\\n<p>序列化是将对象转换为字节流的过程，使对象能够通过网络传输，进行持久化存储或者缓存。Java提供了<code>java.io.serializable</code>接口来支持序列化，只要类实现了该接口，类的实例化对象就能进行序列化。</p>\\n<p>反序列化是将字节流重新转化为对象的过程，即从存储中读取数据并重新创建对象。</p>\\n<p>每一个实现序列化接口的类都要定义一个<code>serialVersionUID</code>，用于反序列化时验证版本一致性。版本不匹配会导致反序列化失败。若不指定<code>serialVersionUID</code>，Java会根据类的定义自动hash生成一个。不需要进行序列化的成员属性变量可使用<code>transient</code>关键字修饰。</p>\\n<p>Java中对应序列化，反序列化机制在java.io包中在顶级父类下封装了ObjectOutputStream类，作用是将Java对象的原始数据类型以流的方式写出到文件,实现对象的持久存储；ObjectInputStream类，作用是把文件中保存的对象,以流的方式读取出来使用。</p>\\n<p>Java中默认序列化框架<code>JDK Serializable</code>比较慢，对于大规模分布式系统，选择更加高效的序列化框架（FST， Kryo，Protocol buffer，Thrift，Hessian）</p>\\n<p>在身份验证，文件读写，数据传输等功能处，在未对反序列化接口做访问控制，未对序列化数据做加密和签名，加密密钥使用硬编码（如Shiro 1.2.4），使用不安全的反序列化框架库（如Fastjson 1.2.24）或函数的情况下，由于序列化数据可被用户控制，攻击者可以精心构造恶意的序列化数据（执行特定代码或命令的数据）传递给应用程序，在应用程序反序列化对象时执行攻击者构造的恶意代码，达到攻击者的目的。</p>\\n</div>"}')}}]);