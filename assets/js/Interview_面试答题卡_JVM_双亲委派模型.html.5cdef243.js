"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[84861],{66262:(s,i)=>{i.A=(s,i)=>{const a=s.__vccOpts||s;for(const[s,n]of i)a[s]=n;return a}},70828:(s,i,a)=>{a.r(i),a.d(i,{comp:()=>e,data:()=>t});var n=a(20641);const l={},e=(0,a(66262).A)(l,[["render",function(s,i){return(0,n.uX)(),(0,n.CE)("div",null,i[0]||(i[0]=[(0,n.Fv)('<h1 id="☕-jvm面试答题卡-双亲委派模型-parent-delegation-model" tabindex="-1"><a class="header-anchor" href="#☕-jvm面试答题卡-双亲委派模型-parent-delegation-model"><span>☕ JVM面试答题卡：双亲委派模型（Parent Delegation Model）</span></a></h1><h2 id="✅-一句话概括" tabindex="-1"><a class="header-anchor" href="#✅-一句话概括"><span>✅ 一句话概括</span></a></h2><blockquote><p>双亲委派模型是一种类加载机制，每个类加载器在加载类时，<strong>优先委托其父加载器</strong>，父加载器无法完成加载时，才由当前加载器尝试加载，从而保证 Java 核心类的安全和唯一性。</p></blockquote><h2 id="🧱-1-类加载器层级结构" tabindex="-1"><a class="header-anchor" href="#🧱-1-类加载器层级结构"><span>🧱 1. 类加载器层级结构</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>BootstrapClassLoader（启动类加载器）</span></span>\n<span class="line"><span>            ↓</span></span>\n<span class="line"><span> ExtensionClassLoader（扩展类加载器）</span></span>\n<span class="line"><span>            ↓</span></span>\n<span class="line"><span>AppClassLoader（应用类加载器）</span></span>\n<span class="line"><span>            ↓</span></span>\n<span class="line"><span>用户自定义 ClassLoader（程序员手动实现）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="✅-2-什么是双亲委派模型" tabindex="-1"><a class="header-anchor" href="#✅-2-什么是双亲委派模型"><span>✅ 2. 什么是双亲委派模型？</span></a></h2><p>当类加载器收到类加载请求时的逻辑：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" data-title="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>当前 ClassLoader.loadClass(name) →</span></span>\n<span class="line"><span>    尝试 parent.loadClass(name) →</span></span>\n<span class="line"><span>        一直到 BootstrapClassLoader →</span></span>\n<span class="line"><span>            如果父类加载器加载失败 →</span></span>\n<span class="line"><span>                当前加载器尝试加载</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>即：<strong>向上委托、失败下沉</strong></p><hr><h2 id="✅-3-为什么使用双亲委派模型" tabindex="-1"><a class="header-anchor" href="#✅-3-为什么使用双亲委派模型"><span>✅ 3. 为什么使用双亲委派模型？</span></a></h2><table><thead><tr><th>目的</th><th>说明</th></tr></thead><tbody><tr><td>✅ 保证核心类唯一性</td><td>如 <code>java.lang.String</code> 始终由 Bootstrap 加载，防止重复加载或被篡改</td></tr><tr><td>✅ 避免类重复加载</td><td>每个类加载器维护自己的命名空间，避免类冲突</td></tr><tr><td>✅ 实现类的隔离与安全</td><td>用户类无法加载或替换 JVM 核心类</td></tr></tbody></table><hr><h2 id="🧪-4-示例验证加载器顺序" tabindex="-1"><a class="header-anchor" href="#🧪-4-示例验证加载器顺序"><span>🧪 4. 示例验证加载器顺序</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ClassLoader</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> cl </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> MyClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getClassLoader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(cl);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                     // AppClassLoader</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">cl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getParent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         // ExtClassLoader</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">cl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getParent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getParent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // null（Bootstrap 是 C++ 实现）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="🧩-5-自定义类加载器实现-简化版" tabindex="-1"><a class="header-anchor" href="#🧩-5-自定义类加载器实现-简化版"><span>🧩 5. 自定义类加载器实现（简化版）</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">protected</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Class</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> loadClass</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> boolean</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> resolve) throws ClassNotFoundException {</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Class</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> c </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> findLoadedClass</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(name)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (c </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            c </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getParent</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">loadClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(name);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 委托父类加载</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ClassNotFoundException</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            c </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> findClass</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(name)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 自己加载</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (resolve) {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        resolveClass</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(c)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="🚫-6-双亲委派失效的典型场景" tabindex="-1"><a class="header-anchor" href="#🚫-6-双亲委派失效的典型场景"><span>🚫 6. 双亲委派失效的典型场景</span></a></h2><table><thead><tr><th>场景</th><th>说明</th></tr></thead><tbody><tr><td>自定义类加载器绕过 parent</td><td>一些框架如 Tomcat、JSP 使用自己的加载机制</td></tr><tr><td>SPI 机制（ServiceLoader）</td><td>使用线程上下文类加载器代替系统类加载器</td></tr><tr><td>多版本隔离/插件机制</td><td>热部署、模块化开发中打破双亲委派</td></tr></tbody></table><hr><h2 id="✅-7-面试答题模板-建议背诵" tabindex="-1"><a class="header-anchor" href="#✅-7-面试答题模板-建议背诵"><span>✅ 7. 面试答题模板（建议背诵）</span></a></h2><blockquote><p>Java 的类加载器采用双亲委派模型，即每个类加载器在加载类时，首先委托其父加载器加载，父加载器无法完成时，当前加载器才会尝试加载。这样可以确保核心类如 <code>java.lang.Object</code>、<code>String</code> 只会被启动类加载器加载，防止重复加载或被篡改。虽然默认使用双亲委派，但在某些框架中为了实现类隔离（如插件系统）会打破这一机制。</p></blockquote>',25)]))}]]),t=JSON.parse('{"path":"/Interview/%E9%9D%A2%E8%AF%95%E7%AD%94%E9%A2%98%E5%8D%A1/JVM/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B.html","title":"☕ JVM面试答题卡：双亲委派模型（Parent Delegation Model）","lang":"zh-CN","frontmatter":{"gitInclude":[]},"headers":[{"level":2,"title":"✅ 一句话概括","slug":"✅-一句话概括","link":"#✅-一句话概括","children":[]},{"level":2,"title":"🧱 1. 类加载器层级结构","slug":"🧱-1-类加载器层级结构","link":"#🧱-1-类加载器层级结构","children":[]},{"level":2,"title":"✅ 2. 什么是双亲委派模型？","slug":"✅-2-什么是双亲委派模型","link":"#✅-2-什么是双亲委派模型","children":[]},{"level":2,"title":"✅ 3. 为什么使用双亲委派模型？","slug":"✅-3-为什么使用双亲委派模型","link":"#✅-3-为什么使用双亲委派模型","children":[]},{"level":2,"title":"🧪 4. 示例验证加载器顺序","slug":"🧪-4-示例验证加载器顺序","link":"#🧪-4-示例验证加载器顺序","children":[]},{"level":2,"title":"🧩 5. 自定义类加载器实现（简化版）","slug":"🧩-5-自定义类加载器实现-简化版","link":"#🧩-5-自定义类加载器实现-简化版","children":[]},{"level":2,"title":"🚫 6. 双亲委派失效的典型场景","slug":"🚫-6-双亲委派失效的典型场景","link":"#🚫-6-双亲委派失效的典型场景","children":[]},{"level":2,"title":"✅ 7. 面试答题模板（建议背诵）","slug":"✅-7-面试答题模板-建议背诵","link":"#✅-7-面试答题模板-建议背诵","children":[]}],"readingTime":{"minutes":2.04,"words":613},"filePathRelative":"Interview/面试答题卡/JVM/双亲委派模型.md","excerpt":"\\n<h2>✅ 一句话概括</h2>\\n<blockquote>\\n<p>双亲委派模型是一种类加载机制，每个类加载器在加载类时，<strong>优先委托其父加载器</strong>，父加载器无法完成加载时，才由当前加载器尝试加载，从而保证 Java 核心类的安全和唯一性。</p>\\n</blockquote>\\n<h2>🧱 1. 类加载器层级结构</h2>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>BootstrapClassLoader（启动类加载器）</span></span>\\n<span class=\\"line\\"><span>            ↓</span></span>\\n<span class=\\"line\\"><span> ExtensionClassLoader（扩展类加载器）</span></span>\\n<span class=\\"line\\"><span>            ↓</span></span>\\n<span class=\\"line\\"><span>AppClassLoader（应用类加载器）</span></span>\\n<span class=\\"line\\"><span>            ↓</span></span>\\n<span class=\\"line\\"><span>用户自定义 ClassLoader（程序员手动实现）</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}')}}]);