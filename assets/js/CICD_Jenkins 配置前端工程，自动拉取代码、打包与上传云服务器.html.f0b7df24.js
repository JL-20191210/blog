"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[39420],{66262:(i,e)=>{e.A=(i,e)=>{const n=i.__vccOpts||i;for(const[i,o]of e)n[i]=o;return n}},55206:(i,e,n)=>{n.r(e),n.d(e,{comp:()=>s,data:()=>l});var o=n(20641);const g={},s=(0,n(66262).A)(g,[["render",function(i,e){return(0,o.uX)(),(0,o.CE)("div",null,[e[0]||(e[0]=(0,o.Fv)('<p>title: Jenkins配置后端 date: 2025-04-06 category:</p><ul><li>DevOps tag:</li><li>CICD</li></ul><hr><hr><h1 id="jenkins-配置前端工程-自动拉取代码、打包与上传云服务器" tabindex="-1"><a class="header-anchor" href="#jenkins-配置前端工程-自动拉取代码、打包与上传云服务器"><span>Jenkins 配置前端工程，自动拉取代码、打包与上传云服务器</span></a></h1><p>本小节中，将演示如何在 <code>Jenkins</code> 中配置一键部署 <code>weblog</code> <strong>前端工程</strong>，流程中包括拉取最新的 <code>master</code> 分支代码、执行 <code>npm run build</code> 打包，并最终连接云服务器，上传 <code>/dist</code> 文件夹下所有文件至 <code>Nginx</code> 静态文件目录下。</p>',6)),(0,o.Q3)(" more "),e[1]||(e[1]=(0,o.Fv)('<h2 id="_1-创建-job" tabindex="-1"><a class="header-anchor" href="#_1-创建-job"><span>1. 创建 Job</span></a></h2><p>首先，在 <code>Jenkins</code> 首页中，点击点击左侧栏的 <em>新建任务</em>：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061726172.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>输入任务名称，取名为 <code>weblog-vue3</code> , 选择 <em>Freestyle project</em> 自由类型的项目，点击<em>确定</em>按钮：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061726258.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>进入到 <code>weblog-vue3</code> 任务的具体配置环节，先给这个任务填写描述文字，如下图所示：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061726210.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_2-配置-git-源码管理" tabindex="-1"><a class="header-anchor" href="#_2-配置-git-源码管理"><span>2. 配置 Git 源码管理</span></a></h2><p>接着，进入到源码管理的配置，如下图所示：</p><blockquote><p>TIP : 和上小节配置后端的步骤一致，这一块就直接复制过来了。</p></blockquote><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061726573.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><ul><li><p>①： Git 仓库的地址，可以在 Gitee 中该仓库主页，复制其仓库地址；</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061726050.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure></li><li><p>②：配置 Gitee 的登录账号、密码（未配置，或者登录信息不正确，会提示<em>无法连接仓库</em>）；</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061726167.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure></li></ul></blockquote><p>添加完成后，若账号、密码正确，则<em>无法连接仓库</em>的错误信息会自动消失。在 Credentials 选项中，选择刚刚配置好的登录账号/密码，指定拉取 <code>master</code> 主分支的代码，最后点击<em>保存</em>：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061727302.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_3-构建任务" tabindex="-1"><a class="header-anchor" href="#_3-构建任务"><span>3. 构建任务</span></a></h2><p>配置完成后，回到首页中，针对 <code>weblog-vue3</code> 任务，点击右侧的<em>运行</em>按钮，开始构建：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061727967.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>点击左侧正在构建的任务，再点击<em>控制台输出</em>，即可实时查看构建日志：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061727788.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>解释一下构建日志关键的几个地方：</p><ul><li>①：表示<strong>构建空间</strong>的路径在 <code>/var/jenkins_home/workspace/weblog-vue3</code> 目录下，根据之前运行容器时指定的挂载路径，即为宿主机中的 <code>E:\\docker\\jenkins2\\jenkins_home\\workspace\\weblog-vue3</code> 目录；</li><li>②：拉取远程仓库的最新代码，对应的提交信息，可以依此来判断拉取的，是不是最新的代码；</li><li>③：构建完毕；</li></ul></blockquote><p>任务执行成功后，进入到 <code>E:\\docker\\jenkins2\\jenkins_home\\workspace\\</code>工作空间下，即可看到新建的任务了，点击进去即可看到最新拉取的代码了：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061727714.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_4-安装-nodejs-插件" tabindex="-1"><a class="header-anchor" href="#_4-安装-nodejs-插件"><span>4. 安装 NodeJS 插件</span></a></h2><p>前端代码拉取完毕后，就轮到打包环节了。这里需要先给 <code>jenkins</code> 容器安装上 <code>nodejs</code> 环境，回到首页，点击 <em>系统管理 | 插件管理 | Available Plugins</em> , 输入关键词 <em>nodejs</em> , 勾选上点击安装：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061727525.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>勾选<em>安装完成后重启 Jenkins</em> , 等待安装完成，观察容器是否运行，若停止了则表示插件安装成功了，这个时候，手动重启一下 <code>jenkins</code> 容器：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061727989.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_5-全局配置-nodejs" tabindex="-1"><a class="header-anchor" href="#_5-全局配置-nodejs"><span>5. 全局配置 NodeJS</span></a></h2><p>重新进入 <code>jenkins</code> 后台，点击 <em>系统管理 | 全局工具配置</em> ，找到 <em>NodeJS 安装</em>，开始配置：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061727799.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><ul><li>填写 <code>nodejs</code> 的别名；</li><li>勾选<strong>自动安装</strong>；</li></ul><blockquote><p>TIP : 如果碰到 <code>nodejs</code> 自动安装失败的情况，可参考球友分享的这篇帖子：https://t.zsxq.com/162Vkp9fr</p></blockquote><ul><li>版本这里选择的是，最新的 <code>NodeJS 21.5.0</code> 版本；</li><li>点击<strong>保存</strong>；</li></ul></blockquote><h2 id="_6-配置前端打包" tabindex="-1"><a class="header-anchor" href="#_6-配置前端打包"><span>6. 配置前端打包</span></a></h2><p><code>nodejs</code> 环境配置完成后，继续配置 <code>weblog-vue3</code> 任务，在<em>构建环境</em>选项中，勾选上 <em>Provide Node &amp; npm bin/folder to PATH</em> , 版本选择刚刚配置好的 <code>nodejs21</code> , 如下图所示：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061727905.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>接着，点击 <em>增加构建步骤 | 执行 shell</em> :</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061727542.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>输入 <code>shell</code> 命令如下，命令也很简单，首先进入到前端工程的根目录下，先安装相关依赖包，再执行打包命令：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061727371.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /var/jenkins_home/workspace/weblog-vue3/weblog-vue3</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>点击保存后，回到首页，点击运行 <code>weblog-vue3</code> 构建任务，查看构建日志如下，若提示如下信息，则表示前端打包成功了：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061727148.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>TIP : 第一次构建需要安装 <code>nodejs</code> 环境，可能比较慢，请耐心等待其安装完毕。</p></blockquote><p>任务构建完完成后，进入到 <code>E:\\docker\\jenkins2\\jenkins_home\\workspace\\weblog-vue3\\weblog-vue3</code> 目录下，查看是否有 <code>/dist</code> 文件夹，来确认一下是否真的打包成功了：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061727617.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="_7-上传前端文件至-nginx-静态目录" tabindex="-1"><a class="header-anchor" href="#_7-上传前端文件至-nginx-静态目录"><span>7. 上传前端文件至 Nginx 静态目录</span></a></h2><p>打包完成后，继续配置 <code>weblog-vue3</code> 构建任务，在执行 <code>shell</code> 脚本任务后面，点击<em>增加构建步骤</em> ，选择 <em>Send files or execute commands over SSH</em> :</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061727610.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>①： 选择要上传的云服务器；</p><p>②：需要上传的源文件，这里是 <code>/dist</code> 文件夹下的所有文件；</p><p>③： 删除文件夹前缀；</p><p>④：需要上传到云服务器哪个目录下；</p><p>⑤：点击保存；</p></blockquote><p>保存后，回到首页，再次点击构建 <code>weblog-vue3</code> 任务，并查看构建日志，如下图所示：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061727543.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>若看到类似 <code>Transferred 116 files</code> 信息，则表示上传成功了 116 个文件。也可以进入到云服务器中 <code>/docker/nginx/html</code> 目录下，查看相关文件的更新时间，若是最新的时间，表示是刚刚上传上去的：</p><figure><img src="https://felix-docs.oss-cn-beijing.aliyuncs.com/gitblogimg/202504061727169.jpeg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>至此，通过 <code>Jenkins</code> 一键拉取远程仓库的前端 <code>master</code> 分支代码，执行 <code>npm run build</code> 打包，并上传到云服务器中 <code>nginx</code> 静态目录下的工作就完成了。</p>',53))])}]]),l=JSON.parse('{"path":"/CICD/Jenkins%20%E9%85%8D%E7%BD%AE%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%EF%BC%8C%E8%87%AA%E5%8A%A8%E6%8B%89%E5%8F%96%E4%BB%A3%E7%A0%81%E3%80%81%E6%89%93%E5%8C%85%E4%B8%8E%E4%B8%8A%E4%BC%A0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8.html","title":"Jenkins配置后端","lang":"zh-CN","frontmatter":{"title":"Jenkins配置后端","date":"2025-04-06T00:00:00.000Z","category":["DevOps"],"tag":["CICD"],"gitInclude":[]},"headers":[{"level":2,"title":"1. 创建 Job","slug":"_1-创建-job","link":"#_1-创建-job","children":[]},{"level":2,"title":"2. 配置 Git 源码管理","slug":"_2-配置-git-源码管理","link":"#_2-配置-git-源码管理","children":[]},{"level":2,"title":"3. 构建任务","slug":"_3-构建任务","link":"#_3-构建任务","children":[]},{"level":2,"title":"4. 安装 NodeJS 插件","slug":"_4-安装-nodejs-插件","link":"#_4-安装-nodejs-插件","children":[]},{"level":2,"title":"5. 全局配置 NodeJS","slug":"_5-全局配置-nodejs","link":"#_5-全局配置-nodejs","children":[]},{"level":2,"title":"6. 配置前端打包","slug":"_6-配置前端打包","link":"#_6-配置前端打包","children":[]},{"level":2,"title":"7. 上传前端文件至 Nginx 静态目录","slug":"_7-上传前端文件至-nginx-静态目录","link":"#_7-上传前端文件至-nginx-静态目录","children":[]}],"readingTime":{"minutes":4.73,"words":1420},"filePathRelative":"CICD/Jenkins 配置前端工程，自动拉取代码、打包与上传云服务器.md","localizedDate":"2025年4月6日","excerpt":"<p>title: Jenkins配置后端\\ndate: 2025-04-06\\ncategory:</p>\\n<ul>\\n<li>DevOps\\ntag:</li>\\n<li>CICD</li>\\n</ul>\\n<hr>\\n<hr>\\n<h1>Jenkins 配置前端工程，自动拉取代码、打包与上传云服务器</h1>\\n<p>本小节中，将演示如何在 <code>Jenkins</code> 中配置一键部署 <code>weblog</code> <strong>前端工程</strong>，流程中包括拉取最新的 <code>master</code> 分支代码、执行 <code>npm run build</code> 打包，并最终连接云服务器，上传 <code>/dist</code> 文件夹下所有文件至 <code>Nginx</code> 静态文件目录下。</p>\\n"}')}}]);