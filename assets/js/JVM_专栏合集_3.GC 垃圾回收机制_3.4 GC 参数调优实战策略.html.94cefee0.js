"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[7711],{66262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,e]of s)a[i]=e;return a}},55556:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>t,data:()=>n});var e=a(20641);const l={},t=(0,a(66262).A)(l,[["render",function(i,s){return(0,e.uX)(),(0,e.CE)("div",null,s[0]||(s[0]=[(0,e.Fv)('<h1 id="🛠️-3-4-gc-参数调优实战策略" tabindex="-1"><a class="header-anchor" href="#🛠️-3-4-gc-参数调优实战策略"><span>🛠️ 3.4 GC 参数调优实战策略</span></a></h1><p>掌握垃圾收集器本身还不够，真实项目中需要根据业务场景、硬件配置、内存分布特点等，灵活调整 GC 参数，以减少 STW 停顿、避免 Full GC、提高吞吐能力。</p><hr><h2 id="📦-gc-调优的四个核心指标" tabindex="-1"><a class="header-anchor" href="#📦-gc-调优的四个核心指标"><span>📦 GC 调优的四个核心指标</span></a></h2><table><thead><tr><th>目标</th><th>说明</th></tr></thead><tbody><tr><td>停顿时间</td><td>控制用户线程暂停时间（STW）</td></tr><tr><td>吞吐量</td><td>程序运行时间 /（运行时间 + GC 时间）</td></tr><tr><td>CPU 占用</td><td>GC 线程是否抢占系统核心资源</td></tr><tr><td>内存占用</td><td>是否高效利用堆内存、避免频繁 GC</td></tr></tbody></table><hr><h2 id="📌-常见调优参数分类" tabindex="-1"><a class="header-anchor" href="#📌-常见调优参数分类"><span>📌 常见调优参数分类</span></a></h2><h3 id="_1-堆大小配置" tabindex="-1"><a class="header-anchor" href="#_1-堆大小配置"><span>1. 堆大小配置</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-Xms1g</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">               # 初始堆大小</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-Xmx2g</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">               # 最大堆大小</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Xms = Xmx</code> 可避免动态扩容带来的停顿</li></ul><h3 id="_2-新生代与老年代比例" tabindex="-1"><a class="header-anchor" href="#_2-新生代与老年代比例"><span>2. 新生代与老年代比例</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-XX:NewRatio</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=2</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">       # 老年代 : 新生代 = 2:1</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-XX:SurvivorRatio</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=8</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # Eden : Survivor = 8:1:1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-gc-行为相关" tabindex="-1"><a class="header-anchor" href="#_3-gc-行为相关"><span>3. GC 行为相关</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-XX:+UseG1GC</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-XX:MaxGCPauseMillis</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=200</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">       # 目标最大停顿时间（G1）</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-XX:InitiatingHeapOccupancyPercent</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=45</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # G1 Mixed GC 触发比例</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="🔍-示例-大内存系统中的-g1-配置" tabindex="-1"><a class="header-anchor" href="#🔍-示例-大内存系统中的-g1-配置"><span>🔍 示例：大内存系统中的 G1 配置</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-Xms4g</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-Xmx4g</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-XX:+UseG1GC</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-XX:MaxGCPauseMillis</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=150</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-XX:ParallelGCThreads</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=8</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-XX:ConcGCThreads</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=4</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-XX:InitiatingHeapOccupancyPercent</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=30</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">-XX:G1ReservePercent</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=10</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>📌 含义：</p><ul><li>保证内存不扩容，减少 GC</li><li>设置目标停顿时间 150ms，适合电商类系统</li><li>控制 G1 的并发行为与保留空间，防止 Full GC</li></ul><hr><h2 id="🎯-分场景调优建议" tabindex="-1"><a class="header-anchor" href="#🎯-分场景调优建议"><span>🎯 分场景调优建议</span></a></h2><h3 id="✅-响应延迟敏感-电商-交易类" tabindex="-1"><a class="header-anchor" href="#✅-响应延迟敏感-电商-交易类"><span>✅ 响应延迟敏感（电商/交易类）</span></a></h3><ul><li>使用 G1/ZGC/Shenandoah</li><li>设置 <code>MaxGCPauseMillis</code>，合理调 Survivor 区</li><li>减少 Full GC：调整晋升阈值、对象预估大小</li></ul><h3 id="✅-吞吐优先型-大数据-日志" tabindex="-1"><a class="header-anchor" href="#✅-吞吐优先型-大数据-日志"><span>✅ 吞吐优先型（大数据/日志）</span></a></h3><ul><li>CMS/G1</li><li>设置 <code>ParallelGCThreads</code> 充分利用 CPU</li><li>增大 Eden 区，降低 GC 频率</li></ul><h3 id="✅-内存受限型-容器-嵌入式" tabindex="-1"><a class="header-anchor" href="#✅-内存受限型-容器-嵌入式"><span>✅ 内存受限型（容器/嵌入式）</span></a></h3><ul><li>限制堆大小、合理设置上限</li><li>关闭 <code>ClassMetadata</code> 缓存泄漏源</li><li>结合 NMT 工具查看堆外内存分布</li></ul><hr><h2 id="📈-诊断与验证手段" tabindex="-1"><a class="header-anchor" href="#📈-诊断与验证手段"><span>📈 诊断与验证手段</span></a></h2><table><thead><tr><th>工具 / 方法</th><th>用途</th></tr></thead><tbody><tr><td><code>jstat</code></td><td>实时查看 GC 次数与间隔</td></tr><tr><td><code>jmap -heap</code></td><td>查看各区域堆大小分布</td></tr><tr><td><code>jcmd GC.*</code></td><td>动态触发/诊断 GC 行为</td></tr><tr><td>GCViewer/GCeasy</td><td>日志可视化分析</td></tr></tbody></table><hr><h2 id="📝-小结" tabindex="-1"><a class="header-anchor" href="#📝-小结"><span>📝 小结</span></a></h2><ul><li>GC 调优无固定方案，需结合业务特点与测试数据调配</li><li>G1 是主流推荐选择，但需合理设置混合回收触发点与停顿目标</li><li>多维度监控工具 + 日志分析，是高效调优的关键</li></ul><hr><p>👉 下一篇推荐阅读：<a href="https://chatgpt.com/c/6865ecec-fbc4-800b-952b-a391340aecbc#" target="_blank" rel="noopener noreferrer">4.1 JVM 常见 OOM 错误类型与排查</a></p>',35)]))}]]),n=JSON.parse('{"path":"/JVM/%E4%B8%93%E6%A0%8F%E5%90%88%E9%9B%86/3.GC%20%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/3.4%20GC%20%E5%8F%82%E6%95%B0%E8%B0%83%E4%BC%98%E5%AE%9E%E6%88%98%E7%AD%96%E7%95%A5.html","title":"3.4 GC 参数调优实战策略","lang":"zh-CN","frontmatter":{"title":"3.4 GC 参数调优实战策略","icon":"fa-solid fa-screwdriver-wrench","date":"2025-07-10T00:00:00.000Z","author":"JeanHu","category":["JVM"],"tag":["JVM","GC","参数调优","性能优化"],"summary":"本文总结了 GC 参数调优的核心思路、关键指标与实战经验，包括吞吐量优先、响应时间优先、内存限制型等典型场景下的调优策略，帮助开发者精准掌握 GC 调优实战技能。","gitInclude":[]},"headers":[{"level":2,"title":"📦 GC 调优的四个核心指标","slug":"📦-gc-调优的四个核心指标","link":"#📦-gc-调优的四个核心指标","children":[]},{"level":2,"title":"📌 常见调优参数分类","slug":"📌-常见调优参数分类","link":"#📌-常见调优参数分类","children":[{"level":3,"title":"1. 堆大小配置","slug":"_1-堆大小配置","link":"#_1-堆大小配置","children":[]},{"level":3,"title":"2. 新生代与老年代比例","slug":"_2-新生代与老年代比例","link":"#_2-新生代与老年代比例","children":[]},{"level":3,"title":"3. GC 行为相关","slug":"_3-gc-行为相关","link":"#_3-gc-行为相关","children":[]}]},{"level":2,"title":"🔍 示例：大内存系统中的 G1 配置","slug":"🔍-示例-大内存系统中的-g1-配置","link":"#🔍-示例-大内存系统中的-g1-配置","children":[]},{"level":2,"title":"🎯 分场景调优建议","slug":"🎯-分场景调优建议","link":"#🎯-分场景调优建议","children":[{"level":3,"title":"✅ 响应延迟敏感（电商/交易类）","slug":"✅-响应延迟敏感-电商-交易类","link":"#✅-响应延迟敏感-电商-交易类","children":[]},{"level":3,"title":"✅ 吞吐优先型（大数据/日志）","slug":"✅-吞吐优先型-大数据-日志","link":"#✅-吞吐优先型-大数据-日志","children":[]},{"level":3,"title":"✅ 内存受限型（容器/嵌入式）","slug":"✅-内存受限型-容器-嵌入式","link":"#✅-内存受限型-容器-嵌入式","children":[]}]},{"level":2,"title":"📈 诊断与验证手段","slug":"📈-诊断与验证手段","link":"#📈-诊断与验证手段","children":[]},{"level":2,"title":"📝 小结","slug":"📝-小结","link":"#📝-小结","children":[]}],"readingTime":{"minutes":2.34,"words":703},"filePathRelative":"JVM/专栏合集/3.GC 垃圾回收机制/3.4 GC 参数调优实战策略.md","localizedDate":"2025年7月10日","excerpt":"\\n<p>掌握垃圾收集器本身还不够，真实项目中需要根据业务场景、硬件配置、内存分布特点等，灵活调整 GC 参数，以减少 STW 停顿、避免 Full GC、提高吞吐能力。</p>\\n<hr>\\n<h2>📦 GC 调优的四个核心指标</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>目标</th>\\n<th>说明</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>停顿时间</td>\\n<td>控制用户线程暂停时间（STW）</td>\\n</tr>\\n<tr>\\n<td>吞吐量</td>\\n<td>程序运行时间 /（运行时间 + GC 时间）</td>\\n</tr>\\n<tr>\\n<td>CPU 占用</td>\\n<td>GC 线程是否抢占系统核心资源</td>\\n</tr>\\n<tr>\\n<td>内存占用</td>\\n<td>是否高效利用堆内存、避免频繁 GC</td>\\n</tr>\\n</tbody>\\n</table>"}')}}]);