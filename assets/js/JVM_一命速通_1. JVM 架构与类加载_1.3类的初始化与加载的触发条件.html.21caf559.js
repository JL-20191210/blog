"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[31764],{66262:(s,i)=>{i.A=(s,i)=>{const a=s.__vccOpts||s;for(const[s,n]of i)a[s]=n;return a}},55517:(s,i,a)=>{a.r(i),a.d(i,{comp:()=>t,data:()=>e});var n=a(20641);const l={},t=(0,a(66262).A)(l,[["render",function(s,i){const a=(0,n.g2)("RouteLink");return(0,n.uX)(),(0,n.CE)("div",null,[i[2]||(i[2]=(0,n.Lk)("h1",{id:"_1-3-《类的初始化与加载的触发条件》",tabindex:"-1"},[(0,n.Lk)("a",{class:"header-anchor",href:"#_1-3-《类的初始化与加载的触发条件》"},[(0,n.Lk)("span",null,"1.3 《类的初始化与加载的触发条件》")])],-1)),i[3]||(i[3]=(0,n.Lk)("hr",null,null,-1)),i[4]||(i[4]=(0,n.Lk)("h2",{id:"🚀-初始化是类加载生命周期的最后一步",tabindex:"-1"},[(0,n.Lk)("a",{class:"header-anchor",href:"#🚀-初始化是类加载生命周期的最后一步"},[(0,n.Lk)("span",null,"🚀 初始化是类加载生命周期的最后一步")])],-1)),i[5]||(i[5]=(0,n.Lk)("p",null,[(0,n.eW)("类的初始化阶段，是 JVM 将类的静态变量赋予初始值并执行 "),(0,n.Lk)("code",null,"<clinit>"),(0,n.eW)(" 静态代码块的过程。它确保类在使用前是安全可用的。")],-1)),i[6]||(i[6]=(0,n.Lk)("hr",null,null,-1)),(0,n.Q3)(" more "),i[7]||(i[7]=(0,n.Fv)('<h2 id="⚙️-初始化执行内容" tabindex="-1"><a class="header-anchor" href="#⚙️-初始化执行内容"><span>⚙️ 初始化执行内容</span></a></h2><ul><li>为 <code>static</code> 静态变量赋初值（非默认值）</li><li>执行类中静态初始化块 <code>static {}</code></li></ul><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例：</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> InitDemo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> init</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    static</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;静态代码块执行&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> init</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;静态变量赋值执行&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>静态变量赋值执行</span></span>\n<span class="line"><span>静态代码块执行</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="🔍-哪些操作会触发类的初始化" tabindex="-1"><a class="header-anchor" href="#🔍-哪些操作会触发类的初始化"><span>🔍 哪些操作会触发类的初始化？</span></a></h2><table><thead><tr><th>触发方式</th><th>示例</th><th>是否触发初始化</th></tr></thead><tbody><tr><td>new 对象</td><td><code>new A()</code></td><td>✅ 是</td></tr><tr><td>访问静态变量（非 final）</td><td><code>A.value</code></td><td>✅ 是</td></tr><tr><td>调用静态方法</td><td><code>A.method()</code></td><td>✅ 是</td></tr><tr><td>反射调用类</td><td><code>Class.forName(&quot;A&quot;)</code></td><td>✅ 是</td></tr><tr><td>主类启动</td><td><code>public static void main()</code></td><td>✅ 是</td></tr></tbody></table><hr><h2 id="🔍-哪些操作不会触发初始化" tabindex="-1"><a class="header-anchor" href="#🔍-哪些操作不会触发初始化"><span>🔍 哪些操作<strong>不会</strong>触发初始化？</span></a></h2><table><thead><tr><th>场景</th><th>示例</th><th>初始化？</th></tr></thead><tbody><tr><td>访问常量（final static）</td><td><code>System.out.println(A.CONST)</code></td><td>❌ 否</td></tr><tr><td>使用数组定义</td><td><code>A[] array = new A[10]</code></td><td>❌ 否</td></tr><tr><td>ClassLoader.loadClass()</td><td><code>loadClass(&quot;A&quot;)</code></td><td>❌ 否</td></tr></tbody></table><p>📌 JVM 会对 final 常量做 <strong>编译期内联优化</strong>，因此不触发初始化。</p><p>🔥即把常量的值<strong>直接替换</strong>到使用它的代码中，而不是在运行时去读取该常量的内存地址</p><hr><h2 id="🔁-初始化与父类的关系" tabindex="-1"><a class="header-anchor" href="#🔁-初始化与父类的关系"><span>🔁 初始化与父类的关系</span></a></h2><p>当子类初始化时，<strong>会先初始化父类</strong>。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Parent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    static</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;父类初始化&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Child</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Parent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    static</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;子类初始化&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行：<code>new Child()</code>，输出：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>父类初始化</span></span>\n<span class="line"><span>子类初始化</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="✅-小测试示例" tabindex="-1"><a class="header-anchor" href="#✅-小测试示例"><span>✅ 小测试示例</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ConstTest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> CONST </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 123</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    static</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;ConstTest 初始化&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TestInit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ConstTest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">CONST</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ❌ 不触发</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：<code>123</code></p><p><strong>类未初始化。</strong> JVM 直接把 <code>CONST</code> 编译成常量放入调用类的常量池中。</p><hr><h2 id="📌-面试必问点" tabindex="-1"><a class="header-anchor" href="#📌-面试必问点"><span>📌 面试必问点</span></a></h2><ol><li>类的初始化阶段做了哪些操作？</li><li>哪些行为会触发类初始化，哪些不会？</li><li><code>Class.forName()</code> 和 <code>ClassLoader.loadClass()</code> 区别？</li><li>子类初始化前是否一定会初始化父类？为什么？</li></ol><hr><h2 id="📝-小结" tabindex="-1"><a class="header-anchor" href="#📝-小结"><span>📝 小结</span></a></h2><ul><li>类的初始化是 JVM 类生命周期中唯一可控阶段</li><li>初始化只会执行一次，静态代码块与静态变量的顺序由源代码决定</li><li>掌握初始化机制有助于优化启动性能与避免意外行为</li></ul><hr>',32)),(0,n.Lk)("p",null,[i[1]||(i[1]=(0,n.eW)("👉 下一篇推荐阅读：")),(0,n.bF)(a,{to:"/JVM/%E4%B8%80%E5%91%BD%E9%80%9F%E9%80%9A/2.%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E4%B8%8E%E5%B9%B6%E5%8F%91%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/2.1JVM%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E8%AF%A6%E8%A7%A3%EF%BC%88%E5%A0%86%E3%80%81%E6%A0%88%E3%80%81%E6%96%B9%E6%B3%95%E5%8C%BA%E7%AD%89%EF%BC%89.html"},{default:(0,n.k6)((()=>i[0]||(i[0]=[(0,n.eW)("2.1 JVM 内存结构详解（堆、栈、方法区等）")]))),_:1})])])}]]),e=JSON.parse('{"path":"/JVM/%E4%B8%80%E5%91%BD%E9%80%9F%E9%80%9A/1.%20JVM%20%E6%9E%B6%E6%9E%84%E4%B8%8E%E7%B1%BB%E5%8A%A0%E8%BD%BD/1.3%E7%B1%BB%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%8E%E5%8A%A0%E8%BD%BD%E7%9A%84%E8%A7%A6%E5%8F%91%E6%9D%A1%E4%BB%B6.html","title":"1.3 类的初始化与加载的触发条件","lang":"zh-CN","frontmatter":{"title":"1.3 类的初始化与加载的触发条件","icon":"fa-solid fa-bolt","date":"2025-07-10T00:00:00.000Z","author":"JeanHu","category":["JVM"],"tag":["JVM","类加载","初始化","触发条件"],"summary":"本文解析 Java 类的初始化过程及其触发条件，详细讲解类加载、连接、初始化各阶段的机制和时机，帮助读者深入理解 JVM 类生命周期。","gitInclude":[]},"headers":[{"level":2,"title":"🚀 初始化是类加载生命周期的最后一步","slug":"🚀-初始化是类加载生命周期的最后一步","link":"#🚀-初始化是类加载生命周期的最后一步","children":[]},{"level":2,"title":"⚙️ 初始化执行内容","slug":"⚙️-初始化执行内容","link":"#⚙️-初始化执行内容","children":[{"level":3,"title":"示例：","slug":"示例","link":"#示例","children":[]}]},{"level":2,"title":"🔍 哪些操作会触发类的初始化？","slug":"🔍-哪些操作会触发类的初始化","link":"#🔍-哪些操作会触发类的初始化","children":[]},{"level":2,"title":"🔍 哪些操作不会触发初始化？","slug":"🔍-哪些操作不会触发初始化","link":"#🔍-哪些操作不会触发初始化","children":[]},{"level":2,"title":"🔁 初始化与父类的关系","slug":"🔁-初始化与父类的关系","link":"#🔁-初始化与父类的关系","children":[]},{"level":2,"title":"✅ 小测试示例","slug":"✅-小测试示例","link":"#✅-小测试示例","children":[]},{"level":2,"title":"📌 面试必问点","slug":"📌-面试必问点","link":"#📌-面试必问点","children":[]},{"level":2,"title":"📝 小结","slug":"📝-小结","link":"#📝-小结","children":[]}],"readingTime":{"minutes":2.41,"words":724},"filePathRelative":"JVM/一命速通/1. JVM 架构与类加载/1.3类的初始化与加载的触发条件.md","localizedDate":"2025年7月10日","excerpt":"\\n<hr>\\n<h2>🚀 初始化是类加载生命周期的最后一步</h2>\\n<p>类的初始化阶段，是 JVM 将类的静态变量赋予初始值并执行 <code>&lt;clinit&gt;</code> 静态代码块的过程。它确保类在使用前是安全可用的。</p>\\n<hr>\\n"}')}}]);