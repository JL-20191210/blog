"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[98075],{66262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}},90480:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>t,data:()=>l});var n=a(20641);const e={},t=(0,a(66262).A)(e,[["render",function(i,s){return(0,n.uX)(),(0,n.CE)("div",null,s[0]||(s[0]=[(0,n.Fv)('<h1 id="关闭事件循环组" tabindex="-1"><a class="header-anchor" href="#关闭事件循环组"><span>关闭事件循环组</span></a></h1><div class="hint-container important"><p class="hint-container-title">重要</p><p><code>shutdownGracefully</code> 是 Netty 中 <code>EventLoopGroup</code> 的一个方法，用于优雅地关闭事件循环组（<code>EventLoopGroup</code>）。<code>EventLoopGroup</code> 是一个包含多个 <code>EventLoop</code> 的集合，负责处理事件循环的执行。调用 <code>shutdownGracefully</code> 方法会使得这个事件循环组在完成当前正在执行的任务后，平滑地关闭，不会丢失任何未处理的请求。</p></div><div class="hint-container note"><p class="hint-container-title">注</p><p>在 Netty 中，<code>EventLoopGroup</code> 会处理所有的 I/O 操作，如网络事件的读取和写入，通常在应用程序关闭时，我们希望优雅地关闭这些事件循环，确保所有的 I/O 操作和任务都已经完成或被清理干净。 \x3c!-- more --\x3e ### <code>shutdownGracefully</code> 方法的作用： 1. <strong>停止接收新的任务</strong>：<code>shutdownGracefully</code> 会阻止新的任务或事件被提交到事件循环中。 2. <strong>平滑关闭</strong>：它会等待当前任务（包括 I/O 操作、已提交的事件等）完成后再关闭事件循环。 3. <strong>不丢失数据</strong>：调用此方法时，当前事件循环中正在进行的操作（如读写数据）会被完整地处理完，而不会因为关闭操作丢失。</p></div><h3 id="shutdowngracefully-的签名" tabindex="-1"><a class="header-anchor" href="#shutdowngracefully-的签名"><span><code>shutdownGracefully</code> 的签名：</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ChannelFuture</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> shutdownGracefully</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">long</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> quietPeriod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> long</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> timeout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> unit)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>quietPeriod</strong>：指的是在关闭过程中，允许的安静期（即等待新任务提交的时间）。</li><li><strong>timeout</strong>：指定关闭操作的超时时间。如果在此时间内没有完成关闭操作，将会强制关闭。</li><li><strong>unit</strong>：时间单位，例如秒、毫秒等。</li></ul><h3 id="例子" tabindex="-1"><a class="header-anchor" href="#例子"><span>例子：</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">EventLoopGroup</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> group </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> NioEventLoopGroup</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 启动服务或其他操作...</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">finally</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 优雅地关闭 EventLoopGroup</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    group</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">shutdownGracefully</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">SECONDS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="解释" tabindex="-1"><a class="header-anchor" href="#解释"><span>解释：</span></a></h3><p>在上面的代码中，<code>group.shutdownGracefully(0, 5, TimeUnit.SECONDS)</code> 会优雅地关闭 <code>EventLoopGroup</code>，并且：</p><ul><li><strong>0秒的安静期</strong>：立即停止接收新的任务。</li><li><strong>5秒的超时时间</strong>：如果在 5 秒内没有关闭完毕，就会强制关闭。</li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结：</span></a></h3><p><code>shutdownGracefully</code> 是确保 Netty 程序在退出时可以平稳关闭的一个重要方法。它使得事件循环组在完成所有当前的 I/O 操作后，能够优雅地关闭，避免丢失数据和任务。</p>',13)]))}]]),l=JSON.parse('{"path":"/Netty/%E5%85%B3%E9%97%AD%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E7%BB%84.html","title":"关闭事件循环组","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2025-02-11T00:00:00.000Z","category":["Netty"],"tag":["网络编程"],"gitInclude":[]},"headers":[{"level":3,"title":"shutdownGracefully 的签名：","slug":"shutdowngracefully-的签名","link":"#shutdowngracefully-的签名","children":[]},{"level":3,"title":"例子：","slug":"例子","link":"#例子","children":[]},{"level":3,"title":"解释：","slug":"解释","link":"#解释","children":[]},{"level":3,"title":"总结：","slug":"总结","link":"#总结","children":[]}],"readingTime":{"minutes":1.83,"words":549},"filePathRelative":"Netty/关闭事件循环组.md","localizedDate":"2025年2月11日","excerpt":"\\n<div class=\\"hint-container important\\">\\n<p class=\\"hint-container-title\\">重要</p>\\n<p><code>shutdownGracefully</code> 是 Netty 中 <code>EventLoopGroup</code> 的一个方法，用于优雅地关闭事件循环组（<code>EventLoopGroup</code>）。<code>EventLoopGroup</code> 是一个包含多个 <code>EventLoop</code> 的集合，负责处理事件循环的执行。调用 <code>shutdownGracefully</code> 方法会使得这个事件循环组在完成当前正在执行的任务后，平滑地关闭，不会丢失任何未处理的请求。</p>\\n</div>\\n<div class=\\"hint-container note\\">\\n<p class=\\"hint-container-title\\">注</p>\\n<p>在 Netty 中，<code>EventLoopGroup</code> 会处理所有的 I/O 操作，如网络事件的读取和写入，通常在应用程序关闭时，我们希望优雅地关闭这些事件循环，确保所有的 I/O 操作和任务都已经完成或被清理干净。</p>\\n</div>\\n"}')}}]);