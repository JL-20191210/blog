"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[546],{66262:(e,l)=>{l.A=(e,l)=>{const n=e.__vccOpts||e;for(const[e,o]of l)n[e]=o;return n}},94395:(e,l,n)=>{n.r(l),n.d(l,{comp:()=>r,data:()=>t});var o=n(20641);const i={},r=(0,n(66262).A)(i,[["render",function(e,l){return(0,o.uX)(),(0,o.CE)("div",null,l[0]||(l[0]=[(0,o.Fv)('<h1 id="where-1-1" tabindex="-1"><a class="header-anchor" href="#where-1-1"><span>where 1=1</span></a></h1><p><code>where 1=1</code> 是一个常见的 SQL 片段，在查询语句中的作用是添加一个始终为真的条件。以下是关于 <code>where 1=1</code> 的作用的总结：</p><ol><li><p><strong>始终为真</strong>：</p><ul><li><code>1=1</code> 这个条件始终为真，因为任何数等于自身。因此，<code>where 1=1</code> 不会对查询结果产生影响，它实际上是一个无条件的条件。</li></ul></li><li><p><strong>用途</strong>：</p><ul><li>在动态构建 SQL 查询语句时，<code>where 1=1</code> 可以作为一个基础条件，确保查询条件的合法性。</li><li>可以作为一个占位符，方便在后续动态添加其他条件而无需判断是否已经存在其他条件。</li></ul></li><li><p><strong>简化条件拼接</strong>：</p><ul><li>使用 <code>where 1=1</code> 可以简化动态拼接查询条件的逻辑，因为无论是否有其他条件，它都会起作用，不会影响查询结果。</li></ul></li><li><p><strong>避免错误</strong>：</p><ul><li>在动态拼接复杂的查询条件时，<code>where 1=1</code> 可以避免由于条件缺失而导致的语法错误或逻辑错误。</li></ul></li></ol><p>总的来说，<code>where 1=1</code> 的作用是添加一个始终为真的条件，用于简化条件拼接、确保查询条件的合法性，并在动态构建 SQL 查询语句时提供一定的灵活性和便利性。</p>',4)]))}]]),t=JSON.parse('{"path":"/Mybatis/Mybatis%20Plus/where%201_1.html","title":"where 1=1","lang":"zh-CN","frontmatter":{"icon":"mybatis plus","date":"2024-11-26T00:00:00.000Z","category":["Mybatis"],"tag":["查询"],"gitInclude":[]},"headers":[],"readingTime":{"minutes":1.16,"words":349},"filePathRelative":"Mybatis/Mybatis Plus/where 1=1.md","localizedDate":"2024年11月26日","excerpt":"\\n<p><code>where 1=1</code> 是一个常见的 SQL 片段，在查询语句中的作用是添加一个始终为真的条件。以下是关于 <code>where 1=1</code> 的作用的总结：</p>\\n<ol>\\n<li>\\n<p><strong>始终为真</strong>：</p>\\n<ul>\\n<li><code>1=1</code> 这个条件始终为真，因为任何数等于自身。因此，<code>where 1=1</code> 不会对查询结果产生影响，它实际上是一个无条件的条件。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>用途</strong>：</p>\\n<ul>\\n<li>在动态构建 SQL 查询语句时，<code>where 1=1</code> 可以作为一个基础条件，确保查询条件的合法性。</li>\\n<li>可以作为一个占位符，方便在后续动态添加其他条件而无需判断是否已经存在其他条件。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>简化条件拼接</strong>：</p>\\n<ul>\\n<li>使用 <code>where 1=1</code> 可以简化动态拼接查询条件的逻辑，因为无论是否有其他条件，它都会起作用，不会影响查询结果。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>避免错误</strong>：</p>\\n<ul>\\n<li>在动态拼接复杂的查询条件时，<code>where 1=1</code> 可以避免由于条件缺失而导致的语法错误或逻辑错误。</li>\\n</ul>\\n</li>\\n</ol>"}')}}]);