"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[64687],{66262:(n,a)=>{a.A=(n,a)=>{const s=n.__vccOpts||n;for(const[n,t]of a)s[n]=t;return s}},38029:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>i,data:()=>l});var t=s(20641);const e={},i=(0,s(66262).A)(e,[["render",function(n,a){return(0,t.uX)(),(0,t.CE)("div",null,a[0]||(a[0]=[(0,t.Fv)('<h1 id="java-中引用类型在内存中的存储方式" tabindex="-1"><a class="header-anchor" href="#java-中引用类型在内存中的存储方式"><span>Java 中<strong>引用类型在内存中的存储方式</strong></span></a></h1><h2 id="🧠-一、什么是引用类型" tabindex="-1"><a class="header-anchor" href="#🧠-一、什么是引用类型"><span>🧠 一、什么是引用类型？</span></a></h2><p>在 Java 中，除了 8 种基本类型，其他都是 <strong>引用类型</strong>，包括：</p><ul><li>类（<code>new</code> 出来的对象）</li><li>接口</li><li>数组</li><li>枚举</li><li>字符串（虽然是特殊的，但也是引用类型）</li></ul><hr><h2 id="🧩-二、java-内存结构简要回顾" tabindex="-1"><a class="header-anchor" href="#🧩-二、java-内存结构简要回顾"><span>🧩 二、Java 内存结构简要回顾</span></a></h2><p>Java 的内存结构大致如下（基于 HotSpot JVM）：</p><table><thead><tr><th>区域</th><th>描述</th></tr></thead><tbody><tr><td><strong>栈（Stack）</strong></td><td>存放方法调用帧、局部变量表（包括引用变量）</td></tr><tr><td><strong>堆（Heap）</strong></td><td>存放所有对象实例和数组，垃圾回收主要作用于此</td></tr><tr><td><strong>方法区（MetaSpace）</strong></td><td>类信息、常量池、静态变量等</td></tr><tr><td><strong>程序计数器</strong></td><td>每个线程的执行字节码的指令地址</td></tr><tr><td><strong>本地方法栈</strong></td><td>用于调用本地方法（JNI）</td></tr></tbody></table><hr><h2 id="📦-三、引用类型是如何存储的" tabindex="-1"><a class="header-anchor" href="#📦-三、引用类型是如何存储的"><span>📦 三、引用类型是如何存储的？</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> p </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Person</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="存储过程是这样的" tabindex="-1"><a class="header-anchor" href="#存储过程是这样的"><span>存储过程是这样的：</span></a></h3><h4 id="✅-栈-stack" tabindex="-1"><a class="header-anchor" href="#✅-栈-stack"><span>✅ 栈（Stack）：</span></a></h4><ul><li><code>p</code> 是一个<strong>引用变量</strong>，它本身存放在<strong>当前线程的栈帧中的局部变量表里</strong>。</li><li><code>p</code> 里面保存的是一个<strong>地址值</strong>（指向堆中的真实对象）。</li></ul><h4 id="✅-堆-heap" tabindex="-1"><a class="header-anchor" href="#✅-堆-heap"><span>✅ 堆（Heap）：</span></a></h4><ul><li><code>new Person()</code> 会在<strong>堆上创建一个 Person 对象</strong>。</li><li>对象内部包含字段（如 <code>name</code>、<code>age</code>），如果这些字段也是引用类型（如 <code>String name</code>），它们的值同样是指向其他对象的地址。</li></ul><hr><h3 id="✅-内存示意图" tabindex="-1"><a class="header-anchor" href="#✅-内存示意图"><span>✅ 内存示意图：</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>栈内存（方法栈）：</span></span>\n<span class="line"><span>┌───────────────┐</span></span>\n<span class="line"><span>│ 局部变量表     │</span></span>\n<span class="line"><span>│  p ─────────┐ │</span></span>\n<span class="line"><span>└─────────────│─┘</span></span>\n<span class="line"><span>              ↓</span></span>\n<span class="line"><span>            堆内存（对象）</span></span>\n<span class="line"><span>            ┌────────────────┐</span></span>\n<span class="line"><span>            │ Person 对象     │</span></span>\n<span class="line"><span>            │ name ─────┐     │</span></span>\n<span class="line"><span>            │ age  = 18 │     │</span></span>\n<span class="line"><span>            └──────────│─────┘</span></span>\n<span class="line"><span>                       ↓</span></span>\n<span class="line"><span>                    String 对象</span></span>\n<span class="line"><span>                    &quot;张三&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="🧹-四、和垃圾回收有什么关系" tabindex="-1"><a class="header-anchor" href="#🧹-四、和垃圾回收有什么关系"><span>🧹 四、和垃圾回收有什么关系？</span></a></h2><ul><li><strong>引用变量失效</strong>（比如作用域结束、被赋 null、被覆盖）后，如果堆中的对象不再被任何 GC Root 引用，它就会被垃圾回收。</li><li>所以：<strong>Java 中变量保存的是“对象的地址”</strong>，并不是对象本身！</li></ul><hr><h2 id="🔍-小结" tabindex="-1"><a class="header-anchor" href="#🔍-小结"><span>🔍 小结</span></a></h2><table><thead><tr><th>区域</th><th>存什么</th></tr></thead><tbody><tr><td>栈</td><td>引用变量（保存对象地址）</td></tr><tr><td>堆</td><td>真正的对象实例及其字段数据</td></tr><tr><td>方法区</td><td>类的结构信息、静态字段、常量等</td></tr></tbody></table>',25)]))}]]),l=JSON.parse('{"path":"/Java/%E9%9A%8F%E7%AC%94/Java%20%E4%B8%AD%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F.html","title":"Java 中引用类型在内存中的存储方式","lang":"zh-CN","frontmatter":{"gitInclude":[]},"headers":[{"level":2,"title":"🧠 一、什么是引用类型？","slug":"🧠-一、什么是引用类型","link":"#🧠-一、什么是引用类型","children":[]},{"level":2,"title":"🧩 二、Java 内存结构简要回顾","slug":"🧩-二、java-内存结构简要回顾","link":"#🧩-二、java-内存结构简要回顾","children":[]},{"level":2,"title":"📦 三、引用类型是如何存储的？","slug":"📦-三、引用类型是如何存储的","link":"#📦-三、引用类型是如何存储的","children":[{"level":3,"title":"存储过程是这样的：","slug":"存储过程是这样的","link":"#存储过程是这样的","children":[]},{"level":3,"title":"✅ 内存示意图：","slug":"✅-内存示意图","link":"#✅-内存示意图","children":[]}]},{"level":2,"title":"🧹 四、和垃圾回收有什么关系？","slug":"🧹-四、和垃圾回收有什么关系","link":"#🧹-四、和垃圾回收有什么关系","children":[]},{"level":2,"title":"🔍 小结","slug":"🔍-小结","link":"#🔍-小结","children":[]}],"readingTime":{"minutes":1.61,"words":484},"filePathRelative":"Java/随笔/Java 中引用类型在内存中的存储方式.md","excerpt":"\\n<h2>🧠 一、什么是引用类型？</h2>\\n<p>在 Java 中，除了 8 种基本类型，其他都是 <strong>引用类型</strong>，包括：</p>\\n<ul>\\n<li>类（<code>new</code> 出来的对象）</li>\\n<li>接口</li>\\n<li>数组</li>\\n<li>枚举</li>\\n<li>字符串（虽然是特殊的，但也是引用类型）</li>\\n</ul>\\n<hr>\\n<h2>🧩 二、Java 内存结构简要回顾</h2>\\n<p>Java 的内存结构大致如下（基于 HotSpot JVM）：</p>\\n<table>\\n<thead>\\n<tr>\\n<th>区域</th>\\n<th>描述</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><strong>栈（Stack）</strong></td>\\n<td>存放方法调用帧、局部变量表（包括引用变量）</td>\\n</tr>\\n<tr>\\n<td><strong>堆（Heap）</strong></td>\\n<td>存放所有对象实例和数组，垃圾回收主要作用于此</td>\\n</tr>\\n<tr>\\n<td><strong>方法区（MetaSpace）</strong></td>\\n<td>类信息、常量池、静态变量等</td>\\n</tr>\\n<tr>\\n<td><strong>程序计数器</strong></td>\\n<td>每个线程的执行字节码的指令地址</td>\\n</tr>\\n<tr>\\n<td><strong>本地方法栈</strong></td>\\n<td>用于调用本地方法（JNI）</td>\\n</tr>\\n</tbody>\\n</table>"}')}}]);