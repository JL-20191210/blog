"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[66436],{66262:(n,e)=>{e.A=(n,e)=>{const a=n.__vccOpts||n;for(const[n,r]of e)a[n]=r;return a}},47309:(n,e,a)=>{a.r(e),a.d(e,{comp:()=>o,data:()=>i});var r=a(20641);const t={},o=(0,a(66262).A)(t,[["render",function(n,e){return(0,r.uX)(),(0,r.CE)("div",null,e[0]||(e[0]=[(0,r.Fv)('<h1 id="spring注解" tabindex="-1"><a class="header-anchor" href="#spring注解"><span>Spring注解</span></a></h1><h2 id="aop" tabindex="-1"><a class="header-anchor" href="#aop"><span>AOP</span></a></h2><h3 id="propertysource" tabindex="-1"><a class="header-anchor" href="#propertysource"><span>@PropertySource</span></a></h3><p>用于指定外部的配置文件路径，并将文件中的属性加载到 Spring 的 Environment 中，方便在应用程序中使用</p><h3 id="import" tabindex="-1"><a class="header-anchor" href="#import"><span>@Import</span></a></h3><p>可以帮助你将多个配置类模块化地导入到一个主配置类中，避免单一配置类过于庞大</p><h3 id="runwith" tabindex="-1"><a class="header-anchor" href="#runwith"><span>@RunWith</span></a></h3><p><code>@RunWith</code> 的作用是为测试类指定一个自定义的 <strong>Test Runner</strong>，JUnit 默认使用的运行器<code>BlockJUnit4ClassRunner</code>，但可以通过 <code>@RunWith</code> 来指定其他的测试运行器</p><h3 id="contextconfiguration" tabindex="-1"><a class="header-anchor" href="#contextconfiguration"><span>@ContextConfiguration</span></a></h3><p><code>@ContextConfiguration</code> 是 Spring 测试框架中的一个注解，它用于指定加载 Spring 上下文的配置，通常与 <code>@RunWith(SpringRunner.class)</code> 一起使用。这个注解在进行 Spring 集成测试时非常有用，能够让测试类加载 Spring 配置，并注入 Spring 容器中的 Bean</p><h3 id="repository" tabindex="-1"><a class="header-anchor" href="#repository"><span>@Repository</span></a></h3><p><code>@Repository</code> 注解将一个类标识为 DAO 层的组件</p><h2 id="事务" tabindex="-1"><a class="header-anchor" href="#事务"><span>事务</span></a></h2><h3 id="enabletransactionmanagement" tabindex="-1"><a class="header-anchor" href="#enabletransactionmanagement"><span>@EnableTransactionManagement</span></a></h3><p>设置当前Spring环境中开启注解式事务支持</p><p>🔥事务管理器要根据使用技术进行选择，Mybatis框架使用的是JDBC事务，可以直接使用<code>DataSourceTransactionManager</code></p><h3 id="transactional" tabindex="-1"><a class="header-anchor" href="#transactional"><span>@Transactional</span></a></h3><p>🐱 为当前业务层方法添加事务</p><p>🌳 <code> @Transactional(rollbackFor = {IOException.class})</code>：在 Spring 的事务管理中，遇到 <code>IOException</code> 异常时，事务会进行回滚。默认Spring的事务只会对<code>Error异常</code>和<code>RuntimeException异常</code>及其子类进行事务回滚，其他的异常类型是不会回滚的</p><p>🌳<code>@Transactional(propagation = Propagation.REQUIRES_NEW)</code>:propagation设置事务属性：传播行为设置为当前操作需要新事务</p>',20)]))}]]),i=JSON.parse('{"path":"/SSM/01-Spring%E7%AC%94%E8%AE%B0/%E9%9A%8F%E7%AC%94/Spring%E6%B3%A8%E8%A7%A3.html","title":"Spring注解","lang":"zh-CN","frontmatter":{"gitInclude":[]},"headers":[{"level":2,"title":"AOP","slug":"aop","link":"#aop","children":[{"level":3,"title":"@PropertySource","slug":"propertysource","link":"#propertysource","children":[]},{"level":3,"title":"@Import","slug":"import","link":"#import","children":[]},{"level":3,"title":"@RunWith","slug":"runwith","link":"#runwith","children":[]},{"level":3,"title":"@ContextConfiguration","slug":"contextconfiguration","link":"#contextconfiguration","children":[]},{"level":3,"title":"@Repository","slug":"repository","link":"#repository","children":[]}]},{"level":2,"title":"事务","slug":"事务","link":"#事务","children":[{"level":3,"title":"@EnableTransactionManagement","slug":"enabletransactionmanagement","link":"#enabletransactionmanagement","children":[]},{"level":3,"title":"@Transactional","slug":"transactional","link":"#transactional","children":[]}]}],"readingTime":{"minutes":1.25,"words":376},"filePathRelative":"SSM/01-Spring笔记/随笔/Spring注解.md","excerpt":"\\n<h2>AOP</h2>\\n<h3>@PropertySource</h3>\\n<p>用于指定外部的配置文件路径，并将文件中的属性加载到 Spring 的 Environment 中，方便在应用程序中使用</p>\\n<h3>@Import</h3>\\n<p>可以帮助你将多个配置类模块化地导入到一个主配置类中，避免单一配置类过于庞大</p>\\n<h3>@RunWith</h3>\\n<p><code>@RunWith</code> 的作用是为测试类指定一个自定义的 <strong>Test Runner</strong>，JUnit 默认使用的运行器<code>BlockJUnit4ClassRunner</code>，但可以通过 <code>@RunWith</code> 来指定其他的测试运行器</p>"}')}}]);