"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[27850],{66262:(s,i)=>{i.A=(s,i)=>{const a=s.__vccOpts||s;for(const[s,e]of i)a[s]=e;return a}},11150:(s,i,a)=>{a.r(i),a.d(i,{comp:()=>n,data:()=>t});var e=a(20641);const l={},n=(0,a(66262).A)(l,[["render",function(s,i){const a=(0,e.g2)("Badge");return(0,e.uX)(),(0,e.CE)("div",null,[i[0]||(i[0]=(0,e.Fv)('<h1 id="getmethods-和getdeclaredmethods-的区别" tabindex="-1"><a class="header-anchor" href="#getmethods-和getdeclaredmethods-的区别"><span>getMethods()和getDeclaredMethods()的区别</span></a></h1><blockquote><p><code>getMethods()</code> 和 <code>getDeclaredMethods()</code> 都是 Java 反射中 <code>Class</code> 类的方法，用于获取类中定义的方法。它们之间的主要区别在于<strong>访问权限</strong>和<strong>方法范围</strong>。下面是它们的区别详细解释：</p></blockquote>',2)),(0,e.Q3)(" more "),i[1]||(i[1]=(0,e.Fv)('<h3 id="_1-getmethods" tabindex="-1"><a class="header-anchor" href="#_1-getmethods"><span>1. <code>getMethods()</code></span></a></h3><ul><li><strong>返回值</strong>：返回的是 <strong>所有</strong> 公共（<code>public</code>）方法，包括： <ul><li><strong>类自身</strong>定义的公共方法。</li><li><strong>继承自父类的公共方法</strong>。</li><li><strong>接口定义的公共方法</strong>（如果类实现了接口）。</li></ul></li><li><strong>访问权限</strong>：只包含 <code>public</code> 修饰符的方法，不会返回类中的 <code>private</code>、<code>protected</code> 或默认访问修饰符（包内可见）的方法。</li><li><strong>方法范围</strong>：会返回从类的继承链（父类、接口）中继承来的公共方法。</li></ul><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例：</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Parent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> publicMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {}</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> privateMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {}</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Child</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Parent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> childMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {}</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Class</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> clazz </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Child</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Method</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] methods </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> clazz</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getMethods</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 返回publicMethod()、childMethod() 和继承的public方法</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 不包括privateMethod()，因为它是私有方法</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-getdeclaredmethods" tabindex="-1"><a class="header-anchor" href="#_2-getdeclaredmethods"><span>2. <code>getDeclaredMethods()</code></span></a></h3><ul><li><strong>返回值</strong>：返回的是 <strong>类自身</strong> 所有的声明方法，包括： <ul><li><strong>公共方法</strong>（<code>public</code>）。</li><li><strong>私有方法</strong>（<code>private</code>）。</li><li><strong>受保护的方法</strong>（<code>protected</code>）。</li><li><strong>默认访问修饰符（包内可见）的方法</strong>。</li></ul></li><li><strong>访问权限</strong>：不会返回继承自父类或实现的接口中的方法，只返回当前类中声明的方法，<strong>包括私有方法</strong>。如果需要访问私有方法，你可以使用 <code>setAccessible(true)</code>。</li><li><strong>方法范围</strong>：只包括当前类中定义的方法，不会包含继承自父类或者实现自接口的方法。</li></ul><h4 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1"><span>示例：</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Parent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> publicMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {}</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> privateMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {}</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Child</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Parent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> childMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {}</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Class</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> clazz </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Child</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Method</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] methods </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> clazz</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getDeclaredMethods</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 返回childMethod()、publicMethod()、privateMethod() </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 不包括继承自父类的publicMethod()，如果是private方法也能返回</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',8)),(0,e.bF)(a,{text:"important",type:"important"}),i[2]||(i[2]=(0,e.Fv)(' <h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结：</span></a></h3><ul><li><strong><code>getMethods()</code></strong>：返回类的所有 <strong>公共</strong> 方法，包括继承的公共方法。</li><li><strong><code>getDeclaredMethods()</code></strong>：返回类中 <strong>所有声明</strong> 的方法（包括 <code>public</code>、<code>private</code>、<code>protected</code> 和默认访问），不包括继承的父类或接口中的方法。</li></ul><p>选择使用哪个方法，取决于你需要访问的方法的范围：</p><ul><li>如果只关心类的公共方法以及从父类或接口继承的公共方法，使用 <code>getMethods()</code>。</li><li>如果需要访问类中所有声明的方法（包括私有方法），使用 <code>getDeclaredMethods()</code>。</li></ul>',5))])}]]),t=JSON.parse('{"path":"/Java/%E5%85%A5%E9%97%A8%E5%88%B0%E8%B5%B7%E9%A3%9E/35.%E5%8F%8D%E5%B0%84_%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/getMethods()%E5%92%8CgetDeclaredMethods()%E7%9A%84%E5%8C%BA%E5%88%AB.html","title":"getMethods()和getDeclaredMethods()的区别","lang":"zh-CN","frontmatter":{"icon":"fa-brands fa-java","date":"2025-02-10T00:00:00.000Z","category":["Java"],"tag":["反射"],"gitInclude":[]},"headers":[{"level":3,"title":"1. getMethods()","slug":"_1-getmethods","link":"#_1-getmethods","children":[]},{"level":3,"title":"2. getDeclaredMethods()","slug":"_2-getdeclaredmethods","link":"#_2-getdeclaredmethods","children":[]},{"level":3,"title":"总结：","slug":"总结","link":"#总结","children":[]}],"readingTime":{"minutes":1.94,"words":582},"filePathRelative":"Java/入门到起飞/35.反射&动态代理/getMethods()和getDeclaredMethods()的区别.md","localizedDate":"2025年2月10日","excerpt":"\\n<blockquote>\\n<p><code>getMethods()</code> 和 <code>getDeclaredMethods()</code> 都是 Java 反射中 <code>Class</code> 类的方法，用于获取类中定义的方法。它们之间的主要区别在于<strong>访问权限</strong>和<strong>方法范围</strong>。下面是它们的区别详细解释：</p>\\n</blockquote>\\n"}')}}]);