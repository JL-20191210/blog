"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4096],{66262:(t,e)=>{e.A=(t,e)=>{const s=t.__vccOpts||t;for(const[t,i]of e)s[t]=i;return s}},32464:(t,e,s)=>{s.r(e),s.d(e,{comp:()=>n,data:()=>r});var i=s(20641);const a={},n=(0,s(66262).A)(a,[["render",function(t,e){return(0,i.uX)(),(0,i.CE)("div",null,e[0]||(e[0]=[(0,i.Fv)('<h1 id="📚-javasystem类详解" tabindex="-1"><a class="header-anchor" href="#📚-javasystem类详解"><span>📚 JavaSystem类详解</span></a></h1><p>java.lang.System 是 Java 标准库提供的一个工具类，它包含了一组 <strong>与系统交互的静态方法和标准对象引用</strong>，比如控制台输出、系统属性、环境变量、时间获取等。</p><h2 id="✅-基本特性" tabindex="-1"><a class="header-anchor" href="#✅-基本特性"><span><strong>✅ 基本特性</strong></span></a></h2><table><thead><tr><th><strong>特性</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>是 final 类</td><td>不能被继承</td></tr><tr><td>构造方法私有</td><td>不能被实例化</td></tr><tr><td>所有方法都是静态的</td><td>直接通过 System.method() 使</td></tr></tbody></table><h2 id="📦-常用字段" tabindex="-1"><a class="header-anchor" href="#📦-常用字段"><span>📦 常用字段</span></a></h2><table><thead><tr><th><strong>字段</strong></th><th><strong>类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>System.in</td><td>InputStream</td><td>标准输入流（通常是键盘）</td></tr><tr><td>System.out</td><td>PrintStream</td><td>标准输出流（通常是控制台）</td></tr><tr><td>System.err</td><td>PrintStream</td><td>错误输出流（通常也是控制台，但颜色不同）</td></tr></tbody></table><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例：</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>System.out.println(&quot;这是正常输出&quot;);</span></span>\n<span class="line"><span>System.err.println(&quot;这是错误输出&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🧰-常用方法一览" tabindex="-1"><a class="header-anchor" href="#🧰-常用方法一览"><span>🧰 常用方法一览</span></a></h2><h3 id="🔹-1-currenttimemillis-和-nanotime" tabindex="-1"><a class="header-anchor" href="#🔹-1-currenttimemillis-和-nanotime"><span><strong>🔹 1.</strong> currentTimeMillis() <strong>和</strong> nanoTime()</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>long t1 = System.currentTimeMillis(); // 当前时间（毫秒） → 可用于时间戳</span></span>\n<span class="line"><span>long t2 = System.nanoTime(); // 更高精度的时间 → 适合性能测试</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th><strong>方法</strong></th><th><strong>精度</strong></th><th><strong>场景</strong></th></tr></thead><tbody><tr><td>currentTimeMillis()</td><td>毫秒</td><td>生成时间戳、日志</td></tr><tr><td>nanoTime()</td><td>纳秒</td><td>性能监控、计时器（相对时间）</td></tr></tbody></table><h3 id="🔹-2-exit-int-status" tabindex="-1"><a class="header-anchor" href="#🔹-2-exit-int-status"><span><strong>🔹 2.</strong> exit(int status)</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>System.exit(0); // 正常退出</span></span>\n<span class="line"><span>System.exit(1); // 异常退出</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>退出 Java 虚拟机</li><li>会触发 shutdown hook（关闭钩子）</li></ul><h3 id="🔹-3-gc-与垃圾回收" tabindex="-1"><a class="header-anchor" href="#🔹-3-gc-与垃圾回收"><span><strong>🔹 3.</strong> gc()与垃圾回收</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>System.gc(); // 请求 JVM 进行垃圾回收（仅是建议）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>实际由 JVM 决定是否回收</li><li>推荐使用 Runtime.getRuntime().gc() 或不主动调用</li></ul><h3 id="🔹-4-arraycopy-数组快速复制" tabindex="-1"><a class="header-anchor" href="#🔹-4-arraycopy-数组快速复制"><span><strong>🔹 4.</strong> arraycopy(...)数组快速复制</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>System.arraycopy(src, srcPos, dest, destPos, length);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>比 for 循环快得多，底层是 native 方法。</p><h4 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1"><span>示例：</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>int[] src = {1, 2, 3, 4, 5};</span></span>\n<span class="line"><span>int[] dest = new int[5];</span></span>\n<span class="line"><span>System.arraycopy(src, 0, dest, 0, 5);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="🔹-5-getproperty-setproperty-系统属性" tabindex="-1"><a class="header-anchor" href="#🔹-5-getproperty-setproperty-系统属性"><span><strong>🔹 5.</strong> getProperty() / setProperty()系统属性</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>String javaVersion = System.getProperty(&quot;java.version&quot;);</span></span>\n<span class="line"><span>System.setProperty(&quot;env.log.path&quot;, &quot;/tmp/logs&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>JVM 启动参数中的 -Dkey=value 会自动注册到 System.getProperty</li><li>典型用途：日志配置、环境判断</li></ul><p>⚠️ 注意：不会影响系统环境变量，只影响当前 JVM。</p><p>🔥重启程序后会重新注册</p><h3 id="🔹-6-getenv-获取环境变量" tabindex="-1"><a class="header-anchor" href="#🔹-6-getenv-获取环境变量"><span><strong>🔹 6.</strong> getenv()获取环境变量</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>String path = System.getenv(&quot;PATH&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>获取操作系统层面的环境变量（非 JVM 参数）</li><li>通常用于容器部署、读取系统配置等</li></ul><h3 id="🔹-7-lineseparator-获取换行符" tabindex="-1"><a class="header-anchor" href="#🔹-7-lineseparator-获取换行符"><span><strong>🔹 7.</strong> lineSeparator() 获取换行符</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>String sep = System.lineSeparator(); // Windows: \\r\\n, Unix: \\n</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="📌-系统属性示例表-常用" tabindex="-1"><a class="header-anchor" href="#📌-系统属性示例表-常用"><span><strong>📌 系统属性示例表（常用）</strong></span></a></h2><table><thead><tr><th><strong>属性名</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>java.version</td><td>Java 版本</td></tr><tr><td>java.home</td><td>JRE 安装路径</td></tr><tr><td>user.dir</td><td>当前工作目录</td></tr><tr><td>os.name</td><td>操作系统名称</td></tr><tr><td>file.separator</td><td>文件路径分隔符（Windows: \\）</td></tr><tr><td>line.separator</td><td>换行符</td></tr><tr><td>user.name</td><td>当前用户</td></tr></tbody></table><h2 id="🔍-system-vs-runtime" tabindex="-1"><a class="header-anchor" href="#🔍-system-vs-runtime"><span><strong>🔍 System vs Runtime</strong></span></a></h2><table><thead><tr><th><strong>功能</strong></th><th><strong>System</strong></th><th><strong>Runtime</strong></th></tr></thead><tbody><tr><td>属性获取</td><td>✅</td><td>❌</td></tr><tr><td>日志输出</td><td>✅</td><td>❌</td></tr><tr><td>退出 JVM</td><td>✅ (System.exit)</td><td>✅ (Runtime.getRuntime().exit())</td></tr><tr><td>执行命令</td><td>❌</td><td>✅ (exec(...))</td></tr><tr><td>获取内存</td><td>❌</td><td>✅ (totalMemory() 等)</td></tr></tbody></table><h2 id="🚀-示例-打印所有系统属性" tabindex="-1"><a class="header-anchor" href="#🚀-示例-打印所有系统属性"><span><strong>🚀 示例：打印所有系统属性</strong></span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Properties props = System.getProperties();</span></span>\n<span class="line"><span>props.forEach((k, v) -&gt; System.out.println(k + &quot; = &quot; + v));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="⚠️-注意事项" tabindex="-1"><a class="header-anchor" href="#⚠️-注意事项"><span><strong>⚠️ 注意事项</strong></span></a></h2><table><thead><tr><th><strong>问题</strong></th><th><strong>建议</strong></th></tr></thead><tbody><tr><td>System.exit() 会立即终止 JVM</td><td>不建议在 Web 项目中使用</td></tr><tr><td>System.gc() 不是强制</td><td>让 GC 自己决定更合适</td></tr><tr><td>System.out.println 过度使用</td><td>会拖慢程序，建议用日志框架</td></tr></tbody></table><h2 id="✅-总结一句话" tabindex="-1"><a class="header-anchor" href="#✅-总结一句话"><span><strong>✅ 总结一句话：</strong></span></a></h2><blockquote><p>System 是 Java 中与 <strong>JVM、系统环境和控制台输出交互</strong>的重要类，虽然简单，但在实际开发中扮演着不可或缺的角色。</p></blockquote>',43)]))}]]),r=JSON.parse('{"path":"/Java/%E6%A0%B8%E5%BF%83%E7%B1%BB%E5%BA%93/System%20%E7%B1%BB%E8%AF%A6%E8%A7%A3.html","title":"📚 JavaSystem类详解","lang":"zh-CN","frontmatter":{"gitInclude":[]},"headers":[{"level":2,"title":"✅ 基本特性","slug":"✅-基本特性","link":"#✅-基本特性","children":[]},{"level":2,"title":"📦 常用字段","slug":"📦-常用字段","link":"#📦-常用字段","children":[{"level":3,"title":"示例：","slug":"示例","link":"#示例","children":[]}]},{"level":2,"title":"🧰 常用方法一览","slug":"🧰-常用方法一览","link":"#🧰-常用方法一览","children":[{"level":3,"title":"🔹 1. currentTimeMillis() 和 nanoTime()","slug":"🔹-1-currenttimemillis-和-nanotime","link":"#🔹-1-currenttimemillis-和-nanotime","children":[]},{"level":3,"title":"🔹 2. exit(int status)","slug":"🔹-2-exit-int-status","link":"#🔹-2-exit-int-status","children":[]},{"level":3,"title":"🔹 3. gc()与垃圾回收","slug":"🔹-3-gc-与垃圾回收","link":"#🔹-3-gc-与垃圾回收","children":[]},{"level":3,"title":"🔹 4. arraycopy(...)数组快速复制","slug":"🔹-4-arraycopy-数组快速复制","link":"#🔹-4-arraycopy-数组快速复制","children":[]},{"level":3,"title":"🔹 5. getProperty() / setProperty()系统属性","slug":"🔹-5-getproperty-setproperty-系统属性","link":"#🔹-5-getproperty-setproperty-系统属性","children":[]},{"level":3,"title":"🔹 6. getenv()获取环境变量","slug":"🔹-6-getenv-获取环境变量","link":"#🔹-6-getenv-获取环境变量","children":[]},{"level":3,"title":"🔹 7. lineSeparator() 获取换行符","slug":"🔹-7-lineseparator-获取换行符","link":"#🔹-7-lineseparator-获取换行符","children":[]}]},{"level":2,"title":"📌 系统属性示例表（常用）","slug":"📌-系统属性示例表-常用","link":"#📌-系统属性示例表-常用","children":[]},{"level":2,"title":"🔍 System vs Runtime","slug":"🔍-system-vs-runtime","link":"#🔍-system-vs-runtime","children":[]},{"level":2,"title":"🚀 示例：打印所有系统属性","slug":"🚀-示例-打印所有系统属性","link":"#🚀-示例-打印所有系统属性","children":[]},{"level":2,"title":"⚠️ 注意事项","slug":"⚠️-注意事项","link":"#⚠️-注意事项","children":[]},{"level":2,"title":"✅ 总结一句话：","slug":"✅-总结一句话","link":"#✅-总结一句话","children":[]}],"readingTime":{"minutes":2.39,"words":716},"filePathRelative":"Java/核心类库/System 类详解.md","excerpt":"\\n<p>java.lang.System 是 Java 标准库提供的一个工具类，它包含了一组 <strong>与系统交互的静态方法和标准对象引用</strong>，比如控制台输出、系统属性、环境变量、时间获取等。</p>\\n<h2><strong>✅ 基本特性</strong></h2>\\n<table>\\n<thead>\\n<tr>\\n<th><strong>特性</strong></th>\\n<th><strong>说明</strong></th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>是 final 类</td>\\n<td>不能被继承</td>\\n</tr>\\n<tr>\\n<td>构造方法私有</td>\\n<td>不能被实例化</td>\\n</tr>\\n<tr>\\n<td>所有方法都是静态的</td>\\n<td>直接通过 System.method() 使</td>\\n</tr>\\n</tbody>\\n</table>"}')}}]);