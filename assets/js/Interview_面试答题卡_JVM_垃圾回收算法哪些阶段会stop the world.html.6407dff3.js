"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[85161],{66262:(t,d)=>{d.A=(t,d)=>{const n=t.__vccOpts||t;for(const[t,r]of d)n[t]=r;return n}},53506:(t,d,n)=>{n.r(d),n.d(d,{comp:()=>l,data:()=>e});var r=n(20641);const o={},l=(0,n(66262).A)(o,[["render",function(t,d){return(0,r.uX)(),(0,r.CE)("div",null,d[0]||(d[0]=[(0,r.Fv)('<h1 id="☕-jvm面试答题卡-哪些垃圾回收阶段会-stw" tabindex="-1"><a class="header-anchor" href="#☕-jvm面试答题卡-哪些垃圾回收阶段会-stw"><span>☕ JVM面试答题卡：哪些垃圾回收阶段会 STW？</span></a></h1><blockquote><p>JVM 会在某些 GC 阶段<strong>暂停所有用户线程（包括主线程）</strong>，只运行 GC 线程。这种行为叫做 “Stop The World”。</p></blockquote><hr><h2 id="📦-哪些垃圾回收阶段会-stw" tabindex="-1"><a class="header-anchor" href="#📦-哪些垃圾回收阶段会-stw"><span>📦 哪些垃圾回收阶段会 STW？</span></a></h2><table><thead><tr><th>回收器</th><th>GC 类型</th><th>Stop The World 发生阶段</th></tr></thead><tbody><tr><td><strong>Serial</strong></td><td>Minor/Full</td><td>✅ 整个回收过程都会 STW（单线程回收）</td></tr><tr><td><strong>Parallel</strong></td><td>Minor/Full</td><td>✅ 整个回收过程 STW（多线程提升了回收速度）</td></tr><tr><td><strong>CMS</strong></td><td>Minor</td><td>✅ 是（使用默认 <code>ParNew</code> 执行 Young GC）</td></tr><tr><td></td><td>Major (老年代)</td><td>部分阶段 STW（如初始标记、重新标记）</td></tr><tr><td><strong>G1</strong></td><td>Young</td><td>✅ 是（Young GC 是 STW 的）</td></tr><tr><td></td><td>Mixed/Major</td><td>✅ 初始标记和最终标记阶段 STW</td></tr><tr><td><strong>ZGC</strong></td><td>并发回收</td><td>✅ 初始标记、最终标记 是 STW，但耗时非常短</td></tr><tr><td><strong>Shenandoah</strong></td><td>并发回收</td><td>✅ 初始标记、最终标记 是 STW，但延迟极小</td></tr></tbody></table><hr><h2 id="🧩-分析-不同阶段是否-stw" tabindex="-1"><a class="header-anchor" href="#🧩-分析-不同阶段是否-stw"><span>🧩 分析：不同阶段是否 STW</span></a></h2><p>对于多数回收器，以下两个阶段<strong>几乎总是 STW</strong>：</p><table><thead><tr><th>阶段名</th><th>是否 STW</th><th>说明</th></tr></thead><tbody><tr><td>初始标记</td><td>✅ 是</td><td>标记 GC Roots 直接可达对象，需暂停应用线程</td></tr><tr><td>最终标记</td><td>✅ 是</td><td>重新扫描标记遗漏的对象，确保准确性</td></tr></tbody></table><p>对于 <strong>Serial/Parallel</strong> 收集器来说，整个回收过程都是 STW； 对于 <strong>CMS/G1/ZGC</strong>，则优化了部分阶段为并发执行，但仍需 STW 开始或结束阶段。</p><hr><h2 id="✅-举例-cms-回收器-stw-阶段" tabindex="-1"><a class="header-anchor" href="#✅-举例-cms-回收器-stw-阶段"><span>✅ 举例：CMS 回收器 STW 阶段</span></a></h2><p>CMS 分为多个阶段：</p><ol><li><strong>初始标记</strong>（STW ✅）</li><li>并发标记（非 STW ❌）</li><li>并发预清理（非 STW ❌）</li><li><strong>重新标记</strong>（STW ✅）</li><li>并发清理（非 STW ❌）</li><li>重置（可能 STW）</li></ol><hr><h2 id="🧠-小结-垃圾回收中的-stw-发生阶段" tabindex="-1"><a class="header-anchor" href="#🧠-小结-垃圾回收中的-stw-发生阶段"><span>🧠 小结：垃圾回收中的 STW 发生阶段</span></a></h2><ul><li>✅ 所有 GC 都在<strong>初始标记</strong>阶段 STW</li><li>✅ 几乎所有 GC 在<strong>最终标记</strong>阶段也会 STW</li><li>❌ ZGC、Shenandoah 等低延迟 GC 将其它阶段并发化</li><li>❌ CMS 除初始/重新标记外大多并发</li><li>❌ G1 除 initial/final mark 外，标记/回收都是并发</li></ul><hr><h2 id="📚-补充建议" tabindex="-1"><a class="header-anchor" href="#📚-补充建议"><span>📚 补充建议</span></a></h2><blockquote><p>面试常问：“为什么 GC 会 Stop The World？是否可以避免？”</p></blockquote><p>你可以回答：</p><blockquote><p>GC 为保证内存结构一致性，在标记活对象或移动对象时需要暂停应用线程，以避免并发修改产生的不一致性。现代 GC（如 ZGC、Shenandoah）通过并发标记与并发清理，显著缩短 STW 时间，提升响应性能。</p></blockquote>',22)]))}]]),e=JSON.parse('{"path":"/Interview/%E9%9D%A2%E8%AF%95%E7%AD%94%E9%A2%98%E5%8D%A1/JVM/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95%E5%93%AA%E4%BA%9B%E9%98%B6%E6%AE%B5%E4%BC%9Astop%20the%20world.html","title":"哪些垃圾回收阶段会 STW？","lang":"zh-CN","frontmatter":{"title":"哪些垃圾回收阶段会 STW？","icon":"fa-solid fa-hourglass-half","date":"2025-07-13T00:00:00.000Z","author":"JeanHu","category":["JVM","GC机制"],"tag":["JVM","Stop The World","GC阶段","回收器对比"],"summary":"本文总结了不同垃圾回收器中会触发 Stop The World（STW）的阶段，帮助读者理解各类 GC 策略下暂停的原理与行为特征，为调优 GC 停顿时间提供依据。","gitInclude":[]},"headers":[{"level":2,"title":"📦 哪些垃圾回收阶段会 STW？","slug":"📦-哪些垃圾回收阶段会-stw","link":"#📦-哪些垃圾回收阶段会-stw","children":[]},{"level":2,"title":"🧩 分析：不同阶段是否 STW","slug":"🧩-分析-不同阶段是否-stw","link":"#🧩-分析-不同阶段是否-stw","children":[]},{"level":2,"title":"✅ 举例：CMS 回收器 STW 阶段","slug":"✅-举例-cms-回收器-stw-阶段","link":"#✅-举例-cms-回收器-stw-阶段","children":[]},{"level":2,"title":"🧠 小结：垃圾回收中的 STW 发生阶段","slug":"🧠-小结-垃圾回收中的-stw-发生阶段","link":"#🧠-小结-垃圾回收中的-stw-发生阶段","children":[]},{"level":2,"title":"📚 补充建议","slug":"📚-补充建议","link":"#📚-补充建议","children":[]}],"readingTime":{"minutes":2.21,"words":664},"filePathRelative":"Interview/面试答题卡/JVM/垃圾回收算法哪些阶段会stop the world.md","localizedDate":"2025年7月13日","excerpt":"\\n<blockquote>\\n<p>JVM 会在某些 GC 阶段<strong>暂停所有用户线程（包括主线程）</strong>，只运行 GC 线程。这种行为叫做 “Stop The World”。</p>\\n</blockquote>\\n<hr>\\n<h2>📦 哪些垃圾回收阶段会 STW？</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>回收器</th>\\n<th>GC 类型</th>\\n<th>Stop The World 发生阶段</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><strong>Serial</strong></td>\\n<td>Minor/Full</td>\\n<td>✅ 整个回收过程都会 STW（单线程回收）</td>\\n</tr>\\n<tr>\\n<td><strong>Parallel</strong></td>\\n<td>Minor/Full</td>\\n<td>✅ 整个回收过程 STW（多线程提升了回收速度）</td>\\n</tr>\\n<tr>\\n<td><strong>CMS</strong></td>\\n<td>Minor</td>\\n<td>✅ 是（使用默认 <code>ParNew</code> 执行 Young GC）</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>Major (老年代)</td>\\n<td>部分阶段 STW（如初始标记、重新标记）</td>\\n</tr>\\n<tr>\\n<td><strong>G1</strong></td>\\n<td>Young</td>\\n<td>✅ 是（Young GC 是 STW 的）</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>Mixed/Major</td>\\n<td>✅ 初始标记和最终标记阶段 STW</td>\\n</tr>\\n<tr>\\n<td><strong>ZGC</strong></td>\\n<td>并发回收</td>\\n<td>✅ 初始标记、最终标记 是 STW，但耗时非常短</td>\\n</tr>\\n<tr>\\n<td><strong>Shenandoah</strong></td>\\n<td>并发回收</td>\\n<td>✅ 初始标记、最终标记 是 STW，但延迟极小</td>\\n</tr>\\n</tbody>\\n</table>"}')}}]);