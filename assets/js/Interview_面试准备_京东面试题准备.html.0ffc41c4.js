"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[31769],{66262:(l,n)=>{n.A=(l,n)=>{const s=l.__vccOpts||l;for(const[l,i]of n)s[l]=i;return s}},75690:(l,n,s)=>{s.r(n),s.d(n,{comp:()=>r,data:()=>e});var i=s(20641);const t={},r=(0,s(66262).A)(t,[["render",function(l,n){return(0,i.uX)(),(0,i.CE)("div",null,n[0]||(n[0]=[(0,i.Fv)('<h1 id="京东面试准备" tabindex="-1"><a class="header-anchor" href="#京东面试准备"><span>京东面试准备</span></a></h1><h3 id="_1-一个标准的-java-web-请求-从前端到数据库-都经历了哪些环节" tabindex="-1"><a class="header-anchor" href="#_1-一个标准的-java-web-请求-从前端到数据库-都经历了哪些环节"><span>1.一个标准的 Java Web 请求，从前端到数据库，都经历了哪些环节？</span></a></h3><h3 id="面试答案示例" tabindex="-1"><a class="header-anchor" href="#面试答案示例"><span>面试答案示例</span></a></h3><p>一个标准的 Java Web 请求从前端到数据库，大致经历以下环节：</p><ol><li><strong>前端发起请求</strong><ul><li>用户操作触发 HTTP 请求（GET/POST）。</li><li>请求可携带参数、Cookie、Token 等认证信息。</li></ul></li><li><strong>网络传输</strong><ul><li>请求通过 TCP/IP 到达服务器。</li><li>如果有负载均衡（如 Nginx），请求先经过反向代理、SSL 解密，并分发到具体后端实例。</li></ul></li><li><strong>Web 容器接收请求</strong><ul><li>Tomcat/Jetty/Undertow 解析 HTTP 请求，创建 Request/Response 对象。</li><li>通过线程池分配线程处理请求。</li></ul></li><li><strong>Spring MVC / Controller 层</strong><ul><li>DispatcherServlet 接收请求并分发到对应 Controller。</li><li>Controller 处理请求参数并调用 Service 层。</li></ul></li><li><strong>Service 层业务处理</strong><ul><li>处理核心业务逻辑。</li><li>调用 DAO 层访问数据库。</li><li>可以结合缓存（Redis）或异步线程池优化性能。</li></ul></li><li><strong>DAO / 数据库访问</strong><ul><li>使用 MyBatis / JPA / JDBC 执行 SQL。</li><li>从数据库连接池获取连接 → 执行 SQL → 返回结果 → 归还连接。</li></ul></li><li><strong>数据库执行</strong><ul><li>数据库查询优化器解析 SQL，生成执行计划。</li><li>从缓存或磁盘读取数据并返回结果集。</li></ul></li><li><strong>返回前端</strong><ul><li>Service 层将数据封装为 DTO/VO 返回 Controller。</li><li>Controller 以 JSON/XML 响应给前端。</li><li>前端接收数据并进行渲染。</li></ul></li><li><strong>可选优化环节</strong><ul><li><strong>缓存优化</strong>：先查 Redis，减少数据库访问。</li><li><strong>异步消息</strong>：通过 RabbitMQ/Kafka 异步处理耗时任务。</li><li><strong>监控与日志</strong>：AOP 日志、链路追踪（Sleuth/Zipkin/SkyWalking）。</li></ul></li></ol><h3 id="_2-详细讲讲-tcp-的三次握手" tabindex="-1"><a class="header-anchor" href="#_2-详细讲讲-tcp-的三次握手"><span>2.详细讲讲 TCP 的三次握手？</span></a></h3><p><strong>1️⃣ 第一次握手：客户端 → 服务端</strong></p><ul><li>客户端发送一个 <strong>SYN</strong> 报文（SYN = 1），表示客户端想建立连接。</li><li>报文中包含客户端的初始序列号（ISN，Initial Sequence Number）。</li><li>客户端进入 <strong>SYN_SENT</strong> 状态。</li></ul><p><strong>2️⃣ 第二次握手：服务端 → 客户端</strong></p><ul><li>服务端收到 SYN 后，响应 <strong>SYN+ACK</strong> 报文。 <ul><li><strong>SYN = 1</strong> 表示服务端同意建立连接。</li><li><strong>ACK</strong> = 客户端的 ISN + 1，确认客户端的 SYN。</li></ul></li><li>服务端生成自己的初始序列号（ISN）。</li><li>服务端进入 <strong>SYN_RECEIVED</strong> 状态。</li></ul><p><strong>3️⃣ 第三次握手：客户端 → 服务端</strong></p><ul><li>客户端收到服务端的 SYN+ACK 后，发送 <strong>ACK</strong> 报文给服务端， <ul><li><strong>ACK</strong> = 服务端的 ISN + 1，确认服务端的 SYN。</li></ul></li><li>客户端进入 <strong>ESTABLISHED</strong> 状态。</li><li>服务端收到 ACK 后，也进入 <strong>ESTABLISHED</strong> 状态。</li><li>连接建立完成，可以进行数据传输。</li></ul><hr><p><strong>三次握手的作用</strong></p><ol><li><strong>确认双方的发送和接收能力</strong><ul><li>第一次握手确认客户端能发送报文。</li><li>第二次握手确认服务端能接收报文并能发送报文。</li><li>第三次握手确认客户端能接收报文。</li></ul></li><li><strong>初始化序列号</strong><ul><li>用于后续可靠传输的数据排序、确认。</li></ul></li></ol><hr><p><strong>小知识点 / 面试加分</strong></p><ul><li>为什么三次而不是两次？ <ul><li>如果只用两次握手，客户端可能误以为连接建立成功，而服务端没有收到确认，可能导致半开连接。</li></ul></li><li>三次握手完成后才能发送数据，保证可靠传输。</li><li>四次挥手（TCP断开连接）与三次握手类似，但更复杂，因为关闭是双向的。</li></ul><h3 id="_3-你用的哪个-jdk-版本-调过-jvm-参数吗-了解哪些主要参数" tabindex="-1"><a class="header-anchor" href="#_3-你用的哪个-jdk-版本-调过-jvm-参数吗-了解哪些主要参数"><span>3.你用的哪个 JDK 版本？调过 JVM 参数吗？了解哪些主要参数？</span></a></h3><p><strong>1️⃣ JDK 版本</strong></p><ul><li>我平时开发主要使用 <strong>Java 1.8（Java 8）</strong>，也了解 <strong>Java 11 的新特性</strong>。</li><li>在项目中，使用 Java 8 Stream API、CompletableFuture、Lambda 表达式等提高代码简洁性和效率。</li></ul><hr><p><strong>2️⃣ JVM 参数</strong></p><p>我在生产环境或性能调优中有调优 JVM 参数的经验，主要涉及：</p><p><strong>堆内存相关</strong></p><ul><li><code>-Xms</code>：初始堆大小</li><li><code>-Xmx</code>：最大堆大小</li><li><code>-Xmn</code>：新生代大小</li><li><code>-XX:SurvivorRatio</code>：Eden 与 Survivor 空间比例</li></ul><p><strong>垃圾回收器相关</strong></p><ul><li><code>-XX:+UseG1GC</code> / <code>-XX:+UseParallelGC</code>：选择垃圾回收器</li><li><code>-XX:MaxGCPauseMillis</code>：G1 最大停顿时间</li><li><code>-XX:+PrintGCDetails</code>、<code>-Xloggc:gc.log</code>：打印 GC 日志</li></ul><p><strong>其他常用参数</strong></p><ul><li><code>-XX:+HeapDumpOnOutOfMemoryError</code>：OOM 时生成堆转储</li><li><code>-XX:MetaspaceSize</code> / <code>-XX:MaxMetaspaceSize</code>：元空间大小</li><li><code>-XX:+UseCompressedOops</code>：压缩对象指针</li></ul><hr><p>💡 <strong>回答加分点</strong></p><ul><li>可以结合实际项目讲：比如“在我们的高并发数据处理项目中，我通过调整 <code>Xmx</code> 与 <code>Xms</code> 减少堆内存扩展频率，通过 G1GC 控制 GC 停顿时间，避免响应延迟。”</li><li>展示你不仅会设置参数，还能 <strong>分析内存、定位性能瓶颈</strong>。</li></ul><h3 id="_4-了解哪些垃圾回收器和算法-cms-和-g1-对比过吗" tabindex="-1"><a class="header-anchor" href="#_4-了解哪些垃圾回收器和算法-cms-和-g1-对比过吗"><span>4.了解哪些垃圾回收器和算法？CMS 和 G1 对比过吗？</span></a></h3><p><strong>1️⃣ 常见垃圾回收器（GC）</strong></p><p>Java 提供多种 GC，主要包括：</p><table><thead><tr><th>垃圾回收器</th><th>适用场景</th><th>特点</th></tr></thead><tbody><tr><td>Serial GC</td><td>单核或小堆</td><td>单线程，STW 停顿，简单高效</td></tr><tr><td>Parallel GC</td><td>多核、大吞吐量</td><td>多线程，STW 停顿，优化吞吐量</td></tr><tr><td>CMS（Concurrent Mark-Sweep）</td><td>响应时间敏感应用</td><td>并发标记-清理，减少 STW 停顿，但可能产生内存碎片</td></tr><tr><td>G1（Garbage-First）</td><td>大堆、低延迟</td><td>分代收集，按区域回收，控制停顿时间，支持预测性 GC</td></tr><tr><td>ZGC / Shenandoah</td><td>超大堆、低延迟</td><td>基于标记-整理的并发 GC，极低停顿 (&lt;10ms)</td></tr></tbody></table><hr><p><strong>2️⃣ CMS 与 G1 对比</strong></p><table><thead><tr><th>特性</th><th>CMS</th><th>G1GC</th></tr></thead><tbody><tr><td>堆管理</td><td>年轻代/老年代</td><td>区域（Region）划分，不固定代</td></tr><tr><td>收集策略</td><td>并发标记 + 清理</td><td>并发标记 + 并行整理 + 回收优先区域</td></tr><tr><td>停顿</td><td>STW 少，但不固定</td><td>可预测停顿时间，通过 pause-time 目标控制</td></tr><tr><td>内存碎片</td><td>可能产生碎片，需要 Full GC 整理</td><td>区域回收，减少碎片问题</td></tr><tr><td>使用场景</td><td>对延迟敏感，中等堆</td><td>大堆、低延迟、高吞吐量系统</td></tr><tr><td>调优难度</td><td>较高，需要关注碎片和 Full GC</td><td>相对容易，提供 pause-time 参数调控停顿</td></tr></tbody></table><p><strong>总结</strong>：</p><ul><li>CMS 优势：适合对响应时间敏感的应用，但大堆容易碎片化。</li><li>G1 优势：大堆低延迟，预测性好，已经逐步替代 CMS。</li></ul><hr><p>💡 <strong>面试答题技巧</strong> 可以说：“我在生产环境中使用过 G1GC，设置了 <code>-XX:MaxGCPauseMillis</code> 控制停顿时间，并通过 JVisualVM / GC 日志分析堆内存和 GC 行为，实现低延迟处理大数据量。”</p><h3 id="_5-遇到过哪些-java-oom-的场景-怎么处理的" tabindex="-1"><a class="header-anchor" href="#_5-遇到过哪些-java-oom-的场景-怎么处理的"><span>5.遇到过哪些 Java OOM 的场景？怎么处理的？</span></a></h3><p><strong>1️⃣ 常见 OOM 场景</strong></p><table><thead><tr><th>场景</th><th>说明</th></tr></thead><tbody><tr><td>堆内存溢出（Java heap space）</td><td>大量对象同时存在或缓存无限增长，导致堆空间耗尽。</td></tr><tr><td>方法区/元空间溢出（Metaspace / PermGen）</td><td>加载类过多或动态生成类过多，导致方法区/元空间耗尽。</td></tr><tr><td>本地内存溢出</td><td>大量直接内存（DirectByteBuffer）或 JNI 调用未释放，导致本地内存耗尽。</td></tr><tr><td>GC 过频导致 OOM</td><td>GC 无法及时回收大量对象，造成老年代溢出。</td></tr></tbody></table><hr><p><strong>2️⃣ 案例分析（结合项目经验）</strong></p><blockquote><p><strong>项目背景</strong>：在侦查需求统筹系统中，有一个查询功能需要整合多个下级节点数据，每次请求返回的数据量可能非常大。</p><p><strong>问题</strong>：使用 <code>Java8 Stream</code> 对大量数据进行流式处理时，如果一次性全部加载到内存中，偶尔会触发 <code>java.lang.OutOfMemoryError: Java heap space</code>。</p></blockquote><hr><p><strong>3️⃣ 处理方案</strong></p><ol><li><strong>优化内存使用</strong><ul><li>分批次加载数据（分页查询），避免一次性加载大量对象。</li><li>对中间状态使用缓存（如 Redis），减少堆内存占用。</li></ul></li><li><strong>调整 JVM 参数</strong><ul><li>根据服务器内存调整堆大小：<code>-Xmx</code>、<code>-Xms</code>。</li><li>使用 G1GC 或 CMS，降低 Full GC 停顿，改善内存回收效率。</li></ul></li><li><strong>代码层面优化</strong><ul><li>对大对象及时置为 <code>null</code>，便于 GC 回收。</li><li>避免大量重复对象，可用 Flyweight 或缓存策略。</li><li>对大集合使用 <code>LinkedList</code> 或流式处理，减少堆占用。</li></ul></li><li><strong>监控与诊断</strong><ul><li>使用 <code>jmap</code>、<code>jvisualvm</code> 或 <code>Flight Recorder</code> 分析堆内存。</li><li>定期分析 GC 日志，定位内存泄漏或大对象分布。</li></ul></li></ol><hr><p>💡 <strong>面试回答示例</strong></p><blockquote><p>“在项目中，我遇到过一次大数据量查询导致堆内存溢出的情况。我通过分批加载数据、使用 Redis 缓存中间状态，并优化流式计算逻辑，同时调整 JVM 堆大小和 G1GC 参数，有效解决了 OOM 问题，并保证前端响应速度。后来我还通过 jvisualvm 分析堆，避免类似问题再次发生。”</p></blockquote><h3 id="_6-concurrenthashmap-和-hashmap-的区别" tabindex="-1"><a class="header-anchor" href="#_6-concurrenthashmap-和-hashmap-的区别"><span>6.ConcurrentHashMap 和 HashMap 的区别</span></a></h3><p><strong>ConcurrentHashMap 和 HashMap 的区别</strong></p><ol><li><strong>底层结构</strong><ul><li><strong>HashMap（JDK 1.8 以后）</strong>：数组 + 链表/红黑树（链表过长时转为红黑树）。</li><li><strong>ConcurrentHashMap</strong>：同样是数组 + 链表/红黑树，但在并发控制上更复杂。</li></ul></li><li><strong>线程安全</strong><ul><li><strong>HashMap</strong>：线程不安全，多线程环境可能导致数据错乱或死循环。</li><li><strong>ConcurrentHashMap</strong>：线程安全，JDK 1.7 采用分段锁，JDK 1.8 改为 <strong>CAS + synchronized 锁桶</strong>，保证并发安全。</li></ul></li><li><strong>并发性能</strong><ul><li>HashMap 在并发环境下需要额外加锁（如 <code>Collections.synchronizedMap</code> 或手动加锁），性能差。</li><li>ConcurrentHashMap 通过 <strong>无锁读、CAS + 局部加锁写</strong> 来保证高并发下的效率，读多写少场景表现非常好。</li></ul></li></ol><hr><p><strong>为什么要用 ConcurrentHashMap？</strong></p><ul><li><strong>线程安全</strong>：避免 HashMap 在多线程下的数据覆盖和异常问题。</li><li><strong>高性能</strong>：读操作无锁，写操作粒度小，性能比全局加锁要高得多。</li><li><strong>适用场景</strong>：缓存、配置中心、会话存储等高并发读写的场景。</li></ul><hr><p><strong>面试简洁回答（可直接背）</strong></p><blockquote><p>“HashMap 线程不安全，底层是数组加链表或红黑树。</p><p>ConcurrentHashMap 线程安全，JDK1.7 用分段锁，JDK1.8 之后改成 CAS + synchronized 锁桶机制，读无锁写局部加锁。</p><p>它的优势是既保证线程安全，又能在高并发场景下保持较高性能，所以更适合在缓存或配置管理等并发读写场景使用。”</p></blockquote><h3 id="_7-java-里有哪些锁机制-cas-乐观锁和悲观锁是怎么实现的" tabindex="-1"><a class="header-anchor" href="#_7-java-里有哪些锁机制-cas-乐观锁和悲观锁是怎么实现的"><span>7.Java 里有哪些锁机制？CAS 乐观锁和悲观锁是怎么实现的？</span></a></h3><blockquote><p>Java 里常见的锁有 synchronized、ReentrantLock、读写锁和 StampedLock。悲观锁认为并发冲突一定会发生，像 synchronized、ReentrantLock 都属于悲观锁；乐观锁认为冲突不一定发生，所以用 CAS 或版本号来保证数据一致性。CAS 的实现原理是比较内存值和期望值是否一致，一致则更新，不一致就重试。Java 的原子类就是基于 CAS 实现的。</p></blockquote><p><strong>Java 里的锁机制</strong></p><p>Java 中常见的锁机制主要包括：</p><ol><li><strong>synchronized（内置锁/重量级锁）</strong><ul><li>作用于方法或代码块，基于 <strong>对象监视器（Monitor）</strong> 实现。</li><li>JDK1.6 之后引入了锁升级机制：<strong>偏向锁 → 轻量级锁 → 重量级锁</strong>，提高了性能。</li></ul></li><li><strong>ReentrantLock（可重入锁）</strong><ul><li>JUC 包下的显式锁，功能比 synchronized 更丰富。</li><li>支持 <strong>公平锁 / 非公平锁</strong>、<strong>可中断锁</strong>、<strong>尝试获取锁 tryLock()</strong> 等。</li></ul></li><li><strong>读写锁（ReentrantReadWriteLock）</strong><ul><li>读写分离，提高并发性能： <ul><li>读锁共享（多个线程可同时读）。</li><li>写锁独占（写操作必须独占）。</li></ul></li></ul></li><li><strong>StampedLock（JDK 8 引入）</strong><ul><li>提供乐观读锁，进一步减少读操作的锁竞争。</li></ul></li></ol><hr><p><strong>乐观锁 vs 悲观锁</strong></p><ol><li><strong>悲观锁</strong><ul><li>思想：认为竞争一定会发生，所以在操作数据前先上锁，避免并发冲突。</li><li><strong>实现</strong>： <ul><li>Java 中：<code>synchronized</code>、<code>ReentrantLock</code>。</li><li>数据库中：<code>select ... for update</code>。</li></ul></li></ul></li><li><strong>乐观锁</strong><ul><li>思想：认为冲突不一定发生，所以先不加锁，更新时通过 <strong>版本号/时间戳</strong> 或 <strong>CAS</strong> 来检测是否有冲突。</li><li><strong>实现</strong>： <ul><li>Java 中：<code>CAS（Compare And Swap）</code>。</li><li>数据库中：乐观锁字段（如 <code>version</code> 字段，每次更新时 +1）。</li></ul></li></ul></li></ol><hr><p><strong>CAS（Compare And Swap）实现原理</strong></p><ul><li><strong>CAS</strong>：比较内存中的值是否等于预期值，如果相等就更新为新值，否则失败并重试。</li><li><strong>原子类（AtomicInteger/AtomicLong）</strong> 就是基于 <strong>CAS + volatile</strong> 实现的。</li><li>问题：ABA 问题、自旋开销大。解决方案：<strong>AtomicStampedReference</strong> 或引入 <strong>自适应自旋</strong>。</li></ul><h3 id="_8-java-多线程有哪几种创建和管理方式-了解线程池的哪些参数" tabindex="-1"><a class="header-anchor" href="#_8-java-多线程有哪几种创建和管理方式-了解线程池的哪些参数"><span>8.Java 多线程有哪几种创建和管理方式？了解线程池的哪些参数？</span></a></h3><p>Java 提供了多种方式来创建和管理线程，大体分为以下几类：</p><ol><li><strong>直接创建线程</strong></li></ol><ul><li><p><strong>继承 Thread 类</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>class MyThread extends Thread {</span></span>\n<span class="line"><span>    @Override</span></span>\n<span class="line"><span>    public void run() {</span></span>\n<span class="line"><span>        System.out.println(&quot;线程运行中...&quot;);</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span>new MyThread().start();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>实现 Runnable 接口</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>class MyTask implements Runnable {</span></span>\n<span class="line"><span>    @Override</span></span>\n<span class="line"><span>    public void run() {</span></span>\n<span class="line"><span>        System.out.println(&quot;线程运行中...&quot;);</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span>\n<span class="line"><span>new Thread(new MyTask()).start();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>实现 Callable 接口 + FutureTask</strong>（能返回结果/抛异常）</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Callable&lt;Integer&gt; task = () -&gt; 123;</span></span>\n<span class="line"><span>FutureTask&lt;Integer&gt; futureTask = new FutureTask&lt;&gt;(task);</span></span>\n<span class="line"><span>new Thread(futureTask).start();</span></span>\n<span class="line"><span>Integer result = futureTask.get();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><ol start="2"><li><strong>使用线程池 (Executor 框架)</strong></li></ol><p>线程池是更推荐的方式，避免频繁创建/销毁线程，提升性能。 常见工具类：<code>Executors</code>、<code>ThreadPoolExecutor</code>、<code>ForkJoinPool</code>、<code>ScheduledThreadPool</code> 等。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ExecutorService executor = Executors.newFixedThreadPool(5);</span></span>\n<span class="line"><span>executor.submit(() -&gt; System.out.println(&quot;任务执行&quot;));</span></span>\n<span class="line"><span>executor.shutdown();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><ol start="3"><li><strong>更高级的并发工具</strong></li></ol><ul><li><strong>CompletableFuture</strong>：支持异步编程、任务组合。</li><li><strong>ForkJoinPool</strong>：适合大任务拆分成子任务并行处理。</li><li><strong>ScheduledExecutorService</strong>：定时/周期性任务。</li></ul><hr><p><strong>线程池的核心参数 (ThreadPoolExecutor)</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>public ThreadPoolExecutor(</span></span>\n<span class="line"><span>    int corePoolSize,          // 核心线程数（长期驻留）</span></span>\n<span class="line"><span>    int maximumPoolSize,       // 最大线程数</span></span>\n<span class="line"><span>    long keepAliveTime,        // 空闲线程存活时间</span></span>\n<span class="line"><span>    TimeUnit unit,             // 存活时间单位</span></span>\n<span class="line"><span>    BlockingQueue&lt;Runnable&gt; workQueue, // 任务队列</span></span>\n<span class="line"><span>    ThreadFactory threadFactory,       // 线程工厂（可定制线程名）</span></span>\n<span class="line"><span>    RejectedExecutionHandler handler   // 拒绝策略</span></span>\n<span class="line"><span>)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>参数说明</strong></p><ol><li><strong>corePoolSize</strong> 常驻的核心线程数。线程池创建后即使空闲，也会保留这么多线程。</li><li><strong>maximumPoolSize</strong> 池中允许的最大线程数。超过核心线程数的任务会进入队列，若队列满了，就会新建线程，直到到达 <code>maximumPoolSize</code>。</li><li><strong>keepAliveTime</strong> + <strong>unit</strong> 非核心线程（超过 corePoolSize 的线程）空闲多久会被回收。</li><li><strong>workQueue（阻塞队列）</strong><ul><li><code>ArrayBlockingQueue</code>：有界队列，公平/非公平。</li><li><code>LinkedBlockingQueue</code>：无界/大容量队列。</li><li><code>SynchronousQueue</code>：不存储任务，必须直接交给线程。</li></ul></li><li><strong>threadFactory</strong> 用来自定义线程，比如设置线程名、是否为守护线程。</li><li><strong>handler（拒绝策略）</strong> 当线程数达到 <code>maximumPoolSize</code> 且队列已满时触发： <ul><li><code>AbortPolicy</code>（默认）：抛异常 <code>RejectedExecutionException</code>。</li><li><code>CallerRunsPolicy</code>：由调用线程执行任务。</li><li><code>DiscardPolicy</code>：直接丢弃任务，不抛异常。</li><li><code>DiscardOldestPolicy</code>：丢弃队列中最旧的任务，尝试执行新任务。</li></ul></li></ol><hr><p><strong>常见面试追问</strong></p><ol><li>为什么推荐用 <strong>线程池</strong> 而不是直接 <code>new Thread()</code>？ <ul><li>复用线程，减少频繁创建/销毁的开销。</li><li>提供统一的任务调度和管理机制。</li><li>可以控制最大并发数，避免资源耗尽。</li></ul></li><li>如何设置线程池参数？ <ul><li><strong>CPU 密集型</strong>：<code>corePoolSize = CPU核数 + 1</code></li><li><strong>IO 密集型</strong>：<code>corePoolSize = 2 * CPU核数</code> 或更高</li><li>根据实际业务的 <strong>吞吐量、延迟要求</strong> 来压测调优。</li></ul></li></ol><hr><p>✅ 总结： Java 多线程有 <strong>3 大类创建方式</strong>：Thread/Runnable/Callable → 线程池 → 高级并发工具。 线程池的 <strong>7 个关键参数</strong>（核心线程数、最大线程数、存活时间、单位、队列、工厂、拒绝策略）是面试重点，回答时最好结合 <strong>调优思路</strong> 来讲。</p><h3 id="_9-线程池的拒绝策略有哪些-项目里常用哪种-为啥" tabindex="-1"><a class="header-anchor" href="#_9-线程池的拒绝策略有哪些-项目里常用哪种-为啥"><span>9.线程池的拒绝策略有哪些？项目里常用哪种？为啥？</span></a></h3><p>Java 线程池在任务队列已满并且线程数达到最大值时，会触发 <strong>拒绝策略（RejectedExecutionHandler）</strong>，JDK 默认提供了 4 种：</p><ol><li><strong>AbortPolicy（默认）</strong><ul><li>直接抛出 <code>RejectedExecutionException</code> 异常，阻止任务继续提交。</li><li>使用场景：希望快速发现问题，避免任务被忽略。</li></ul></li><li><strong>CallerRunsPolicy</strong><ul><li>由提交任务的线程自己执行该任务。</li><li>使用场景：能降低新任务的提交速度，相当于“回压”，常用于流量削峰。</li></ul></li><li><strong>DiscardPolicy</strong><ul><li>直接丢弃任务，不抛异常。</li><li>使用场景：适合对任务丢失不敏感的场景，比如日志收集。</li></ul></li><li><strong>DiscardOldestPolicy</strong><ul><li>丢弃队列中最旧的任务，然后尝试重新提交当前任务。</li><li>使用场景：适合“最新数据优先”的场景，比如消息通知。</li></ul></li></ol><hr><p><strong>项目里常用：</strong> 我常用 <strong>CallerRunsPolicy</strong>，因为它能在任务过载时让提交线程自己去执行任务，从而降低任务的提交速率，起到削峰和保护线程池的作用。这样能避免任务丢失，同时不会无限制扩展队列，比较适合高并发请求的处理场景。</p><p><strong>在需求统筹系统里选择 CallerRunsPolicy 的原因：</strong></p><p>我们的系统在需求统筹和消解过程中，有些任务（例如数据同步、需求状态更新）对一致性和完整性要求比较高，不能轻易丢弃。</p><ul><li>如果用 <strong>DiscardPolicy</strong> 或 <strong>DiscardOldestPolicy</strong>，有可能导致需求状态更新丢失，前后端数据不一致。</li><li>如果用 <strong>AbortPolicy</strong>，高并发场景下直接抛异常，会对业务接口造成大量失败，用户体验差。</li><li><strong>CallerRunsPolicy</strong> 能够在线程池繁忙时，把部分任务交给提交线程去执行，相当于“削峰填谷”，一方面保证了任务不会被丢弃，另一方面也会降低新请求的速度，给系统一个“自我保护”的缓冲。</li></ul><p>这种方式特别适合我们系统的需求处理场景：</p><ul><li><strong>核心数据不丢失</strong>（保证业务逻辑可靠）；</li><li><strong>系统自动限流</strong>（防止过载导致雪崩）；</li><li><strong>用户可接受</strong>（延迟稍微增加，总比报错或数据丢失好）。</li></ul><h3 id="_10-开发时用-spring-spring-boot-吗-用什么框架操作数据库" tabindex="-1"><a class="header-anchor" href="#_10-开发时用-spring-spring-boot-吗-用什么框架操作数据库"><span>10.开发时用 Spring/Spring Boot 吗？用什么框架操作数据库？</span></a></h3><p>是的，项目开发主要用 <strong>Spring Boot</strong> 作为核心框架，部分场景也用到 <strong>Spring Cloud Alibaba</strong> 做微服务治理。 在数据库层面，主要使用 <strong>MyBatis 和 MyBatis Plus</strong>：</p><ul><li>MyBatis 用于灵活的 SQL 定制，方便处理复杂查询。</li><li>MyBatis Plus 用于简化 CRUD，提高开发效率。 同时在性能优化方面，会结合 <strong>分页插件、批量操作、SQL 优化（如联合索引、EXPLAIN 分析）</strong> 来保证数据库操作的高效性。</li></ul><h3 id="_11-mybatis-是怎么实现在同一个事务里操作两个表的" tabindex="-1"><a class="header-anchor" href="#_11-mybatis-是怎么实现在同一个事务里操作两个表的"><span>11.MyBatis 是怎么实现在同一个事务里操作两个表的？</span></a></h3><p><strong>1. 核心原理</strong></p><p>MyBatis 本身不管理事务，它依赖 <strong><code>SqlSession</code></strong> 来执行数据库操作。</p><ul><li>一个 <code>SqlSession</code> 绑定一个 JDBC 连接。</li><li>在同一个事务中，如果使用同一个 <code>SqlSession</code>，对多个表的操作就可以在同一个事务里执行。</li><li>提交事务时，所有操作统一提交；回滚事务时，所有操作统一回滚。</li></ul><hr><p><strong>2. Spring + MyBatis 的实现</strong></p><p>在 Spring Boot 项目中，一般通过 <strong><code>@Transactional</code></strong> 注解管理事务：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>@Service</span></span>\n<span class="line"><span>public class OrderService {</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    private final OrderMapper orderMapper;</span></span>\n<span class="line"><span>    private final InventoryMapper inventoryMapper;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    public OrderService(OrderMapper orderMapper, InventoryMapper inventoryMapper) {</span></span>\n<span class="line"><span>        this.orderMapper = orderMapper;</span></span>\n<span class="line"><span>        this.inventoryMapper = inventoryMapper;</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>    @Transactional</span></span>\n<span class="line"><span>    public void placeOrder(Order order, Inventory inventory) {</span></span>\n<span class="line"><span>        // 操作第一个表</span></span>\n<span class="line"><span>        orderMapper.insert(order);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        // 操作第二个表</span></span>\n<span class="line"><span>        inventoryMapper.updateInventory(inventory);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>        // 如果中间出现异常，整个事务回滚</span></span>\n<span class="line"><span>    }</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>✅ <strong>关键点</strong>：</p><ol><li><code>@Transactional</code> 作用在 Service 层，Spring 会使用 <strong>AOP 代理</strong>拦截方法。</li><li>方法内的多个 Mapper 调用共享同一个数据库连接。</li><li>出现异常时，Spring 会调用 JDBC 的回滚机制，保证两张表操作的一致性。</li></ol><hr><p><strong>3. 注意事项</strong></p><ul><li>只要在同一个事务方法里操作，多个表操作就会在同一事务。</li><li>异常必须是 <strong>未捕获的 RuntimeException 或 Error</strong>，Spring 才会回滚。</li><li>不要在事务方法内部调用同一个类的私有方法（AOP 代理不拦截内部调用）。</li></ul><h3 id="_13-开发中用过缓存吗-redis-用得多吗-了解哪些缓存淘汰策略" tabindex="-1"><a class="header-anchor" href="#_13-开发中用过缓存吗-redis-用得多吗-了解哪些缓存淘汰策略"><span>13.开发中用过缓存吗？Redis 用得多吗？了解哪些缓存淘汰策略？</span></a></h3><p><strong>1️⃣ 项目中使用缓存的场景</strong></p><ul><li>在 <strong>侦查需求统筹系统</strong> 中，我使用 <strong>Redis</strong> 缓存中间状态和统计信息，提升查询效率和系统响应速度。</li><li>对热点数据或跨表联合查询的数据，将结果存入 Redis，设置 <strong>1 分钟刷新策略</strong>，大幅减少数据库压力。</li><li>缓存不仅加快前端响应，也支持大数据量处理，提高系统吞吐量。</li></ul><hr><p><strong>2️⃣ Redis 使用经验</strong></p><ul><li><p>熟悉 Redis 的基本操作（字符串、哈希、列表、集合、有序集合）。</p></li><li><p>使用 Redis 实现高并发场景下的数据缓存、计数、会话存储。</p></li><li><p>实践过缓存更新策略：<strong>先更新数据库，再删除缓存</strong>，保证数据一致性。</p></li></ul><hr><p><strong>3️⃣ 缓存淘汰策略</strong></p><p>Redis 提供多种淘汰策略，应对内存有限和热点数据变化的场景：</p><table><thead><tr><th>策略</th><th>说明</th></tr></thead><tbody><tr><td><strong>noeviction</strong></td><td>不淘汰，写入超出 maxmemory 时返回错误</td></tr><tr><td><strong>allkeys-lru</strong></td><td>对所有 key 使用 LRU（最近最少使用）淘汰</td></tr><tr><td><strong>volatile-lru</strong></td><td>对设置了过期时间的 key 使用 LRU 淘汰</td></tr><tr><td><strong>allkeys-random</strong></td><td>对所有 key 随机淘汰</td></tr><tr><td><strong>volatile-random</strong></td><td>对设置了过期时间的 key 随机淘汰</td></tr><tr><td><strong>volatile-ttl</strong></td><td>优先淘汰 TTL（过期时间）较短的 key</td></tr></tbody></table><p>✅ <strong>实践选择</strong>：针对热点数据和高并发查询，一般使用 <strong>allkeys-lru</strong> 或 <strong>volatile-lru</strong> 策略，配合合理的过期时间设置，保证缓存命中率和内存利用率。</p><h3 id="_14-更新数据库时-怎么保证缓存和数据一致-怎么防止缓存击穿、雪崩、穿透" tabindex="-1"><a class="header-anchor" href="#_14-更新数据库时-怎么保证缓存和数据一致-怎么防止缓存击穿、雪崩、穿透"><span>14.更新数据库时，怎么保证缓存和数据一致？怎么防止缓存击穿、雪崩、穿透？</span></a></h3><p><strong>1️⃣ 缓存与数据库一致性</strong></p><p>在更新数据库时，要保证缓存和数据库一致，一般有以下几种策略：</p><p><strong>（1）先更新数据库，再删除缓存（推荐）</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>流程：</span></span>\n<span class="line"><span>1. 更新数据库</span></span>\n<span class="line"><span>2. 删除缓存</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>说明：</span></span>\n<span class="line"><span>- 保证缓存不存旧数据</span></span>\n<span class="line"><span>- 避免先更新缓存导致数据回滚时缓存不一致</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（2）先删除缓存，再更新数据库</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>流程：</span></span>\n<span class="line"><span>1. 删除缓存</span></span>\n<span class="line"><span>2. 更新数据库</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>说明：</span></span>\n<span class="line"><span>- 可能出现“缓存击穿”问题（缓存被删除，短时间内大量请求落到数据库）</span></span>\n<span class="line"><span>- 需要配合重试或锁机制</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>（3）直接更新数据库 + 缓存</strong></p><ul><li>适合延迟一致性要求高的场景</li><li>可异步刷新缓存，比如通过 <strong>消息队列</strong> 通知缓存更新</li></ul><p>✅ <strong>总结</strong>：推荐 <strong>先更新数据库，再删除缓存</strong> 或 <strong>使用异步消息队列刷新缓存</strong>。</p><hr><p><strong>2️⃣ 防止缓存问题</strong></p><table><thead><tr><th>缓存问题</th><th>解决方案</th></tr></thead><tbody><tr><td><strong>缓存穿透</strong>（查询不存在的数据频繁打到 DB）</td><td>1. 使用布隆过滤器过滤非法请求 2. 缓存空结果（空对象）</td></tr><tr><td><strong>缓存击穿</strong>（热点数据过期，短时间大量请求打到 DB）</td><td>1. 加互斥锁（Mutex） 2. 先更新数据库再删除缓存 3. 采用单点更新 + 队列异步刷新</td></tr><tr><td><strong>缓存雪崩</strong>（大量 key 同时过期）</td><td>1. key 过期时间加随机值，避免同一时间失效 2. 多级缓存架构 3. 热点数据永不过期 + 后台刷新</td></tr></tbody></table><hr><p><strong>3️⃣ 项目实践示例（结合你的经验）</strong></p><ul><li>使用 <strong>Redis 缓存需求数据</strong>，每分钟刷新一次，减少数据库压力</li><li>对热点查询可加入 <strong>布隆过滤器</strong> 或空对象缓存，防止穿透</li><li>对关键操作采用 <strong>先更新数据库再删除缓存 + 异步刷新策略</strong>，保证缓存和数据库一致</li></ul><h3 id="_15-redis-的布隆过滤器原理是啥" tabindex="-1"><a class="header-anchor" href="#_15-redis-的布隆过滤器原理是啥"><span>15.Redis 的布隆过滤器原理是啥？</span></a></h3><p><strong>1️⃣ 基本原理</strong></p><ol><li><strong>位数组</strong>：布隆过滤器内部维护一个固定长度的二进制数组（bit array）。</li><li><strong>哈希函数</strong>：使用 <strong>k 个不同的哈希函数</strong>，将元素映射到位数组的 k 个位置。</li><li><strong>添加元素</strong>：对元素计算 k 个哈希值，将对应的 bit 位置置为 1。</li><li><strong>查询元素</strong>：同样对元素计算 k 个哈希值，检查对应 bit 是否全为 1。 <ul><li>如果全为 1 → 元素可能存在（存在一定的误判概率）。</li><li>如果有 0 → 元素一定不存在（没有误判）。</li></ul></li></ol><hr><p><strong>2️⃣ 特点</strong></p><ul><li><strong>空间效率高</strong>：比传统哈希表或集合占用内存少。</li><li><strong>支持快速判断元素是否存在</strong>：查询时间 O(k)。</li><li><strong>有误判概率</strong>：可能判断一个不存在的元素存在（false positive），但不会漏判存在的元素。</li></ul><hr><p><strong>3️⃣ 在 Redis 中的应用</strong></p><ul><li><strong>防止缓存穿透</strong>：比如用户输入一个不存在的 ID 查询数据库，布隆过滤器可以先判断是否存在，如果不存在直接返回，减少对数据库的访问。</li><li><strong>大规模唯一性判断</strong>：适合存储百万级甚至亿级数据而不占用太多内存。</li></ul><hr><p><strong>4️⃣ 注意点</strong></p><ul><li>布隆过滤器 <strong>不能删除元素</strong>（传统版本），删除可能导致误判。</li><li>随着元素增多，误判率会增加，需要合理设置 bit 数组长度和哈希函数数量。</li></ul><h3 id="_16-数据库用的-mysql-吗-为啥-mysql-用-b-树做索引-和-b-树有啥区别" tabindex="-1"><a class="header-anchor" href="#_16-数据库用的-mysql-吗-为啥-mysql-用-b-树做索引-和-b-树有啥区别"><span>16.数据库用的 MySQL 吗？为啥 MySQL 用 B+ 树做索引？和 B 树有啥区别？</span></a></h3><p><strong>MySQL 使用 B+ 树做索引的原因与 B 树区别</strong></p><p><strong>1️⃣ 为什么 MySQL 使用 B+ 树</strong></p><ul><li>MySQL InnoDB 存储引擎的 **聚簇索引（主键索引）**和辅助索引都是基于 <strong>B+ 树</strong> 实现的。</li><li><strong>原因</strong>： <ol><li><strong>范围查询效率高</strong>：B+ 树的叶子节点通过链表连接，可以快速进行范围扫描（如 <code>BETWEEN</code>、<code>&gt;</code>、<code>&lt;</code> 查询）。</li><li><strong>磁盘 IO 优化</strong>：B+ 树内部节点只存储 <strong>键值和子节点指针</strong>，叶子节点存储完整数据或行指针，减少磁盘读取次数，提高性能。</li><li><strong>所有数据都在叶子节点</strong>：非叶子节点只做导航，便于顺序访问和批量读取。</li></ol></li></ul><hr><p><strong>2️⃣ B 树与 B+ 树的区别</strong></p><table><thead><tr><th>特性</th><th>B 树</th><th>B+ 树</th></tr></thead><tbody><tr><td>数据存储</td><td>所有节点（内部和叶子）都存储数据</td><td>只有叶子节点存储数据，内部节点只存索引</td></tr><tr><td>叶子节点链表</td><td>无</td><td>有指针串联叶子节点，支持顺序遍历</td></tr><tr><td>范围查询</td><td>较慢，需要遍历多个节点</td><td>快速顺序访问，范围查询效率高</td></tr><tr><td>树高度</td><td>略低于 B+ 树</td><td>略高，但更利于磁盘 IO</td></tr><tr><td>磁盘存储优化</td><td>一般</td><td>内部节点更小，可装入更多索引，提高缓存命中率</td></tr></tbody></table><hr><p><strong>3️⃣ 总结</strong></p><ul><li>B+ 树适合数据库索引，因为它<strong>支持高效的范围查询</strong>、<strong>减少磁盘 IO</strong>，在大数据量情况下性能更稳定。</li><li>面试时可以强调：MySQL 使用 B+ 树是为了 <strong>查询效率和顺序访问优化</strong>。</li></ul><h3 id="_17-页面置换算法" tabindex="-1"><a class="header-anchor" href="#_17-页面置换算法"><span>17.页面置换算法</span></a></h3><p><strong>1️⃣ 先进先出（FIFO, First-In-First-Out）</strong></p><ul><li><strong>思想</strong>：最早进入内存的页面最先被替换。</li><li><strong>优点</strong>：实现简单，维护队列即可。</li><li><strong>缺点</strong>：不考虑页面使用频率，可能导致“Belady 异常”（增加内存反而增加缺页率）。</li></ul><hr><p><strong>2️⃣ 最近最少使用（LRU, Least Recently Used）</strong></p><ul><li><strong>思想</strong>：替换 <strong>最近最久未被访问</strong> 的页面。</li><li><strong>实现</strong>： <ul><li>使用链表或栈记录访问顺序。</li><li>可结合硬件访问位（reference bit）进行近似实现。</li></ul></li><li><strong>优点</strong>：比 FIFO 更合理，考虑了实际使用情况。</li><li><strong>缺点</strong>：维护开销大，时间复杂度可能较高。</li></ul><hr><p><strong>3️⃣ 最不常用（LFU, Least Frequently Used）</strong></p><ul><li><strong>思想</strong>：替换访问次数最少的页面。</li><li><strong>实现</strong>：每个页面维护访问计数器，选择计数最小的页面。</li><li><strong>优点</strong>：适合访问频率集中模式。</li><li><strong>缺点</strong>：不能反映近期访问趋势，容易淘汰刚进入但近期频繁访问的页面。</li></ul><hr><p><strong>4️⃣ 最佳（Optimal）</strong></p><ul><li><strong>思想</strong>：替换<strong>将来最长时间不会访问的页面</strong>。</li><li><strong>优点</strong>：缺页率最低，是理论最优算法。</li><li><strong>缺点</strong>：需要知道未来访问序列，实际不可实现，仅用于性能评估。</li></ul><hr><p><strong>5️⃣ 时钟（Clock）/二次机会（Second Chance）</strong></p><ul><li><strong>思想</strong>：类似 FIFO，但给最近使用过的页面一个“二次机会”。</li><li><strong>实现</strong>： <ul><li>内存页面形成环形链表（时钟）。</li><li>检查访问位（reference bit），为 1 则清零并给页面机会，继续检查下一个页面。</li></ul></li><li><strong>优点</strong>：实现简单，近似 LRU，性能较好。</li></ul><hr><p><strong>总结</strong></p><ul><li><strong>简单替换</strong>：FIFO</li><li><strong>考虑时间局部性</strong>：LRU、Clock</li><li><strong>考虑访问频率</strong>：LFU</li><li><strong>理论最优</strong>：Optimal</li></ul><h3 id="_17-mysql-是怎么实现事务隔离的-各个隔离级别是怎样的-怎么理解脏读、幻读、可重复读" tabindex="-1"><a class="header-anchor" href="#_17-mysql-是怎么实现事务隔离的-各个隔离级别是怎样的-怎么理解脏读、幻读、可重复读"><span>17.MySQL 是怎么实现事务隔离的？各个隔离级别是怎样的？怎么理解脏读、幻读、可重复读？</span></a></h3><blockquote><p>在 MySQL 中，事务隔离是为了保证多个事务并发执行时互不干扰，确保数据一致性。InnoDB 默认存储引擎通过行级锁和 MVCC 实现事务隔离。</p><p>SQL 标准定义了四种隔离级别：</p><ol><li><strong>READ UNCOMMITTED（未提交读）</strong>：允许脏读，即一个事务可以读到另一个未提交事务的数据。</li><li><strong>READ COMMITTED（提交读）</strong>：只读已提交的数据，避免脏读，但可能出现不可重复读和幻读。</li><li><strong>REPEATABLE READ（可重复读，MySQL 默认）</strong>：事务开始后读取的数据在事务期间保持一致，避免脏读和不可重复读，但可能出现幻读。InnoDB 使用 Next-Key Lock 防止幻读。</li><li><strong>SERIALIZABLE（可串行化）</strong>：事务完全串行执行，防止脏读、不可重复读和幻读，但性能开销大。</li></ol><p>常见的异常情况：</p><ul><li><strong>脏读</strong>：读取到未提交的数据，如果事务回滚就错误了。</li><li><strong>不可重复读</strong>：同一条记录在一个事务中被修改过，导致多次读取值不一致。</li><li><strong>幻读</strong>：查询结果集中多了或少了行，通常是其他事务插入或删除满足条件的记录。</li></ul><p>MySQL 的 InnoDB 引擎利用 MVCC（多版本并发控制）为快照读提供可重复读，并结合行级锁和 Next-Key Lock 避免幻读，从而保证事务隔离和数据一致性。</p></blockquote><h3 id="_18-mysql-的-binlog、redo-log、undo-log-分别是干嘛的" tabindex="-1"><a class="header-anchor" href="#_18-mysql-的-binlog、redo-log、undo-log-分别是干嘛的"><span>18.MySQL 的 binlog、redo log、undo log 分别是干嘛的？</span></a></h3><p><strong>在 MySQL/InnoDB 里常见三类日志：binlog、redo log、undo log，它们作用不同：</strong></p><ol><li><strong>binlog（二进制日志，属于 MySQL Server 层）</strong><ul><li><strong>作用</strong>：记录所有对数据库的变更（DML、DDL），主要用于数据恢复、主从复制。</li><li><strong>特点</strong>：逻辑日志，追加写，跟存储引擎无关。</li><li><strong>应用场景</strong>：主从同步、数据库恢复（基于时间点或位置点恢复）。</li></ul></li><li><strong>redo log（重做日志，属于 InnoDB 引擎层）</strong><ul><li><strong>作用</strong>：保证事务的持久性（D in ACID）。在事务提交前，先写入 redo log，即使系统崩溃，也能通过 redo log 恢复已提交数据。</li><li><strong>特点</strong>：物理日志，记录数据页上的物理修改，循环写。</li><li><strong>应用场景</strong>：崩溃恢复（Crash Recovery）。</li></ul></li><li><strong>undo log（回滚日志，属于 InnoDB 引擎层）</strong><ul><li><strong>作用</strong>：保证事务的原子性（A in ACID），在事务回滚时用 undo log 撤销已执行的操作；同时配合 MVCC 提供一致性读。</li><li><strong>特点</strong>：逻辑日志，记录如何撤销操作，比如 DELETE → INSERT，UPDATE → 反向 UPDATE。</li><li><strong>应用场景</strong>：事务回滚、一致性快照读。</li></ul></li></ol><p><strong>总结：</strong></p><ul><li>binlog：记录“发生了什么”，用于复制和恢复；</li><li>redo log：保证“已提交的不会丢”，用于崩溃恢复；</li><li>undo log：保证“没提交的能撤回”，用于回滚和 MVCC。</li></ul><h3 id="_19-怎么看-sql-有没有命中索引-用-explain-主要看哪些字段" tabindex="-1"><a class="header-anchor" href="#_19-怎么看-sql-有没有命中索引-用-explain-主要看哪些字段"><span>19.怎么看 SQL 有没有命中索引？用 EXPLAIN 主要看哪些字段？</span></a></h3><p><strong>怎么看 SQL 有没有命中索引？</strong></p><ul><li><strong>方法一：EXPLAIN 执行计划</strong>（最常用）</li><li><strong>方法二：慢查询日志</strong>（定位需要优化的 SQL）</li><li><strong>方法三：SHOW PROFILE</strong>（分析 SQL 具体耗时环节，MySQL 8.0 已废弃）</li></ul><hr><p><strong>EXPLAIN 主要看哪些字段？</strong></p><ol><li><strong>id</strong><ul><li>查询执行顺序，值越大优先级越高。</li></ul></li><li><strong>select_type</strong><ul><li>查询类型，比如 SIMPLE（简单查询）、PRIMARY（主查询）、SUBQUERY（子查询）。</li></ul></li><li><strong>table</strong><ul><li>当前执行涉及的表名。</li></ul></li><li><strong>type（最重要）</strong><ul><li>访问类型，从好到差： <code>system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; ALL</code></li><li><strong>ALL = 全表扫描</strong>，说明没用上索引，需要关注。</li></ul></li><li><strong>possible_keys</strong><ul><li>可能用到的索引。</li></ul></li><li><strong>key</strong><ul><li>实际用到的索引，如果是 NULL，说明没命中索引。</li></ul></li><li><strong>key_len</strong><ul><li>索引长度，越短越好，能看出索引是否被完全利用。</li></ul></li><li><strong>rows</strong><ul><li>MySQL 预估需要扫描的行数，越少越好。</li></ul></li><li><strong>Extra</strong><ul><li>补充信息，比如： <ul><li><strong>Using index</strong>：覆盖索引，效率高。</li><li><strong>Using where</strong>：需要回表。</li><li><strong>Using filesort</strong>：需要额外排序，性能差。</li><li><strong>Using temporary</strong>：需要临时表，性能差。</li></ul></li></ul></li></ol><hr><p>✅ <strong>总结面试回答：</strong></p><blockquote><p>判断 SQL 是否命中索引，主要用 EXPLAIN 分析。重点关注 <code>type</code>（访问方式，避免 ALL）、<code>key</code>（是否用到索引）、<code>rows</code>（扫描行数多少）以及 <code>Extra</code>（是否有 filesort、temporary）。如果 key 是 NULL 或 type 是 ALL，就说明没有命中索引。</p></blockquote><h3 id="_20-用过消息队列吗-怎么保证消息的顺序" tabindex="-1"><a class="header-anchor" href="#_20-用过消息队列吗-怎么保证消息的顺序"><span>20.用过消息队列吗？怎么保证消息的顺序？</span></a></h3><p>✅ <strong>保证消息顺序的常见方案</strong></p><ol><li><strong>单队列 + 单消费者</strong><ul><li>所有消息进入同一个队列，只有一个消费者顺序消费。</li><li><strong>优点</strong>：实现简单，严格保证顺序。</li><li><strong>缺点</strong>：吞吐量低，无法扩展。</li></ul></li><li><strong>分区/分片顺序（推荐做法）</strong><ul><li>按照某个业务标识（如订单 ID、用户 ID）做哈希，固定发到同一个队列或分区中。</li><li>每个队列再绑定一个消费者，保证同一个业务键的消息顺序。</li><li><strong>优点</strong>：既能保证局部顺序，又能提升并发度。</li><li><strong>缺点</strong>：需要设计分区规则，避免热点队列。</li></ul></li><li><strong>生产端保证顺序</strong><ul><li>在发送时严格按照业务顺序写入 MQ。</li></ul></li><li><strong>消费端保证顺序</strong><ul><li>消费端在接收到消息后，先放到内存队列或使用加锁方式处理，确保处理顺序与接收顺序一致。</li></ul></li></ol><hr><p>🚀 <strong>在 RabbitMQ 里的实现</strong></p><ul><li>RabbitMQ 本身<strong>单个 Queue 内消息是有序的</strong>，但前提是： <ul><li>一个队列只能有一个消费者；</li><li>或者多个消费者时，必须保证消息分区规则，让同一业务的消息只被一个消费者处理。</li></ul></li></ul><p>📌 举例：外卖平台场景</p><blockquote><p>订单消息（创建、支付、配送、完成）必须顺序消费。可以按照 <strong>订单 ID 哈希分区</strong>，保证同一订单的所有消息进入同一个队列，由同一个消费者顺序消费。这样就不会出现 “配送完成在支付之前” 的问题。</p></blockquote><hr><p>✅ 面试回答总结</p><blockquote><p>在项目中我用过 RabbitMQ，保证消息顺序主要有两种方式：</p><ul><li>如果是全局顺序，采用单队列 + 单消费者模式；</li><li>如果是局部顺序，比如订单消息，则按照订单 ID 做分区，把同一订单的消息都投递到同一个队列，由固定消费者顺序消费。这样既能保证顺序，又能提升并发度。</li></ul></blockquote><h3 id="_21-操作系统里-进程和线程之间怎么传递数据" tabindex="-1"><a class="header-anchor" href="#_21-操作系统里-进程和线程之间怎么传递数据"><span>21. 操作系统里，进程和线程之间怎么传递数据？</span></a></h3><blockquote><p>进程之间通信需要依赖操作系统提供的机制，因为它们的地址空间是隔离的。常见的 IPC 方式有管道、消息队列、共享内存、信号量、信号和套接字。其中共享内存效率最高，但需要配合同步机制。</p><p>而线程属于同一进程，共享内存空间，所以通信更简单，通常通过共享变量、条件变量、信号量或者线程安全队列来实现。线程通信的难点主要是并发同步，而进程通信的难点是如何跨越地址空间。</p></blockquote><h4 id="🔹-进程间通信-ipc" tabindex="-1"><a class="header-anchor" href="#🔹-进程间通信-ipc"><span>🔹 进程间通信（IPC）</span></a></h4><p>进程是相互独立的，拥有独立的地址空间，因此需要 <strong>内核提供机制</strong> 才能通信。常见方式：</p><ol><li><strong>管道（Pipe/Named Pipe）</strong><ul><li>匿名管道：只能在父子进程之间通信，单向。</li><li>命名管道（FIFO）：支持无亲缘关系的进程通信。</li></ul></li><li><strong>消息队列（Message Queue）</strong><ul><li>内核维护的消息链表，进程间以消息的形式通信。</li><li>有结构化数据，避免字节流解析问题。</li></ul></li><li><strong>共享内存（Shared Memory）</strong><ul><li>通过映射一块物理内存到多个进程空间来实现。</li><li>速度最快，但需要加锁（信号量/互斥锁）保证同步。</li></ul></li><li><strong>信号量（Semaphore）</strong><ul><li>本质是计数器，常用于 <strong>进程间同步</strong>，不直接传数据。</li></ul></li><li><strong>信号（Signal）</strong><ul><li>异步通知机制，例如 <code>kill -9</code> 给进程发信号。</li></ul></li><li><strong>Socket（套接字）</strong><ul><li>不仅可以本机进程间通信，也能跨网络通信。</li><li>常见于 <strong>分布式系统</strong>。</li></ul></li></ol><h4 id="🔹-线程间通信" tabindex="-1"><a class="header-anchor" href="#🔹-线程间通信"><span>🔹 线程间通信</span></a></h4><p>线程属于同一个进程，<strong>共享内存空间</strong>，通信比进程简单。</p><p>常见方式：</p><ol><li><strong>共享变量</strong>（最直接） <ul><li>所有线程可以读写同一块内存，但需要加锁（互斥锁、读写锁）避免竞态条件。</li></ul></li><li><strong>条件变量（Condition Variable）</strong><ul><li>用于线程间的等待与通知。</li></ul></li><li><strong>信号量（Semaphore）</strong><ul><li>可用于线程同步/控制并发访问资源数量。</li></ul></li><li><strong>线程安全队列 / BlockingQueue</strong><ul><li>在 Java、C++ 中，常用阻塞队列实现生产者-消费者模型。</li></ul></li></ol>',226)]))}]]),e=JSON.parse('{"path":"/Interview/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/%E4%BA%AC%E4%B8%9C%E9%9D%A2%E8%AF%95%E9%A2%98%E5%87%86%E5%A4%87.html","title":"京东面试准备","lang":"zh-CN","frontmatter":{"gitInclude":[]},"headers":[{"level":3,"title":"1.一个标准的 Java Web 请求，从前端到数据库，都经历了哪些环节？","slug":"_1-一个标准的-java-web-请求-从前端到数据库-都经历了哪些环节","link":"#_1-一个标准的-java-web-请求-从前端到数据库-都经历了哪些环节","children":[]},{"level":3,"title":"面试答案示例","slug":"面试答案示例","link":"#面试答案示例","children":[]},{"level":3,"title":"2.详细讲讲 TCP 的三次握手？","slug":"_2-详细讲讲-tcp-的三次握手","link":"#_2-详细讲讲-tcp-的三次握手","children":[]},{"level":3,"title":"3.你用的哪个 JDK 版本？调过 JVM 参数吗？了解哪些主要参数？","slug":"_3-你用的哪个-jdk-版本-调过-jvm-参数吗-了解哪些主要参数","link":"#_3-你用的哪个-jdk-版本-调过-jvm-参数吗-了解哪些主要参数","children":[]},{"level":3,"title":"4.了解哪些垃圾回收器和算法？CMS 和 G1 对比过吗？","slug":"_4-了解哪些垃圾回收器和算法-cms-和-g1-对比过吗","link":"#_4-了解哪些垃圾回收器和算法-cms-和-g1-对比过吗","children":[]},{"level":3,"title":"5.遇到过哪些 Java OOM 的场景？怎么处理的？","slug":"_5-遇到过哪些-java-oom-的场景-怎么处理的","link":"#_5-遇到过哪些-java-oom-的场景-怎么处理的","children":[]},{"level":3,"title":"6.ConcurrentHashMap 和 HashMap 的区别","slug":"_6-concurrenthashmap-和-hashmap-的区别","link":"#_6-concurrenthashmap-和-hashmap-的区别","children":[]},{"level":3,"title":"7.Java 里有哪些锁机制？CAS 乐观锁和悲观锁是怎么实现的？","slug":"_7-java-里有哪些锁机制-cas-乐观锁和悲观锁是怎么实现的","link":"#_7-java-里有哪些锁机制-cas-乐观锁和悲观锁是怎么实现的","children":[]},{"level":3,"title":"8.Java 多线程有哪几种创建和管理方式？了解线程池的哪些参数？","slug":"_8-java-多线程有哪几种创建和管理方式-了解线程池的哪些参数","link":"#_8-java-多线程有哪几种创建和管理方式-了解线程池的哪些参数","children":[]},{"level":3,"title":"9.线程池的拒绝策略有哪些？项目里常用哪种？为啥？","slug":"_9-线程池的拒绝策略有哪些-项目里常用哪种-为啥","link":"#_9-线程池的拒绝策略有哪些-项目里常用哪种-为啥","children":[]},{"level":3,"title":"10.开发时用 Spring/Spring Boot 吗？用什么框架操作数据库？","slug":"_10-开发时用-spring-spring-boot-吗-用什么框架操作数据库","link":"#_10-开发时用-spring-spring-boot-吗-用什么框架操作数据库","children":[]},{"level":3,"title":"11.MyBatis 是怎么实现在同一个事务里操作两个表的？","slug":"_11-mybatis-是怎么实现在同一个事务里操作两个表的","link":"#_11-mybatis-是怎么实现在同一个事务里操作两个表的","children":[]},{"level":3,"title":"13.开发中用过缓存吗？Redis 用得多吗？了解哪些缓存淘汰策略？","slug":"_13-开发中用过缓存吗-redis-用得多吗-了解哪些缓存淘汰策略","link":"#_13-开发中用过缓存吗-redis-用得多吗-了解哪些缓存淘汰策略","children":[]},{"level":3,"title":"14.更新数据库时，怎么保证缓存和数据一致？怎么防止缓存击穿、雪崩、穿透？","slug":"_14-更新数据库时-怎么保证缓存和数据一致-怎么防止缓存击穿、雪崩、穿透","link":"#_14-更新数据库时-怎么保证缓存和数据一致-怎么防止缓存击穿、雪崩、穿透","children":[]},{"level":3,"title":"15.Redis 的布隆过滤器原理是啥？","slug":"_15-redis-的布隆过滤器原理是啥","link":"#_15-redis-的布隆过滤器原理是啥","children":[]},{"level":3,"title":"16.数据库用的 MySQL 吗？为啥 MySQL 用 B+ 树做索引？和 B 树有啥区别？","slug":"_16-数据库用的-mysql-吗-为啥-mysql-用-b-树做索引-和-b-树有啥区别","link":"#_16-数据库用的-mysql-吗-为啥-mysql-用-b-树做索引-和-b-树有啥区别","children":[]},{"level":3,"title":"17.页面置换算法","slug":"_17-页面置换算法","link":"#_17-页面置换算法","children":[]},{"level":3,"title":"17.MySQL 是怎么实现事务隔离的？各个隔离级别是怎样的？怎么理解脏读、幻读、可重复读？","slug":"_17-mysql-是怎么实现事务隔离的-各个隔离级别是怎样的-怎么理解脏读、幻读、可重复读","link":"#_17-mysql-是怎么实现事务隔离的-各个隔离级别是怎样的-怎么理解脏读、幻读、可重复读","children":[]},{"level":3,"title":"18.MySQL 的 binlog、redo log、undo log 分别是干嘛的？","slug":"_18-mysql-的-binlog、redo-log、undo-log-分别是干嘛的","link":"#_18-mysql-的-binlog、redo-log、undo-log-分别是干嘛的","children":[]},{"level":3,"title":"19.怎么看 SQL 有没有命中索引？用 EXPLAIN 主要看哪些字段？","slug":"_19-怎么看-sql-有没有命中索引-用-explain-主要看哪些字段","link":"#_19-怎么看-sql-有没有命中索引-用-explain-主要看哪些字段","children":[]},{"level":3,"title":"20.用过消息队列吗？怎么保证消息的顺序？","slug":"_20-用过消息队列吗-怎么保证消息的顺序","link":"#_20-用过消息队列吗-怎么保证消息的顺序","children":[]},{"level":3,"title":"21. 操作系统里，进程和线程之间怎么传递数据？","slug":"_21-操作系统里-进程和线程之间怎么传递数据","link":"#_21-操作系统里-进程和线程之间怎么传递数据","children":[]}],"readingTime":{"minutes":30.02,"words":9007},"filePathRelative":"Interview/面试准备/京东面试题准备.md","excerpt":"\\n<h3>1.一个标准的 Java Web 请求，从前端到数据库，都经历了哪些环节？</h3>\\n<h3>面试答案示例</h3>\\n<p>一个标准的 Java Web 请求从前端到数据库，大致经历以下环节：</p>\\n<ol>\\n<li><strong>前端发起请求</strong>\\n<ul>\\n<li>用户操作触发 HTTP 请求（GET/POST）。</li>\\n<li>请求可携带参数、Cookie、Token 等认证信息。</li>\\n</ul>\\n</li>\\n<li><strong>网络传输</strong>\\n<ul>\\n<li>请求通过 TCP/IP 到达服务器。</li>\\n<li>如果有负载均衡（如 Nginx），请求先经过反向代理、SSL 解密，并分发到具体后端实例。</li>\\n</ul>\\n</li>\\n<li><strong>Web 容器接收请求</strong>\\n<ul>\\n<li>Tomcat/Jetty/Undertow 解析 HTTP 请求，创建 Request/Response 对象。</li>\\n<li>通过线程池分配线程处理请求。</li>\\n</ul>\\n</li>\\n<li><strong>Spring MVC / Controller 层</strong>\\n<ul>\\n<li>DispatcherServlet 接收请求并分发到对应 Controller。</li>\\n<li>Controller 处理请求参数并调用 Service 层。</li>\\n</ul>\\n</li>\\n<li><strong>Service 层业务处理</strong>\\n<ul>\\n<li>处理核心业务逻辑。</li>\\n<li>调用 DAO 层访问数据库。</li>\\n<li>可以结合缓存（Redis）或异步线程池优化性能。</li>\\n</ul>\\n</li>\\n<li><strong>DAO / 数据库访问</strong>\\n<ul>\\n<li>使用 MyBatis / JPA / JDBC 执行 SQL。</li>\\n<li>从数据库连接池获取连接 → 执行 SQL → 返回结果 → 归还连接。</li>\\n</ul>\\n</li>\\n<li><strong>数据库执行</strong>\\n<ul>\\n<li>数据库查询优化器解析 SQL，生成执行计划。</li>\\n<li>从缓存或磁盘读取数据并返回结果集。</li>\\n</ul>\\n</li>\\n<li><strong>返回前端</strong>\\n<ul>\\n<li>Service 层将数据封装为 DTO/VO 返回 Controller。</li>\\n<li>Controller 以 JSON/XML 响应给前端。</li>\\n<li>前端接收数据并进行渲染。</li>\\n</ul>\\n</li>\\n<li><strong>可选优化环节</strong>\\n<ul>\\n<li><strong>缓存优化</strong>：先查 Redis，减少数据库访问。</li>\\n<li><strong>异步消息</strong>：通过 RabbitMQ/Kafka 异步处理耗时任务。</li>\\n<li><strong>监控与日志</strong>：AOP 日志、链路追踪（Sleuth/Zipkin/SkyWalking）。</li>\\n</ul>\\n</li>\\n</ol>"}')}}]);