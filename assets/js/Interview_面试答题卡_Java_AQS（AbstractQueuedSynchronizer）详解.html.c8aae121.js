"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[94108],{66262:(s,i)=>{i.A=(s,i)=>{const a=s.__vccOpts||s;for(const[s,e]of i)a[s]=e;return a}},53636:(s,i,a)=>{a.r(i),a.d(i,{comp:()=>n,data:()=>d});var e=a(20641);const t={},n=(0,a(66262).A)(t,[["render",function(s,i){return(0,e.uX)(),(0,e.CE)("div",null,i[0]||(i[0]=[(0,e.Fv)('<h1 id="☕-java-面试答题卡-aqs-abstractqueuedsynchronizer-详解" tabindex="-1"><a class="header-anchor" href="#☕-java-面试答题卡-aqs-abstractqueuedsynchronizer-详解"><span>☕ Java 面试答题卡：AQS（AbstractQueuedSynchronizer）详解</span></a></h1><hr><h2 id="✅-一句话概括" tabindex="-1"><a class="header-anchor" href="#✅-一句话概括"><span>✅ 一句话概括</span></a></h2><blockquote><p>AQS 是 Java 并发包 <code>java.util.concurrent.locks</code> 的核心抽象类，用于构建各种同步器，如：<code>ReentrantLock</code>、<code>CountDownLatch</code>、<code>Semaphore</code> 等，其通过一个共享的 <code>state</code> 状态字段 + FIFO 等待队列，实现线程间的同步控制。</p></blockquote><hr><h2 id="✅-1-核心角色与结构" tabindex="-1"><a class="header-anchor" href="#✅-1-核心角色与结构"><span>✅ 1. 核心角色与结构</span></a></h2><h2 id="📦-类名" tabindex="-1"><a class="header-anchor" href="#📦-类名"><span>📦 类名：</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> abstract</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> AbstractQueuedSynchronizer</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> AbstractOwnableSynchronizer</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="📌-设计目标" tabindex="-1"><a class="header-anchor" href="#📌-设计目标"><span>📌 设计目标：</span></a></h2><p>封装同步状态管理（state）+ 阻塞线程队列（FIFO），<strong>统一控制并发资源的访问</strong>。</p><h2 id="📐-内部结构图" tabindex="-1"><a class="header-anchor" href="#📐-内部结构图"><span>📐 内部结构图：</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>      +------------------------+</span></span>\n<span class="line"><span>      |     AQS (核心)         |</span></span>\n<span class="line"><span>      |  - state               |</span></span>\n<span class="line"><span>      |  - head, tail (队列)   |</span></span>\n<span class="line"><span>      +------------------------+</span></span>\n<span class="line"><span>        ↑      ↑</span></span>\n<span class="line"><span>  线程 A  线程 B  ...</span></span>\n<span class="line"><span>  失败则入队排队等待</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="✅-2-核心组件详解" tabindex="-1"><a class="header-anchor" href="#✅-2-核心组件详解"><span>✅ 2. 核心组件详解</span></a></h2><table><thead><tr><th>组件</th><th>说明</th></tr></thead><tbody><tr><td><code>state</code></td><td>共享变量，表示当前同步状态，通常为锁的持有情况</td></tr><tr><td><code>Node</code></td><td>内部类，代表等待队列中的每个线程</td></tr><tr><td><code>head</code>, <code>tail</code></td><td>等待队列的头尾指针</td></tr><tr><td><code>exclusiveOwnerThread</code></td><td>独占模式下记录当前持锁线程（ReentrantLock 用）</td></tr></tbody></table><hr><h2 id="✅-3-两种模式" tabindex="-1"><a class="header-anchor" href="#✅-3-两种模式"><span>✅ 3. 两种模式</span></a></h2><table><thead><tr><th>模式</th><th>说明</th><th>典型实现</th></tr></thead><tbody><tr><td>独占模式</td><td>同一时间只能一个线程获取同步资源</td><td><code>ReentrantLock</code></td></tr><tr><td>共享模式</td><td>多个线程可以同时访问资源</td><td><code>Semaphore</code>、<code>CountDownLatch</code></td></tr></tbody></table><hr><h2 id="✅-4-子类需要实现的方法-模板方法" tabindex="-1"><a class="header-anchor" href="#✅-4-子类需要实现的方法-模板方法"><span>✅ 4. 子类需要实现的方法（模板方法）</span></a></h2><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>tryAcquire(int arg)</code></td><td>独占式获取资源</td></tr><tr><td><code>tryRelease(int arg)</code></td><td>独占式释放资源</td></tr><tr><td><code>tryAcquireShared(int)</code></td><td>共享式获取资源（返回值 &gt;= 0 表示成功）</td></tr><tr><td><code>tryReleaseShared(int)</code></td><td>共享式释放资源</td></tr><tr><td><code>isHeldExclusively()</code></td><td>当前线程是否独占资源（可选）</td></tr></tbody></table><hr><h2 id="✅-5-提供的核心方法-由子类调用" tabindex="-1"><a class="header-anchor" href="#✅-5-提供的核心方法-由子类调用"><span>✅ 5. 提供的核心方法（由子类调用）</span></a></h2><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td><code>acquire(int)</code></td><td>获取独占资源，失败则加入队列等待</td></tr><tr><td><code>release(int)</code></td><td>释放独占资源，并唤醒后继节点</td></tr><tr><td><code>acquireShared(int)</code></td><td>获取共享资源，失败则加入队列</td></tr><tr><td><code>releaseShared(int)</code></td><td>释放共享资源，唤醒所有共享节点</td></tr><tr><td><code>hasQueuedThreads()</code></td><td>是否存在等待线程</td></tr></tbody></table><hr><h2 id="✅-6-核心工作流程-独占模式" tabindex="-1"><a class="header-anchor" href="#✅-6-核心工作流程-独占模式"><span>✅ 6. 核心工作流程（独占模式）</span></a></h2><h2 id="示例-acquire-获取锁流程" tabindex="-1"><a class="header-anchor" href="#示例-acquire-获取锁流程"><span>示例：<code>acquire()</code> 获取锁流程</span></a></h2><ol><li>调用子类实现的 <code>tryAcquire()</code> 尝试抢锁</li><li>如果失败，则封装当前线程为 <code>Node</code> 入队</li><li>自旋判断自己是否是队头节点且可获取锁（前驱释放时唤醒）</li><li>获取成功 → 执行逻辑 → 调用 <code>release()</code> 释放锁</li></ol><hr><h2 id="✅-7-自定义同步器示例-独占锁" tabindex="-1"><a class="header-anchor" href="#✅-7-自定义同步器示例-独占锁"><span>✅ 7. 自定义同步器示例（独占锁）</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyLock</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> AbstractQueuedSynchronizer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    protected</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> boolean</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> tryAcquire</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> arg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> compareAndSetState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 抢占锁</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    protected</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> boolean</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> tryRelease</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> arg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        setState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;        </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 释放锁</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> lock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        acquire</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> unlock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        release</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="✅-8-aqs-内部队列机制-fifo" tabindex="-1"><a class="header-anchor" href="#✅-8-aqs-内部队列机制-fifo"><span>✅ 8. AQS 内部队列机制（FIFO）</span></a></h2><ul><li>底层使用 CLH（虚拟双向队列）</li><li>每个节点 <code>Node</code> 代表一个等待线程</li><li>节点有状态（如：SIGNAL、CANCELLED）</li><li>使用 <code>LockSupport.park()</code> 和 <code>unpark()</code> 实现阻塞/唤醒</li></ul><hr><h2 id="✅-9-aqs-的好处" tabindex="-1"><a class="header-anchor" href="#✅-9-aqs-的好处"><span>✅ 9. AQS 的好处</span></a></h2><table><thead><tr><th>优势</th><th>说明</th></tr></thead><tbody><tr><td>模板方法设计</td><td>子类只需关注 <code>tryAcquire</code> 等少数方法</td></tr><tr><td>状态管理统一</td><td><code>state</code> 控制并发资源，统一管理</td></tr><tr><td>阻塞队列封装良好</td><td>自动实现阻塞、排队、公平性等机制</td></tr><tr><td>可构建多种并发组件</td><td>支持锁、信号量、栅栏等各种同步工具</td></tr></tbody></table><hr><h2 id="✅-10-常见基于-aqs-的并发组件" tabindex="-1"><a class="header-anchor" href="#✅-10-常见基于-aqs-的并发组件"><span>✅ 10. 常见基于 AQS 的并发组件</span></a></h2><table><thead><tr><th>类名</th><th>模式</th><th>功能</th></tr></thead><tbody><tr><td><code>ReentrantLock</code></td><td>独占</td><td>可重入互斥锁</td></tr><tr><td><code>Semaphore</code></td><td>共享</td><td>控制并发线程数</td></tr><tr><td><code>CountDownLatch</code></td><td>共享</td><td>等待其他线程完成</td></tr><tr><td><code>ReentrantReadWriteLock</code></td><td>独占+共享</td><td>支持读写锁分离</td></tr><tr><td><code>FutureTask</code></td><td>独占</td><td>用于线程池任务返回值的同步</td></tr></tbody></table><hr><h2 id="✅-11-面试常问问题与答题模板-建议背诵" tabindex="-1"><a class="header-anchor" href="#✅-11-面试常问问题与答题模板-建议背诵"><span>✅ 11. 面试常问问题与答题模板（建议背诵）</span></a></h2><blockquote><p>AQS 是 Java 并发包的基础抽象类，用于构建锁和同步器。它通过一个 <code>volatile</code> 的 state 状态变量控制资源访问，并维护一个 FIFO 的阻塞等待队列。当线程获取失败时，会加入队列等待，通过 <code>LockSupport.park()</code> 挂起，被唤醒后再次尝试。AQS 的设计非常经典，基于模板方法，简化了同步器的开发。</p></blockquote>',43)]))}]]),d=JSON.parse('{"path":"/Interview/%E9%9D%A2%E8%AF%95%E7%AD%94%E9%A2%98%E5%8D%A1/Java/AQS%EF%BC%88AbstractQueuedSynchronizer%EF%BC%89%E8%AF%A6%E8%A7%A3.html","title":"☕ Java 面试答题卡：AQS（AbstractQueuedSynchronizer）详解","lang":"zh-CN","frontmatter":{"gitInclude":[]},"headers":[{"level":2,"title":"✅ 一句话概括","slug":"✅-一句话概括","link":"#✅-一句话概括","children":[]},{"level":2,"title":"✅ 1. 核心角色与结构","slug":"✅-1-核心角色与结构","link":"#✅-1-核心角色与结构","children":[]},{"level":2,"title":"📦 类名：","slug":"📦-类名","link":"#📦-类名","children":[]},{"level":2,"title":"📌 设计目标：","slug":"📌-设计目标","link":"#📌-设计目标","children":[]},{"level":2,"title":"📐 内部结构图：","slug":"📐-内部结构图","link":"#📐-内部结构图","children":[]},{"level":2,"title":"✅ 2. 核心组件详解","slug":"✅-2-核心组件详解","link":"#✅-2-核心组件详解","children":[]},{"level":2,"title":"✅ 3. 两种模式","slug":"✅-3-两种模式","link":"#✅-3-两种模式","children":[]},{"level":2,"title":"✅ 4. 子类需要实现的方法（模板方法）","slug":"✅-4-子类需要实现的方法-模板方法","link":"#✅-4-子类需要实现的方法-模板方法","children":[]},{"level":2,"title":"✅ 5. 提供的核心方法（由子类调用）","slug":"✅-5-提供的核心方法-由子类调用","link":"#✅-5-提供的核心方法-由子类调用","children":[]},{"level":2,"title":"✅ 6. 核心工作流程（独占模式）","slug":"✅-6-核心工作流程-独占模式","link":"#✅-6-核心工作流程-独占模式","children":[]},{"level":2,"title":"示例：acquire() 获取锁流程","slug":"示例-acquire-获取锁流程","link":"#示例-acquire-获取锁流程","children":[]},{"level":2,"title":"✅ 7. 自定义同步器示例（独占锁）","slug":"✅-7-自定义同步器示例-独占锁","link":"#✅-7-自定义同步器示例-独占锁","children":[]},{"level":2,"title":"✅ 8. AQS 内部队列机制（FIFO）","slug":"✅-8-aqs-内部队列机制-fifo","link":"#✅-8-aqs-内部队列机制-fifo","children":[]},{"level":2,"title":"✅ 9. AQS 的好处","slug":"✅-9-aqs-的好处","link":"#✅-9-aqs-的好处","children":[]},{"level":2,"title":"✅ 10. 常见基于 AQS 的并发组件","slug":"✅-10-常见基于-aqs-的并发组件","link":"#✅-10-常见基于-aqs-的并发组件","children":[]},{"level":2,"title":"✅ 11. 面试常问问题与答题模板（建议背诵）","slug":"✅-11-面试常问问题与答题模板-建议背诵","link":"#✅-11-面试常问问题与答题模板-建议背诵","children":[]}],"readingTime":{"minutes":3.08,"words":925},"filePathRelative":"Interview/面试答题卡/Java/AQS（AbstractQueuedSynchronizer）详解.md","excerpt":"\\n<hr>\\n<h2>✅ 一句话概括</h2>\\n<blockquote>\\n<p>AQS 是 Java 并发包 <code>java.util.concurrent.locks</code> 的核心抽象类，用于构建各种同步器，如：<code>ReentrantLock</code>、<code>CountDownLatch</code>、<code>Semaphore</code> 等，其通过一个共享的 <code>state</code> 状态字段 + FIFO 等待队列，实现线程间的同步控制。</p>\\n</blockquote>\\n<hr>\\n<h2>✅ 1. 核心角色与结构</h2>\\n<h2>📦 类名：</h2>"}')}}]);