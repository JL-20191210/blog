"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[90782],{66262:(e,a)=>{a.A=(e,a)=>{const r=e.__vccOpts||e;for(const[e,p]of a)r[e]=p;return r}},93967:(e,a,r)=>{r.r(a),r.d(a,{comp:()=>u,data:()=>d});var p=r(20641);const l={},u=(0,r(66262).A)(l,[["render",function(e,a){return(0,p.uX)(),(0,p.CE)("div",null,[a[0]||(a[0]=(0,p.Lk)("h1",{id:"querywrapper-vs-lambdaquerywrapper",tabindex:"-1"},[(0,p.Lk)("a",{class:"header-anchor",href:"#querywrapper-vs-lambdaquerywrapper"},[(0,p.Lk)("span",null,"QueryWrapper vs LambdaQueryWrapper")])],-1)),a[1]||(a[1]=(0,p.Lk)("blockquote",null,[(0,p.Lk)("p",null,[(0,p.eW)("在使用 MyBatis-Plus 进行数据库操作时，查询条件的构造是一个常见的任务。MyBatis-Plus 提供了两种主要的查询条件构造器："),(0,p.Lk)("code",null,"QueryWrapper"),(0,p.eW)(" 和 "),(0,p.Lk)("code",null,"LambdaQueryWrapper"),(0,p.eW)("。")])],-1)),(0,p.Q3)(" more "),a[2]||(a[2]=(0,p.Fv)('<h3 id="querywrapper" tabindex="-1"><a class="header-anchor" href="#querywrapper"><span>QueryWrapper</span></a></h3><p><code>QueryWrapper</code> 是 MyBatis-Plus 最早引入的查询条件构造器之一。通过 <code>QueryWrapper</code>，我们可以手动指定字段名、条件和数值来构建查询条件。例如，<code>eq(&quot;name&quot;, &quot;Alice&quot;)</code> 表示等于条件。</p><p>主要特点：</p><ul><li>需要传递实体类的 Class 对象。</li><li>手动指定字段名和条件。</li><li>不支持 Lambda 表达式。</li></ul><h3 id="lambdaquerywrapper" tabindex="-1"><a class="header-anchor" href="#lambdaquerywrapper"><span>LambdaQueryWrapper</span></a></h3><p><code>LambdaQueryWrapper</code> 是 MyBatis-Plus 3.4.0 版本引入的新特性，基于 Lambda 表达式的查询条件构造器。使用 <code>LambdaQueryWrapper</code>，我们可以使用 Lambda 表达式来指定条件，更加简洁和类型安全。例如，<code>eq(User::getName, &quot;Alice&quot;)</code>。</p><p>主要特点：</p><ul><li>不需要传递实体类的 Class 对象。</li><li>使用 Lambda 表达式指定条件。</li><li>类型安全，避免手动输入字段名带来的错误。</li></ul><h3 id="选择合适的查询条件构造器" tabindex="-1"><a class="header-anchor" href="#选择合适的查询条件构造器"><span>选择合适的查询条件构造器</span></a></h3><p>根据项目的实际情况，我们可以灵活选择使用 <code>QueryWrapper</code> 或 <code>LambdaQueryWrapper</code>。如果项目使用的是 MyBatis-Plus 3.4.0 版本及以上，推荐使用 <code>LambdaQueryWrapper</code>，以便利用其简洁、类型安全的特性。而对于旧版本的项目，仍然可以继续使用 <code>QueryWrapper</code>。</p>',10))])}]]),d=JSON.parse('{"path":"/Mybatis/Mybatis%20Plus/QueryWrapper%20vs%20LambdaQueryWrapper.html","title":"QueryWrapper vs LambdaQueryWrapper","lang":"zh-CN","frontmatter":{"icon":"mybatis plus","date":"2024-11-26T00:00:00.000Z","category":["Mybatis"],"tag":["查询"],"gitInclude":[]},"headers":[{"level":3,"title":"QueryWrapper","slug":"querywrapper","link":"#querywrapper","children":[]},{"level":3,"title":"LambdaQueryWrapper","slug":"lambdaquerywrapper","link":"#lambdaquerywrapper","children":[]},{"level":3,"title":"选择合适的查询条件构造器","slug":"选择合适的查询条件构造器","link":"#选择合适的查询条件构造器","children":[]}],"readingTime":{"minutes":1.15,"words":344},"filePathRelative":"Mybatis/Mybatis Plus/QueryWrapper vs LambdaQueryWrapper.md","localizedDate":"2024年11月26日","excerpt":"\\n<blockquote>\\n<p>在使用 MyBatis-Plus 进行数据库操作时，查询条件的构造是一个常见的任务。MyBatis-Plus 提供了两种主要的查询条件构造器：<code>QueryWrapper</code> 和 <code>LambdaQueryWrapper</code>。</p>\\n</blockquote>\\n"}')}}]);