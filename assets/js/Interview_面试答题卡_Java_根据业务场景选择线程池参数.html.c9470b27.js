"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[28279],{66262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,l]of s)a[i]=l;return a}},23259:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>e,data:()=>n});var l=a(20641);const t={},e=(0,a(66262).A)(t,[["render",function(i,s){return(0,l.uX)(),(0,l.CE)("div",null,s[0]||(s[0]=[(0,l.Fv)('<h1 id="☕-java-面试答题卡-如何根据业务场景选择线程池参数" tabindex="-1"><a class="header-anchor" href="#☕-java-面试答题卡-如何根据业务场景选择线程池参数"><span>☕ Java 面试答题卡：如何根据业务场景选择线程池参数？</span></a></h1><hr><h2 id="✅-一句话概括" tabindex="-1"><a class="header-anchor" href="#✅-一句话概括"><span>✅ 一句话概括</span></a></h2><blockquote><p>线程池参数的选择应根据任务的特性（CPU 密集 / IO 密集 / 混合型）和业务实际需求来综合考虑，以达到<strong>资源利用最大化</strong>和<strong>系统稳定性</strong>的平衡。</p></blockquote><hr><h2 id="✅-1-常见线程池参数回顾-threadpoolexecutor-构造函数" tabindex="-1"><a class="header-anchor" href="#✅-1-常见线程池参数回顾-threadpoolexecutor-构造函数"><span>✅ 1. 常见线程池参数回顾（ThreadPoolExecutor 构造函数）</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ThreadPoolExecutor</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> corePoolSize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 核心线程数</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> maximumPoolSize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     // 最大线程数</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    long</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> keepAliveTime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // 空闲线程存活时间</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> unit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">           // 时间单位</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    BlockingQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Runnable</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> workQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 任务队列</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    ThreadFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> threadFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    RejectedExecutionHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> handler   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 拒绝策略</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="✅-2-如何根据业务类型选择参数" tabindex="-1"><a class="header-anchor" href="#✅-2-如何根据业务类型选择参数"><span>✅ 2. 如何根据业务类型选择参数？</span></a></h2><h3 id="🔹-情况一-cpu-密集型任务" tabindex="-1"><a class="header-anchor" href="#🔹-情况一-cpu-密集型任务"><span>🔹 情况一：CPU 密集型任务</span></a></h3><blockquote><p>特点：大量计算，线程主要占用 CPU 例如：图像处理、加密计算、压缩、排序等</p></blockquote><ul><li>建议线程数：<code>CPU核心数 + 1</code></li><li>队列类型：<code>无界队列</code>或小的 <code>LinkedBlockingQueue</code></li><li>示例配置：</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> cpuCore </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Runtime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getRuntime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">availableProcessors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ThreadPoolExecutor</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(cpuCore </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> cpuCore </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    0L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MILLISECONDS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> LinkedBlockingQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="🔹-情况二-io-密集型任务" tabindex="-1"><a class="header-anchor" href="#🔹-情况二-io-密集型任务"><span>🔹 情况二：IO 密集型任务</span></a></h3><blockquote><p>特点：线程经常阻塞等待 I/O（网络、磁盘） 例如：文件上传、数据库访问、网络爬虫等</p><p>I/O 密集型任务需要更多线程，是为了“用更多线程换取 CPU 不空转”，提升整体吞吐量。</p></blockquote><ul><li>建议线程数：<code>CPU核心数 × 2~N</code>（N 取决于阻塞比例）</li><li>队列类型：<code>有界队列</code>（防止堆积）</li><li>示例配置：</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> cpuCore </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Runtime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getRuntime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">availableProcessors</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ThreadPoolExecutor</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(cpuCore </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> cpuCore </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    60L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">SECONDS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayBlockingQueue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1000</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="🔹-情况三-混合型任务-计算-io" tabindex="-1"><a class="header-anchor" href="#🔹-情况三-混合型任务-计算-io"><span>🔹 情况三：混合型任务（计算 + IO）</span></a></h3><blockquote><p>比如：Web 服务逻辑中包含 DB 查询 + 数据处理</p></blockquote><ul><li>建议拆分任务，用两个线程池分别处理： <ul><li>一个处理计算（CPU 密集）</li><li>一个处理 IO（IO 密集）</li></ul></li></ul><hr><h2 id="✅-3-阻塞系数估算法-更专业" tabindex="-1"><a class="header-anchor" href="#✅-3-阻塞系数估算法-更专业"><span>✅ 3. 阻塞系数估算法（更专业）</span></a></h2><blockquote><p>一种更系统的线程数估算方式：</p></blockquote><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>线程数 = CPU 核心数 × (1 + 平均等待时间 / 平均计算时间)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>例如：</p><ul><li>CPU 核心数 = 4</li><li>平均 I/O 等待时间：80ms</li><li>平均计算时间：20ms</li><li>则：线程数 = 4 × (1 + 80/20) = 20</li></ul><hr><h2 id="✅-4-队列类型怎么选" tabindex="-1"><a class="header-anchor" href="#✅-4-队列类型怎么选"><span>✅ 4. 队列类型怎么选？</span></a></h2><table><thead><tr><th>队列类型</th><th>特点与使用场景</th></tr></thead><tbody><tr><td><code>SynchronousQueue</code></td><td>不缓存任务，适合响应时间敏感、任务短的场景</td></tr><tr><td><code>ArrayBlockingQueue</code></td><td>有界队列，常用于 IO 密集型</td></tr><tr><td><code>LinkedBlockingQueue</code></td><td>可选是否有界，适用于任务堆积场景</td></tr><tr><td><code>PriorityBlockingQueue</code></td><td>支持任务优先级执行</td></tr></tbody></table><hr><h2 id="✅-5-拒绝策略怎么选" tabindex="-1"><a class="header-anchor" href="#✅-5-拒绝策略怎么选"><span>✅ 5. 拒绝策略怎么选？</span></a></h2><table><thead><tr><th>拒绝策略</th><th>说明</th></tr></thead><tbody><tr><td><code>AbortPolicy</code>（默认）</td><td>直接抛异常，适合失败需要显式感知的任务</td></tr><tr><td><code>CallerRunsPolicy</code></td><td>任务由提交线程执行，适合削峰（保护线程池）</td></tr><tr><td><code>DiscardPolicy</code></td><td>静默丢弃任务，不推荐</td></tr><tr><td><code>DiscardOldestPolicy</code></td><td>丢掉队头任务再尝试提交，可能会丢重要任务</td></tr></tbody></table><hr><h2 id="✅-6-实战建议总结" tabindex="-1"><a class="header-anchor" href="#✅-6-实战建议总结"><span>✅ 6. 实战建议总结</span></a></h2><table><thead><tr><th>业务类型</th><th>核心数</th><th>最大数</th><th>队列</th><th>拒绝策略</th></tr></thead><tbody><tr><td>CPU 密集型</td><td>核心数 + 1</td><td>核心数 + 1</td><td>无界队列或小队列</td><td>抛异常 / CallerRuns</td></tr><tr><td>IO 密集型</td><td>核心数 × 2~4</td><td>核心数 × 2~10</td><td>有界队列（防止 OOM）</td><td>CallerRuns</td></tr><tr><td>混合型</td><td>拆分不同线程池处理</td><td>拆分不同线程池处理</td><td>合理分配</td><td>结合场景选择</td></tr></tbody></table><hr><h2 id="✅-7-面试答题模板-建议背诵" tabindex="-1"><a class="header-anchor" href="#✅-7-面试答题模板-建议背诵"><span>✅ 7. 面试答题模板（建议背诵）</span></a></h2><blockquote><p>线程池参数的选择要依据任务类型来定。对于 CPU 密集型任务，线程数应该接近 CPU 核心数；而对于 IO 密集型任务，线程数应该大于核心数，用于掩盖阻塞时间。一般通过经验公式 <code>线程数 = CPU数 × (1 + 阻塞时间/计算时间)</code> 来估算。此外，合理选择队列容量、拒绝策略，也有助于提高系统的吞吐能力和稳定性。</p></blockquote><hr><h2 id="✅-8-工具推荐" tabindex="-1"><a class="header-anchor" href="#✅-8-工具推荐"><span>✅ 8. 工具推荐</span></a></h2><ul><li>📊 使用阿里推荐的 <a href="https://github.com/alibaba/transmittable-thread-local" target="_blank" rel="noopener noreferrer"><strong><code>ThreadPoolExecutorFactory</code> 工具类</strong></a></li><li>🔍 配合 <a href="https://arthas.aliyun.com/" target="_blank" rel="noopener noreferrer">Arthas</a> 观察线程状态和阻塞情况</li></ul>',43)]))}]]),n=JSON.parse('{"path":"/Interview/%E9%9D%A2%E8%AF%95%E7%AD%94%E9%A2%98%E5%8D%A1/Java/%E6%A0%B9%E6%8D%AE%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF%E9%80%89%E6%8B%A9%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%8F%82%E6%95%B0.html","title":"☕ Java 面试答题卡：如何根据业务场景选择线程池参数？","lang":"zh-CN","frontmatter":{"gitInclude":[]},"headers":[{"level":2,"title":"✅ 一句话概括","slug":"✅-一句话概括","link":"#✅-一句话概括","children":[]},{"level":2,"title":"✅ 1. 常见线程池参数回顾（ThreadPoolExecutor 构造函数）","slug":"✅-1-常见线程池参数回顾-threadpoolexecutor-构造函数","link":"#✅-1-常见线程池参数回顾-threadpoolexecutor-构造函数","children":[]},{"level":2,"title":"✅ 2. 如何根据业务类型选择参数？","slug":"✅-2-如何根据业务类型选择参数","link":"#✅-2-如何根据业务类型选择参数","children":[{"level":3,"title":"🔹 情况一：CPU 密集型任务","slug":"🔹-情况一-cpu-密集型任务","link":"#🔹-情况一-cpu-密集型任务","children":[]},{"level":3,"title":"🔹 情况二：IO 密集型任务","slug":"🔹-情况二-io-密集型任务","link":"#🔹-情况二-io-密集型任务","children":[]},{"level":3,"title":"🔹 情况三：混合型任务（计算 + IO）","slug":"🔹-情况三-混合型任务-计算-io","link":"#🔹-情况三-混合型任务-计算-io","children":[]}]},{"level":2,"title":"✅ 3. 阻塞系数估算法（更专业）","slug":"✅-3-阻塞系数估算法-更专业","link":"#✅-3-阻塞系数估算法-更专业","children":[]},{"level":2,"title":"✅ 4. 队列类型怎么选？","slug":"✅-4-队列类型怎么选","link":"#✅-4-队列类型怎么选","children":[]},{"level":2,"title":"✅ 5. 拒绝策略怎么选？","slug":"✅-5-拒绝策略怎么选","link":"#✅-5-拒绝策略怎么选","children":[]},{"level":2,"title":"✅ 6. 实战建议总结","slug":"✅-6-实战建议总结","link":"#✅-6-实战建议总结","children":[]},{"level":2,"title":"✅ 7. 面试答题模板（建议背诵）","slug":"✅-7-面试答题模板-建议背诵","link":"#✅-7-面试答题模板-建议背诵","children":[]},{"level":2,"title":"✅ 8. 工具推荐","slug":"✅-8-工具推荐","link":"#✅-8-工具推荐","children":[]}],"readingTime":{"minutes":3.13,"words":939},"filePathRelative":"Interview/面试答题卡/Java/根据业务场景选择线程池参数.md","excerpt":"\\n<hr>\\n<h2>✅ 一句话概括</h2>\\n<blockquote>\\n<p>线程池参数的选择应根据任务的特性（CPU 密集 / IO 密集 / 混合型）和业务实际需求来综合考虑，以达到<strong>资源利用最大化</strong>和<strong>系统稳定性</strong>的平衡。</p>\\n</blockquote>\\n<hr>\\n<h2>✅ 1. 常见线程池参数回顾（ThreadPoolExecutor 构造函数）</h2>\\n<div class=\\"language-java line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"java\\" data-title=\\"java\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">public</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> ThreadPoolExecutor</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">(</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    int</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> corePoolSize</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">,</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">        // 核心线程数</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    int</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> maximumPoolSize</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">,</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">     // 最大线程数</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    long</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> keepAliveTime</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">,</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">      // 空闲线程存活时间</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\">    TimeUnit</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> unit</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">,</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">           // 时间单位</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\">    BlockingQueue</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">&lt;</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">Runnable</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">&gt;</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> workQueue</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">,</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"> // 任务队列</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\">    ThreadFactory</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> threadFactory</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\">    RejectedExecutionHandler</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> handler   </span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// 拒绝策略</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">)</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}')}}]);