"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[15404],{66262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}},12223:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>e,data:()=>t});var n=a(20641);const l=a.p+"assets/img/image-20250827105703055.473a3f18.png",h={},e=(0,a(66262).A)(h,[["render",function(i,s){return(0,n.uX)(),(0,n.CE)("div",null,s[0]||(s[0]=[(0,n.Fv)('<h1 id="🎯-策略模式-strategy-pattern-详解" tabindex="-1"><a class="header-anchor" href="#🎯-策略模式-strategy-pattern-详解"><span>🎯 策略模式（Strategy Pattern）详解</span></a></h1><hr><h2 id="🧠-模式简介" tabindex="-1"><a class="header-anchor" href="#🧠-模式简介"><span>🧠 模式简介</span></a></h2><p><strong>策略模式</strong>（Strategy Pattern）是一种行为型设计模式。它定义了一系列算法，并将每个算法封装起来，使它们可以互相替换，从而让算法的变化独立于使用算法的客户。</p><p>一句话概括： 👉 <strong>策略模式就是把一组算法封装成独立的类，让它们可以自由替换，避免硬编码的 if-else。</strong></p><hr><h2 id="💡-解决的问题" tabindex="-1"><a class="header-anchor" href="#💡-解决的问题"><span>💡 解决的问题</span></a></h2><p>在实际开发中，经常会遇到这样的场景：</p><ul><li>一个功能可以通过多种算法或逻辑实现。</li><li>不同情况下需要选择不同的实现。</li><li>如果直接在业务代码里用 <code>if-else</code> 或 <code>switch</code> 来控制，会导致代码臃肿、难以维护。</li></ul><p><strong>策略模式</strong>的目的就是将这些算法抽象出来，使它们可以灵活切换，并且对调用方透明。</p><hr><h2 id="🔑-模式结构" tabindex="-1"><a class="header-anchor" href="#🔑-模式结构"><span>🔑 模式结构</span></a></h2><p>策略模式包含以下几个角色：</p><ol><li><strong>Strategy（抽象策略接口）</strong><ul><li>定义算法的公共接口。</li></ul></li><li><strong>ConcreteStrategy（具体策略类）</strong><ul><li>实现不同的算法。</li></ul></li><li><strong>Context（上下文环境类）</strong><ul><li>持有一个策略对象，负责调用算法。</li></ul></li></ol><h3 id="uml-类图" tabindex="-1"><a class="header-anchor" href="#uml-类图"><span>UML 类图</span></a></h3><figure><img src="'+l+'" alt="策略模式" tabindex="0" loading="lazy"><figcaption>策略模式</figcaption></figure><hr><h2 id="🛠️-代码示例" tabindex="-1"><a class="header-anchor" href="#🛠️-代码示例"><span>🛠️ 代码示例</span></a></h2><p>下面用 Java 代码演示策略模式：</p><h3 id="_1-策略接口" tabindex="-1"><a class="header-anchor" href="#_1-策略接口"><span>1. 策略接口</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 抽象策略</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> PaymentStrategy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> pay</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> amount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-具体策略类" tabindex="-1"><a class="header-anchor" href="#_2-具体策略类"><span>2. 具体策略类</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 微信支付</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> WeChatPay</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> PaymentStrategy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> pay</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> amount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;使用微信支付：&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> amount </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot; 元&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 支付宝支付</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> AliPay</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> PaymentStrategy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> pay</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> amount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;使用支付宝支付：&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> amount </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot; 元&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-上下文类" tabindex="-1"><a class="header-anchor" href="#_3-上下文类"><span>3. 上下文类</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> PaymentContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> PaymentStrategy</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> strategy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 动态设置策略</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> setPaymentStrategy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">PaymentStrategy</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> strategy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">strategy</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> strategy;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> pay</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> amount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        strategy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pay</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(amount);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-使用示例" tabindex="-1"><a class="header-anchor" href="#_4-使用示例"><span>4. 使用示例</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> StrategyDemo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        PaymentContext</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> context</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> PaymentContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 使用微信支付</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setPaymentStrategy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> WeChatPay</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pay</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 切换为支付宝支付</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setPaymentStrategy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> AliPay</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pay</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>使用微信支付：100 元</span></span>\n<span class="line"><span>使用支付宝支付：200 元</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="📌-优缺点" tabindex="-1"><a class="header-anchor" href="#📌-优缺点"><span>📌 优缺点</span></a></h2><h3 id="✅-优点" tabindex="-1"><a class="header-anchor" href="#✅-优点"><span>✅ 优点</span></a></h3><ul><li>避免冗长的 <code>if-else</code> 或 <code>switch-case</code>。</li><li>提供算法的灵活切换。</li><li>遵循 <strong>开闭原则</strong>：增加新算法时只需增加策略类，不用修改原有代码。</li></ul><h3 id="❌-缺点" tabindex="-1"><a class="header-anchor" href="#❌-缺点"><span>❌ 缺点</span></a></h3><ul><li>会增加类的数量，每个算法都要写一个类。</li><li>需要客户端理解不同策略的适用场景。</li></ul><hr><h2 id="🎯-适用场景" tabindex="-1"><a class="header-anchor" href="#🎯-适用场景"><span>🎯 适用场景</span></a></h2><ul><li>系统需要在运行时切换不同算法。</li><li>需要避免大量的 <code>if-else</code> 或 <code>switch</code> 分支语句。</li><li>算法逻辑相对复杂，且会不断扩展时。</li></ul><p>典型案例：</p><ul><li>支付方式选择（微信 / 支付宝 / 银行卡）。</li><li>排序算法切换（快速排序 / 归并排序 / 插入排序）。</li><li>日志记录策略（写文件 / 写数据库 / 写控制台）。</li></ul><hr><h2 id="🚀-总结" tabindex="-1"><a class="header-anchor" href="#🚀-总结"><span>🚀 总结</span></a></h2><p>策略模式通过 <strong>封装算法</strong>，将不同的算法独立出来，使得调用方可以在不修改代码的情况下自由切换算法。它的核心思想就是 <strong>用多态代替 if-else</strong>。</p><p>👉 如果你发现代码中有很多的分支判断，并且这些分支对应的是不同的算法或逻辑，那么考虑使用 <strong>策略模式</strong> 来优化代码结构</p>',44)]))}]]),t=JSON.parse('{"path":"/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/C%E8%A1%8C%E4%B8%BA%E5%9E%8B/b%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html","title":"🎯 策略模式（Strategy Pattern）详解","lang":"zh-CN","frontmatter":{"gitInclude":[]},"headers":[{"level":2,"title":"🧠 模式简介","slug":"🧠-模式简介","link":"#🧠-模式简介","children":[]},{"level":2,"title":"💡 解决的问题","slug":"💡-解决的问题","link":"#💡-解决的问题","children":[]},{"level":2,"title":"🔑 模式结构","slug":"🔑-模式结构","link":"#🔑-模式结构","children":[{"level":3,"title":"UML 类图","slug":"uml-类图","link":"#uml-类图","children":[]}]},{"level":2,"title":"🛠️ 代码示例","slug":"🛠️-代码示例","link":"#🛠️-代码示例","children":[{"level":3,"title":"1. 策略接口","slug":"_1-策略接口","link":"#_1-策略接口","children":[]},{"level":3,"title":"2. 具体策略类","slug":"_2-具体策略类","link":"#_2-具体策略类","children":[]},{"level":3,"title":"3. 上下文类","slug":"_3-上下文类","link":"#_3-上下文类","children":[]},{"level":3,"title":"4. 使用示例","slug":"_4-使用示例","link":"#_4-使用示例","children":[]}]},{"level":2,"title":"📌 优缺点","slug":"📌-优缺点","link":"#📌-优缺点","children":[{"level":3,"title":"✅ 优点","slug":"✅-优点","link":"#✅-优点","children":[]},{"level":3,"title":"❌ 缺点","slug":"❌-缺点","link":"#❌-缺点","children":[]}]},{"level":2,"title":"🎯 适用场景","slug":"🎯-适用场景","link":"#🎯-适用场景","children":[]},{"level":2,"title":"🚀 总结","slug":"🚀-总结","link":"#🚀-总结","children":[]}],"readingTime":{"minutes":2.68,"words":804},"filePathRelative":"设计模式/C行为型/b策略模式.md","excerpt":"\\n<hr>\\n<h2>🧠 模式简介</h2>\\n<p><strong>策略模式</strong>（Strategy Pattern）是一种行为型设计模式。它定义了一系列算法，并将每个算法封装起来，使它们可以互相替换，从而让算法的变化独立于使用算法的客户。</p>\\n<p>一句话概括：\\n👉 <strong>策略模式就是把一组算法封装成独立的类，让它们可以自由替换，避免硬编码的 if-else。</strong></p>\\n<hr>\\n<h2>💡 解决的问题</h2>\\n<p>在实际开发中，经常会遇到这样的场景：</p>\\n<ul>\\n<li>一个功能可以通过多种算法或逻辑实现。</li>\\n<li>不同情况下需要选择不同的实现。</li>\\n<li>如果直接在业务代码里用 <code>if-else</code> 或 <code>switch</code> 来控制，会导致代码臃肿、难以维护。</li>\\n</ul>"}')}}]);