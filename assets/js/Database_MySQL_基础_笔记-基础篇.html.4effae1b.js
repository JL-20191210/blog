"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[89898],{66262:(s,a)=>{a.A=(s,a)=>{const e=s.__vccOpts||s;for(const[s,i]of a)e[s]=i;return e}},86827:(s,a,e)=>{e.r(a),e.d(a,{comp:()=>l,data:()=>t});var i=e(20641);const n={},l=(0,e(66262).A)(n,[["render",function(s,a){return(0,i.uX)(),(0,i.CE)("div",null,[a[0]||(a[0]=(0,i.Lk)("h1",{id:"_1-基础篇",tabindex:"-1"},[(0,i.Lk)("a",{class:"header-anchor",href:"#_1-基础篇"},[(0,i.Lk)("span",null,"1.基础篇")])],-1)),a[1]||(a[1]=(0,i.Lk)("h2",{id:"_1-1-通用语法及分类",tabindex:"-1"},[(0,i.Lk)("a",{class:"header-anchor",href:"#_1-1-通用语法及分类"},[(0,i.Lk)("span",null,"1.1 通用语法及分类")])],-1)),a[2]||(a[2]=(0,i.Lk)("ul",null,[(0,i.Lk)("li",null,"DDL: 数据定义语言，用来定义数据库对象（数据库、表、字段）"),(0,i.Lk)("li",null,"DML: 数据操作语言，用来对数据库表中的数据进行增删改"),(0,i.Lk)("li",null,"DQL: 数据查询语言，用来查询数据库中表的记录"),(0,i.Lk)("li",null,"DCL: 数据控制语言，用来创建数据库用户、控制数据库的控制权限")],-1)),(0,i.Q3)(" more "),a[3]||(a[3]=(0,i.Fv)('<h3 id="ddl-数据定义语言" tabindex="-1"><a class="header-anchor" href="#ddl-数据定义语言"><span>DDL（数据定义语言）</span></a></h3><p>数据定义语言</p><h4 id="数据库操作" tabindex="-1"><a class="header-anchor" href="#数据库操作"><span>数据库操作</span></a></h4><p>查询所有数据库： <code>SHOW DATABASES;</code> 查询当前数据库： <code>SELECT DATABASE();</code> 创建数据库： <code>CREATE DATABASE [ IF NOT EXISTS ] 数据库名 [ DEFAULT CHARSET 字符集] [COLLATE 排序规则 ];</code> 删除数据库： <code>DROP DATABASE [ IF EXISTS ] 数据库名;</code> 使用数据库： <code>USE 数据库名;</code></p><h5 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h5><ul><li>UTF8字符集长度为3字节，有些符号占4字节，所以推荐用utf8mb4字符集</li></ul><h4 id="表操作" tabindex="-1"><a class="header-anchor" href="#表操作"><span>表操作</span></a></h4><p>查询当前数据库所有表： <code>SHOW TABLES;</code> 查询表结构： <code>DESC 表名;</code> 查询指定表的建表语句： <code>SHOW CREATE TABLE 表名;</code></p><p>创建表：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE 表名(</span></span>\n<span class="line"><span>  字段1 字段1类型 [COMMENT 字段1注释],</span></span>\n<span class="line"><span>  字段2 字段2类型 [COMMENT 字段2注释],</span></span>\n<span class="line"><span>  字段3 字段3类型 [COMMENT 字段3注释],</span></span>\n<span class="line"><span>  ...</span></span>\n<span class="line"><span>  字段n 字段n类型 [COMMENT 字段n注释]</span></span>\n<span class="line"><span>)[ COMMENT 表注释 ];</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>最后一个字段后面没有逗号</strong></p><p>添加字段： <code>ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];</code> 例：<code>ALTER TABLE emp ADD nickname varchar(20) COMMENT &#39;昵称&#39;;</code></p><p>修改数据类型： <code>ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);</code> 修改字段名和字段类型： <code>ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];</code> 例：将emp表的nickname字段修改为username，类型为varchar(30) <code>ALTER TABLE emp CHANGE nickname username varchar(30) COMMENT &#39;昵称&#39;;</code></p><p>删除字段： <code>ALTER TABLE 表名 DROP 字段名;</code></p><p>修改表名： <code>ALTER TABLE 表名 RENAME TO 新表名</code></p><p>删除表： <code>DROP TABLE [IF EXISTS] 表名;</code> 删除表，并重新创建该表： <code>TRUNCATE TABLE 表名;</code></p><h3 id="dml-数据操作语言" tabindex="-1"><a class="header-anchor" href="#dml-数据操作语言"><span>DML（数据操作语言）</span></a></h3><h4 id="添加数据" tabindex="-1"><a class="header-anchor" href="#添加数据"><span>添加数据</span></a></h4><p>指定字段： <code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...);</code> 全部字段： <code>INSERT INTO 表名 VALUES (值1, 值2, ...);</code></p><p>批量添加数据： <code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code><code>INSERT INTO 表名 VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code></p><h5 id="注意事项-1" tabindex="-1"><a class="header-anchor" href="#注意事项-1"><span>注意事项</span></a></h5><ul><li>字符串和日期类型数据应该包含在引号中</li><li>插入的数据大小应该在字段的规定范围内</li></ul><h4 id="更新和删除数据" tabindex="-1"><a class="header-anchor" href="#更新和删除数据"><span>更新和删除数据</span></a></h4><p>修改数据： <code>UPDATE 表名 SET 字段名1 = 值1, 字段名2 = 值2, ... [ WHERE 条件 ];</code> 例： <code>UPDATE emp SET name = &#39;Jack&#39; WHERE id = 1;</code></p><p>删除数据： <code>DELETE FROM 表名 [ WHERE 条件 ];</code></p><h3 id="dql-数据查询语言" tabindex="-1"><a class="header-anchor" href="#dql-数据查询语言"><span>DQL（数据查询语言）</span></a></h3><p>语法：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>SELECT</span></span>\n<span class="line"><span>  字段列表</span></span>\n<span class="line"><span>FROM</span></span>\n<span class="line"><span>  表名字段</span></span>\n<span class="line"><span>WHERE</span></span>\n<span class="line"><span>  条件列表</span></span>\n<span class="line"><span>GROUP BY</span></span>\n<span class="line"><span>  分组字段列表</span></span>\n<span class="line"><span>HAVING</span></span>\n<span class="line"><span>  分组后的条件列表</span></span>\n<span class="line"><span>ORDER BY</span></span>\n<span class="line"><span>  排序字段列表</span></span>\n<span class="line"><span>LIMIT</span></span>\n<span class="line"><span>  分页参数</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="基础查询" tabindex="-1"><a class="header-anchor" href="#基础查询"><span>基础查询</span></a></h4><p>查询多个字段： <code>SELECT 字段1, 字段2, 字段3, ... FROM 表名;</code><code>SELECT * FROM 表名;</code></p><p>设置别名： <code>SELECT 字段1 [ AS 别名1 ], 字段2 [ AS 别名2 ], 字段3 [ AS 别名3 ], ... FROM 表名;</code><code>SELECT 字段1 [ 别名1 ], 字段2 [ 别名2 ], 字段3 [ 别名3 ], ... FROM 表名;</code></p><p>去除重复记录： <code>SELECT DISTINCT 字段列表 FROM 表名;</code></p><p>转义： <code>SELECT * FROM 表名 WHERE name LIKE &#39;/_张三&#39; ESCAPE &#39;/&#39;</code> / 之后的_不作为通配符</p><h4 id="条件查询" tabindex="-1"><a class="header-anchor" href="#条件查询"><span>条件查询</span></a></h4><p>语法： <code>SELECT 字段列表 FROM 表名 WHERE 条件列表;</code></p><p>条件：</p><table><thead><tr><th>比较运算符</th><th>功能</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt; 或 !=</td><td>不等于</td></tr><tr><td>BETWEEN … AND …</td><td>在某个范围内（含最小、最大值）</td></tr><tr><td>IN(…)</td><td>在in之后的列表中的值，多选一</td></tr><tr><td>LIKE 占位符</td><td>模糊匹配（_匹配单个字符，%匹配任意个字符）</td></tr><tr><td>IS NULL</td><td>是NULL</td></tr></tbody></table><table><thead><tr><th>逻辑运算符</th><th>功能</th></tr></thead><tbody><tr><td>AND 或 &amp;&amp;</td><td>并且（多个条件同时成立）</td></tr><tr><td>OR 或 ||</td><td>或者（多个条件任意一个成立）</td></tr><tr><td>NOT 或 !</td><td>非，不是</td></tr></tbody></table><p>例子：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-- 年龄等于30</span></span>\n<span class="line"><span>select * from employee where age = 30;</span></span>\n<span class="line"><span>-- 年龄小于30</span></span>\n<span class="line"><span>select * from employee where age &lt; 30;</span></span>\n<span class="line"><span>-- 小于等于</span></span>\n<span class="line"><span>select * from employee where age &lt;= 30;</span></span>\n<span class="line"><span>-- 没有身份证</span></span>\n<span class="line"><span>select * from employee where idcard is null or idcard = &#39;&#39;;</span></span>\n<span class="line"><span>-- 有身份证</span></span>\n<span class="line"><span>select * from employee where idcard;</span></span>\n<span class="line"><span>select * from employee where idcard is not null;</span></span>\n<span class="line"><span>-- 不等于</span></span>\n<span class="line"><span>select * from employee where age != 30;</span></span>\n<span class="line"><span>-- 年龄在20到30之间</span></span>\n<span class="line"><span>select * from employee where age between 20 and 30;</span></span>\n<span class="line"><span>select * from employee where age &gt;= 20 and age &lt;= 30;</span></span>\n<span class="line"><span>-- 下面语句不报错，但查不到任何信息</span></span>\n<span class="line"><span>select * from employee where age between 30 and 20;</span></span>\n<span class="line"><span>-- 性别为女且年龄小于30</span></span>\n<span class="line"><span>select * from employee where age &lt; 30 and gender = &#39;女&#39;;</span></span>\n<span class="line"><span>-- 年龄等于25或30或35</span></span>\n<span class="line"><span>select * from employee where age = 25 or age = 30 or age = 35;</span></span>\n<span class="line"><span>select * from employee where age in (25, 30, 35);</span></span>\n<span class="line"><span>-- 姓名为两个字</span></span>\n<span class="line"><span>select * from employee where name like &#39;__&#39;;</span></span>\n<span class="line"><span>-- 身份证最后为X</span></span>\n<span class="line"><span>select * from employee where idcard like &#39;%X&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="聚合查询-聚合函数" tabindex="-1"><a class="header-anchor" href="#聚合查询-聚合函数"><span>聚合查询（聚合函数）</span></a></h4><p>常见聚合函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>count</td><td>统计数量</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>avg</td><td>平均值</td></tr><tr><td>sum</td><td>求和</td></tr></tbody></table><p>语法： <code>SELECT 聚合函数(字段列表) FROM 表名;</code> 例： <code>SELECT count(id) from employee where workaddress = &quot;广东省&quot;;</code></p><h4 id="分组查询" tabindex="-1"><a class="header-anchor" href="#分组查询"><span>分组查询</span></a></h4><p>语法： <code>SELECT 字段列表 FROM 表名 [ WHERE 条件 ] GROUP BY 分组字段名 [ HAVING 分组后的过滤条件 ];</code></p><p>where 和 having 的区别：</p><ul><li>执行时机不同：where是分组之前进行过滤，不满足where条件不参与分组；having是分组后对结果进行过滤。</li><li>判断条件不同：where不能对聚合函数进行判断，而having可以。</li></ul><p>例子：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-- 根据性别分组，统计男性和女性数量（只显示分组数量，不显示哪个是男哪个是女）</span></span>\n<span class="line"><span>select count(*) from employee group by gender;</span></span>\n<span class="line"><span>-- 根据性别分组，统计男性和女性数量</span></span>\n<span class="line"><span>select gender, count(*) from employee group by gender;</span></span>\n<span class="line"><span>-- 根据性别分组，统计男性和女性的平均年龄</span></span>\n<span class="line"><span>select gender, avg(age) from employee group by gender;</span></span>\n<span class="line"><span>-- 年龄小于45，并根据工作地址分组</span></span>\n<span class="line"><span>select workaddress, count(*) from employee where age &lt; 45 group by workaddress;</span></span>\n<span class="line"><span>-- 年龄小于45，并根据工作地址分组，获取员工数量大于等于3的工作地址</span></span>\n<span class="line"><span>select workaddress, count(*) address_count from employee where age &lt; 45 group by workaddress having address_count &gt;= 3;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="注意事项-2" tabindex="-1"><a class="header-anchor" href="#注意事项-2"><span>注意事项</span></a></h5><ul><li>执行顺序：where &gt; 聚合函数 &gt; having</li><li>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义</li></ul><h4 id="排序查询" tabindex="-1"><a class="header-anchor" href="#排序查询"><span>排序查询</span></a></h4><p>语法： <code>SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1, 字段2 排序方式2;</code></p><p>排序方式：</p><ul><li>ASC: 升序（默认）</li><li>DESC: 降序</li></ul><p>例子：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-- 根据年龄升序排序</span></span>\n<span class="line"><span>SELECT * FROM employee ORDER BY age ASC;</span></span>\n<span class="line"><span>SELECT * FROM employee ORDER BY age;</span></span>\n<span class="line"><span>-- 两字段排序，根据年龄升序排序，入职时间降序排序</span></span>\n<span class="line"><span>SELECT * FROM employee ORDER BY age ASC, entrydate DESC;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="注意事项-3" tabindex="-1"><a class="header-anchor" href="#注意事项-3"><span>注意事项</span></a></h5><p>如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序</p><h4 id="分页查询" tabindex="-1"><a class="header-anchor" href="#分页查询"><span>分页查询</span></a></h4><p>语法： <code>SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数;</code></p><p>例子：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-- 查询第一页数据，展示10条</span></span>\n<span class="line"><span>SELECT * FROM employee LIMIT 0, 10;</span></span>\n<span class="line"><span>-- 查询第二页</span></span>\n<span class="line"><span>SELECT * FROM employee LIMIT 10, 10;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="注意事项-4" tabindex="-1"><a class="header-anchor" href="#注意事项-4"><span>注意事项</span></a></h5><ul><li>起始索引从0开始，起始索引 = （查询页码 - 1） * 每页显示记录数</li><li>分页查询是数据库的方言，不同数据库有不同实现，MySQL是LIMIT</li><li>如果查询的是第一页数据，起始索引可以省略，直接简写 LIMIT 10</li></ul><h4 id="dql执行顺序" tabindex="-1"><a class="header-anchor" href="#dql执行顺序"><span>DQL执行顺序</span></a></h4><p>FROM -&gt; WHERE -&gt; GROUP BY -&gt; SELECT -&gt; ORDER BY -&gt; LIMIT</p><h3 id="dcl" tabindex="-1"><a class="header-anchor" href="#dcl"><span>DCL</span></a></h3><h4 id="管理用户" tabindex="-1"><a class="header-anchor" href="#管理用户"><span>管理用户</span></a></h4><p>查询用户：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>USE mysql;</span></span>\n<span class="line"><span>SELECT * FROM user;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>创建用户: <code>CREATE USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED BY &#39;密码&#39;;</code></p><p>修改用户密码： <code>ALTER USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED WITH mysql_native_password BY &#39;新密码&#39;;</code></p><p>删除用户： <code>DROP USER &#39;用户名&#39;@&#39;主机名&#39;;</code></p><p>例子：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-- 创建用户test，只能在当前主机localhost访问</span></span>\n<span class="line"><span>create user &#39;test&#39;@&#39;localhost&#39; identified by &#39;123456&#39;;</span></span>\n<span class="line"><span>-- 创建用户test，能在任意主机访问</span></span>\n<span class="line"><span>create user &#39;test&#39;@&#39;%&#39; identified by &#39;123456&#39;;</span></span>\n<span class="line"><span>create user &#39;test&#39; identified by &#39;123456&#39;;</span></span>\n<span class="line"><span>-- 修改密码</span></span>\n<span class="line"><span>alter user &#39;test&#39;@&#39;localhost&#39; identified with mysql_native_password by &#39;1234&#39;;</span></span>\n<span class="line"><span>-- 删除用户</span></span>\n<span class="line"><span>drop user &#39;test&#39;@&#39;localhost&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="注意事项-5" tabindex="-1"><a class="header-anchor" href="#注意事项-5"><span>注意事项</span></a></h5><ul><li>主机名可以使用 % 通配</li></ul><h4 id="权限控制" tabindex="-1"><a class="header-anchor" href="#权限控制"><span>权限控制</span></a></h4><p>常用权限：</p><table><thead><tr><th>权限</th><th>说明</th></tr></thead><tbody><tr><td>ALL, ALL PRIVILEGES</td><td>所有权限</td></tr><tr><td>SELECT</td><td>查询数据</td></tr><tr><td>INSERT</td><td>插入数据</td></tr><tr><td>UPDATE</td><td>修改数据</td></tr><tr><td>DELETE</td><td>删除数据</td></tr><tr><td>ALTER</td><td>修改表</td></tr><tr><td>DROP</td><td>删除数据库/表/视图</td></tr><tr><td>CREATE</td><td>创建数据库/表</td></tr></tbody></table><p>更多权限请看<a href="https://jimhackking.github.io/%E8%BF%90%E7%BB%B4/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#%E6%9D%83%E9%99%90%E4%B8%80%E8%A7%88%E8%A1%A8" target="_blank" rel="noopener noreferrer">权限一览表</a></p><p>查询权限： <code>SHOW GRANTS FOR &#39;用户名&#39;@&#39;主机名&#39;;</code></p><p>授予权限： <code>GRANT 权限列表 ON 数据库名.表名 TO &#39;用户名&#39;@&#39;主机名&#39;;</code></p><p>撤销权限： <code>REVOKE 权限列表 ON 数据库名.表名 FROM &#39;用户名&#39;@&#39;主机名&#39;;</code></p><h5 id="注意事项-6" tabindex="-1"><a class="header-anchor" href="#注意事项-6"><span>注意事项</span></a></h5><ul><li>多个权限用逗号分隔</li><li>授权时，数据库名和表名可以用 * 进行通配，代表所有</li></ul><h2 id="_1-2-函数" tabindex="-1"><a class="header-anchor" href="#_1-2-函数"><span>1.2 函数</span></a></h2><ul><li>字符串函数</li><li>数值函数</li><li>日期函数</li><li>流程函数</li></ul><h3 id="字符串函数" tabindex="-1"><a class="header-anchor" href="#字符串函数"><span>字符串函数</span></a></h3><p>常用函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CONCAT(s1, s2, …, sn)</td><td>字符串拼接，将s1, s2, …, sn拼接成一个字符串</td></tr><tr><td>LOWER(str)</td><td>将字符串全部转为小写</td></tr><tr><td>UPPER(str)</td><td>将字符串全部转为大写</td></tr><tr><td>LPAD(str, n, pad)</td><td>左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</td></tr><tr><td>RPAD(str, n, pad)</td><td>右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td></tr><tr><td>TRIM(str)</td><td>去掉字符串头部和尾部的空格</td></tr><tr><td>SUBSTRING(str, start, len)</td><td>返回从字符串str从start位置起的len个长度的字符串</td></tr><tr><td>REPLACE(column, source, replace)</td><td>替换字符串</td></tr></tbody></table><p>使用示例：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-- 拼接</span></span>\n<span class="line"><span>SELECT CONCAT(&#39;Hello&#39;, &#39;World&#39;);</span></span>\n<span class="line"><span>-- 小写</span></span>\n<span class="line"><span>SELECT LOWER(&#39;Hello&#39;);</span></span>\n<span class="line"><span>-- 大写</span></span>\n<span class="line"><span>SELECT UPPER(&#39;Hello&#39;);</span></span>\n<span class="line"><span>-- 左填充</span></span>\n<span class="line"><span>SELECT LPAD(&#39;01&#39;, 5, &#39;-&#39;);</span></span>\n<span class="line"><span>-- 右填充</span></span>\n<span class="line"><span>SELECT RPAD(&#39;01&#39;, 5, &#39;-&#39;);</span></span>\n<span class="line"><span>-- 去除空格</span></span>\n<span class="line"><span>SELECT TRIM(&#39; Hello World &#39;);</span></span>\n<span class="line"><span>-- 切片（起始索引为1）</span></span>\n<span class="line"><span>SELECT SUBSTRING(&#39;Hello World&#39;, 1, 5);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数值函数" tabindex="-1"><a class="header-anchor" href="#数值函数"><span>数值函数</span></a></h3><p>常见函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CEIL(x)</td><td>向上取整</td></tr><tr><td>FLOOR(x)</td><td>向下取整</td></tr><tr><td>MOD(x, y)</td><td>返回x/y的模</td></tr><tr><td>RAND()</td><td>返回0~1内的随机数</td></tr><tr><td>ROUND(x, y)</td><td>求参数x的四舍五入值，保留y位小数</td></tr></tbody></table><h3 id="日期函数" tabindex="-1"><a class="header-anchor" href="#日期函数"><span>日期函数</span></a></h3><p>常用函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>CURDATE()</td><td>返回当前日期</td></tr><tr><td>CURTIME()</td><td>返回当前时间</td></tr><tr><td>NOW()</td><td>返回当前日期和时间</td></tr><tr><td>YEAR(date)</td><td>获取指定date的年份</td></tr><tr><td>MONTH(date)</td><td>获取指定date的月份</td></tr><tr><td>DAY(date)</td><td>获取指定date的日期</td></tr><tr><td>DATE_ADD(date, INTERVAL expr type)</td><td>返回一个日期/时间值加上一个时间间隔expr后的时间值</td></tr><tr><td>DATEDIFF(date1, date2)</td><td>返回起始时间date1和结束时间date2之间的天数</td></tr></tbody></table><p>例子：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-- DATE_ADD</span></span>\n<span class="line"><span>SELECT DATE_ADD(NOW(), INTERVAL 70 YEAR);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="流程函数" tabindex="-1"><a class="header-anchor" href="#流程函数"><span>流程函数</span></a></h3><p>常用函数：</p><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>IF(value, t, f)</td><td>如果value为true，则返回t，否则返回f</td></tr><tr><td>IFNULL(value1, value2)</td><td>如果value1不为空，返回value1，否则返回value2</td></tr><tr><td>CASE WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td><td>如果val1为true，返回res1，… 否则返回default默认值</td></tr><tr><td>CASE [ expr ] WHEN [ val1 ] THEN [ res1 ] … ELSE [ default ] END</td><td>如果expr的值等于val1，返回res1，… 否则返回default默认值</td></tr></tbody></table><p>例子：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>select</span></span>\n<span class="line"><span>  name,</span></span>\n<span class="line"><span>  (case when age &gt; 30 then &#39;中年&#39; else &#39;青年&#39; end)</span></span>\n<span class="line"><span>from employee;</span></span>\n<span class="line"><span>select</span></span>\n<span class="line"><span>  name,</span></span>\n<span class="line"><span>  (case workaddress when &#39;北京市&#39; then &#39;一线城市&#39; when &#39;上海市&#39; then &#39;一线城市&#39; else &#39;二线城市&#39; end) as &#39;工作地址&#39;</span></span>\n<span class="line"><span>from employee;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-3-约束" tabindex="-1"><a class="header-anchor" href="#_1-3-约束"><span>1.3 约束</span></a></h2><p>分类：</p><table><thead><tr><th>约束</th><th>描述</th><th>关键字</th></tr></thead><tbody><tr><td>非空约束</td><td>限制该字段的数据不能为null</td><td>NOT NULL</td></tr><tr><td>唯一约束</td><td>保证该字段的所有数据都是唯一、不重复的</td><td>UNIQUE</td></tr><tr><td>主键约束</td><td>主键是一行数据的唯一标识，要求非空且唯一</td><td>PRIMARY KEY</td></tr><tr><td>默认约束</td><td>保存数据时，如果未指定该字段的值，则采用默认值</td><td>DEFAULT</td></tr><tr><td>检查约束（8.0.1版本后）</td><td>保证字段值满足某一个条件</td><td>CHECK</td></tr><tr><td>外键约束</td><td>用来让两张图的数据之间建立连接，保证数据的一致性和完整性</td><td>FOREIGN KEY</td></tr></tbody></table><p>约束是作用于表中字段上的，可以再创建表/修改表的时候添加约束。</p><h3 id="常用约束" tabindex="-1"><a class="header-anchor" href="#常用约束"><span>常用约束</span></a></h3><table><thead><tr><th>约束条件</th><th>关键字</th></tr></thead><tbody><tr><td>主键</td><td>PRIMARY KEY</td></tr><tr><td>自动增长</td><td>AUTO_INCREMENT</td></tr><tr><td>不为空</td><td>NOT NULL</td></tr><tr><td>唯一</td><td>UNIQUE</td></tr><tr><td>逻辑条件</td><td>CHECK</td></tr><tr><td>默认值</td><td>DEFAULT</td></tr></tbody></table><p>例子：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>create table user(</span></span>\n<span class="line"><span>  id int primary key auto_increment,</span></span>\n<span class="line"><span>  name varchar(10) not null unique,</span></span>\n<span class="line"><span>  age int check(age &gt; 0 and age &lt; 120),</span></span>\n<span class="line"><span>  status char(1) default &#39;1&#39;,</span></span>\n<span class="line"><span>  gender char(1)</span></span>\n<span class="line"><span>);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="外键约束" tabindex="-1"><a class="header-anchor" href="#外键约束"><span>外键约束</span></a></h3><p>添加外键：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>CREATE TABLE 表名(</span></span>\n<span class="line"><span>  字段名 字段类型,</span></span>\n<span class="line"><span>  ...</span></span>\n<span class="line"><span>  [CONSTRAINT] [外键名称] FOREIGN KEY(外键字段名) REFERENCES 主表(主表列名)</span></span>\n<span class="line"><span>);</span></span>\n<span class="line"><span>ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名) REFERENCES 主表(主表列名);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>-- 例子</span></span>\n<span class="line"><span>alter table emp add constraint fk_emp_dept_id foreign key(dept_id) references dept(id);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除外键： <code>ALTER TABLE 表名 DROP FOREIGN KEY 外键名;</code></p><h4 id="删除-更新行为" tabindex="-1"><a class="header-anchor" href="#删除-更新行为"><span>删除/更新行为</span></a></h4><table><thead><tr><th>行为</th><th>说明</th></tr></thead><tbody><tr><td>NO ACTION</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与RESTRICT一致）</td></tr><tr><td>RESTRICT</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新（与NO ACTION一致）</td></tr><tr><td>CASCADE</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则也删除/更新外键在子表中的记录</td></tr><tr><td>SET NULL</td><td>当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null（要求该外键允许为null）</td></tr><tr><td>SET DEFAULT</td><td>父表有变更时，子表将外键设为一个默认值（Innodb不支持）</td></tr></tbody></table><p>更改删除/更新行为： <code>ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段) REFERENCES 主表名(主表字段名) ON UPDATE 行为 ON DELETE 行为;</code></p><h2 id="_1-4-多表查询" tabindex="-1"><a class="header-anchor" href="#_1-4-多表查询"><span>1.4 多表查询</span></a></h2><h3 id="多表关系" tabindex="-1"><a class="header-anchor" href="#多表关系"><span>多表关系</span></a></h3><ul><li>一对多（多对一）</li><li>多对多</li><li>一对一</li></ul><h4 id="一对多" tabindex="-1"><a class="header-anchor" href="#一对多"><span>一对多</span></a></h4><p>案例：部门与员工 关系：一个部门对应多个员工，一个员工对应一个部门 实现：在多的一方建立外键，指向一的一方的主键</p><h4 id="多对多" tabindex="-1"><a class="header-anchor" href="#多对多"><span>多对多</span></a></h4><p>案例：学生与课程 关系：一个学生可以选多门课程，一门课程也可以供多个学生选修 实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</p><h4 id="一对一" tabindex="-1"><a class="header-anchor" href="#一对一"><span>一对一</span></a></h4><p>案例：用户与用户详情 关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率 实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的（UNIQUE）</p><h3 id="查询" tabindex="-1"><a class="header-anchor" href="#查询"><span>查询</span></a></h3><p>合并查询（笛卡尔积，会展示所有组合结果）： <code>select * from employee, dept;</code></p><blockquote><p>笛卡尔积：两个集合A集合和B集合的所有组合情况（在多表查询时，需要消除无效的笛卡尔积）</p></blockquote><p>消除无效笛卡尔积： <code>select * from employee, dept where employee.dept = dept.id;</code></p><h3 id="内连接查询" tabindex="-1"><a class="header-anchor" href="#内连接查询"><span>内连接查询</span></a></h3><p>内连接查询的是两张表交集的部分</p><p>隐式内连接： <code>SELECT 字段列表 FROM 表1, 表2 WHERE 条件 ...;</code></p><p>显式内连接： <code>SELECT 字段列表 FROM 表1 [ INNER ] JOIN 表2 ON 连接条件 ...;</code></p><p>显式性能比隐式高</p><p>例子：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-- 查询员工姓名，及关联的部门的名称</span></span>\n<span class="line"><span>-- 隐式</span></span>\n<span class="line"><span>select e.name, d.name from employee as e, dept as d where e.dept = d.id;</span></span>\n<span class="line"><span>-- 显式</span></span>\n<span class="line"><span>select e.name, d.name from employee as e inner join dept as d on e.dept = d.id;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="外连接查询" tabindex="-1"><a class="header-anchor" href="#外连接查询"><span>外连接查询</span></a></h3><p>左外连接： 查询左表所有数据，以及两张表交集部分数据 <code>SELECT 字段列表 FROM 表1 LEFT [ OUTER ] JOIN 表2 ON 条件 ...;</code> 相当于查询表1的所有数据，包含表1和表2交集部分数据</p><p>右外连接： 查询右表所有数据，以及两张表交集部分数据 <code>SELECT 字段列表 FROM 表1 RIGHT [ OUTER ] JOIN 表2 ON 条件 ...;</code></p><p>例子：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-- 左</span></span>\n<span class="line"><span>select e.*, d.name from employee as e left outer join dept as d on e.dept = d.id;</span></span>\n<span class="line"><span>select d.name, e.* from dept d left outer join emp e on e.dept = d.id;  -- 这条语句与下面的语句效果一样</span></span>\n<span class="line"><span>-- 右</span></span>\n<span class="line"><span>select d.name, e.* from employee as e right outer join dept as d on e.dept = d.id;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>左连接可以查询到没有dept的employee，右连接可以查询到没有employee的dept</p><h3 id="自连接查询" tabindex="-1"><a class="header-anchor" href="#自连接查询"><span>自连接查询</span></a></h3><p>当前表与自身的连接查询，自连接必须使用表别名</p><p>语法： <code>SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 ...;</code></p><p>自连接查询，可以是内连接查询，也可以是外连接查询</p><p>例子：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-- 查询员工及其所属领导的名字</span></span>\n<span class="line"><span>select a.name, b.name from employee a, employee b where a.manager = b.id;</span></span>\n<span class="line"><span>-- 没有领导的也查询出来</span></span>\n<span class="line"><span>select a.name, b.name from employee a left join employee b on a.manager = b.id;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="联合查询-union-union-all" tabindex="-1"><a class="header-anchor" href="#联合查询-union-union-all"><span>联合查询 union, union all</span></a></h3><p>把多次查询的结果合并，形成一个新的查询集</p><p>语法：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>SELECT 字段列表 FROM 表A ...</span></span>\n<span class="line"><span>UNION [ALL]</span></span>\n<span class="line"><span>SELECT 字段列表 FROM 表B ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="注意事项-7" tabindex="-1"><a class="header-anchor" href="#注意事项-7"><span>注意事项</span></a></h4><ul><li>UNION ALL 会有重复结果，UNION 不会</li><li>联合查询比使用or效率高，不会使索引失效</li></ul><h3 id="子查询" tabindex="-1"><a class="header-anchor" href="#子查询"><span>子查询</span></a></h3><p>SQL语句中嵌套SELECT语句，称谓嵌套查询，又称子查询。 <code>SELECT * FROM t1 WHERE column1 = ( SELECT column1 FROM t2);</code><strong>子查询外部的语句可以是 INSERT / UPDATE / DELETE / SELECT 的任何一个</strong></p><p>根据子查询结果可以分为：</p><ul><li>标量子查询（子查询结果为单个值）</li><li>列子查询（子查询结果为一列）</li><li>行子查询（子查询结果为一行）</li><li>表子查询（子查询结果为多行多列）</li></ul><p>根据子查询位置可分为：</p><ul><li>WHERE 之后</li><li>FROM 之后</li><li>SELECT 之后</li></ul><h4 id="标量子查询" tabindex="-1"><a class="header-anchor" href="#标量子查询"><span>标量子查询</span></a></h4><p>子查询返回的结果是单个值（数字、字符串、日期等）。 常用操作符：- &lt; &gt; &gt; &gt;= &lt; &lt;=</p><p>例子：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-- 查询销售部所有员工</span></span>\n<span class="line"><span>select id from dept where name = &#39;销售部&#39;;</span></span>\n<span class="line"><span>-- 根据销售部部门ID，查询员工信息</span></span>\n<span class="line"><span>select * from employee where dept = 4;</span></span>\n<span class="line"><span>-- 合并（子查询）</span></span>\n<span class="line"><span>select * from employee where dept = (select id from dept where name = &#39;销售部&#39;);</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>-- 查询xxx入职之后的员工信息</span></span>\n<span class="line"><span>select * from employee where entrydate &gt; (select entrydate from employee where name = &#39;xxx&#39;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="列子查询" tabindex="-1"><a class="header-anchor" href="#列子查询"><span>列子查询</span></a></h4><p>返回的结果是一列（可以是多行）。</p><p>常用操作符：</p><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>IN</td><td>在指定的集合范围内，多选一</td></tr><tr><td>NOT IN</td><td>不在指定的集合范围内</td></tr><tr><td>ANY</td><td>子查询返回列表中，有任意一个满足即可</td></tr><tr><td>SOME</td><td>与ANY等同，使用SOME的地方都可以使用ANY</td></tr><tr><td>ALL</td><td>子查询返回列表的所有值都必须满足</td></tr></tbody></table><p>例子：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-- 查询销售部和市场部的所有员工信息</span></span>\n<span class="line"><span>select * from employee where dept in (select id from dept where name = &#39;销售部&#39; or name = &#39;市场部&#39;);</span></span>\n<span class="line"><span>-- 查询比财务部所有人工资都高的员工信息</span></span>\n<span class="line"><span>select * from employee where salary &gt; all(select salary from employee where dept = (select id from dept where name = &#39;财务部&#39;));</span></span>\n<span class="line"><span>-- 查询比研发部任意一人工资高的员工信息</span></span>\n<span class="line"><span>select * from employee where salary &gt; any (select salary from employee where dept = (select id from dept where name = &#39;研发部&#39;));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="行子查询" tabindex="-1"><a class="header-anchor" href="#行子查询"><span>行子查询</span></a></h4><p>返回的结果是一行（可以是多列）。 常用操作符：=, &lt;, &gt;, IN, NOT IN</p><p>例子：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-- 查询与xxx的薪资及直属领导相同的员工信息</span></span>\n<span class="line"><span>select * from employee where (salary, manager) = (12500, 1);</span></span>\n<span class="line"><span>select * from employee where (salary, manager) = (select salary, manager from employee where name = &#39;xxx&#39;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="表子查询" tabindex="-1"><a class="header-anchor" href="#表子查询"><span>表子查询</span></a></h4><p>返回的结果是多行多列 常用操作符：IN</p><p>例子：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>-- 查询与xxx1，xxx2的职位和薪资相同的员工</span></span>\n<span class="line"><span>select * from employee where (job, salary) in (select job, salary from employee where name = &#39;xxx1&#39; or name = &#39;xxx2&#39;);</span></span>\n<span class="line"><span>-- 查询入职日期是2006-01-01之后的员工，及其部门信息</span></span>\n<span class="line"><span>select e.*, d.* from (select * from employee where entrydate &gt; &#39;2006-01-01&#39;) as e left join dept as d on e.dept = d.id;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-5-事务" tabindex="-1"><a class="header-anchor" href="#_1-5-事务"><span>1.5 事务</span></a></h2><p>事务是一组操作的集合，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p><p>基本操作：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 1. 查询张三账户余额</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> account </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;张三&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 2. 将张三账户余额-1000</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> account </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> money</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> money</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> - </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1000</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> where</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;张三&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 此语句出错后张三钱减少但是李四钱没有增加</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">模拟sql语句错误</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 3. 将李四账户余额+1000</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> account </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> money</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> money</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1000</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> where</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;李四&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 查看事务提交方式</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @@AUTOCOMMIT;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 设置事务提交方式，1为自动提交，0为手动提交，该设置只对当前会话有效</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @@AUTOCOMMIT </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 提交事务</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">COMMIT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 回滚事务</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ROLLBACK</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">-- 设置手动提交后上面代码改为：</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> account </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;张三&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> account </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> money</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> money</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> - </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1000</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> where</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;张三&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> account </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> money</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> money</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1000</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> where</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;李四&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">commit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>操作方式二：</p><p>开启事务： <code>START TRANSACTION 或 BEGIN TRANSACTION;</code> 提交事务： <code>COMMIT;</code> 回滚事务： <code>ROLLBACK;</code></p><p>操作实例：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">start transaction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> account </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;张三&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> account </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> money</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> money</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> - </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1000</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> where</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;张三&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> account </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> money</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> money</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> + </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1000</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> where</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;李四&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">commit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="四大特性acid" tabindex="-1"><a class="header-anchor" href="#四大特性acid"><span>四大特性ACID</span></a></h3><ul><li>原子性(Atomicity)：事务是不可分割的最小操作但愿，要么全部成功，要么全部失败</li><li>一致性(Consistency)：事务完成时，必须使所有数据都保持一致状态</li><li>隔离性(Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li><li>持久性(Durability)：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</li></ul><h3 id="并发事务" tabindex="-1"><a class="header-anchor" href="#并发事务"><span>并发事务</span></a></h3><table><thead><tr><th>问题</th><th>描述</th></tr></thead><tbody><tr><td>脏读</td><td>一个事务读到另一个事务还没提交的数据 ⚡数据变了：读到的数据可能会回滚，读到的垃圾数据</td></tr><tr><td>不可重复读</td><td>一个事务先后读取同一条记录，但两次读取的数据不同 ⚡数据变了：两次读的不一样</td></tr><tr><td>幻读</td><td>一个事务按照条件查询数据时，没有对应的数据行，但是再插入数据时，又发现这行数据已经存在 ⚡</td></tr></tbody></table><blockquote><p>这三个问题的详细演示：https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd</p></blockquote><p>并发事务隔离级别：</p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>Read uncommitted</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>Read committed</td><td>❌</td><td>✅</td><td>✅</td></tr><tr><td>Repeatable Read(默认)</td><td>❌</td><td>❌</td><td>✅</td></tr><tr><td>Serializable</td><td>❌</td><td>❌</td><td>❌</td></tr></tbody></table><ul><li>✅表示当前隔离级别有这个问题</li><li>Serializable 性能最低；Read uncommitted 性能最高，数据安全性最差</li></ul><p>查看事务隔离级别： <code>SELECT @@TRANSACTION_ISOLATION;</code> 设置事务隔离级别： <code>SET [ SESSION | GLOBAL ] TRANSACTION ISOLATION LEVEL {READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE };</code> SESSION 是会话级别，表示只针对当前会话有效，GLOBAL 表示对所有会话有效</p>',202))])}]]),t=JSON.parse('{"path":"/Database/MySQL/%E5%9F%BA%E7%A1%80/%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80%E7%AF%87.html","title":"1.基础篇","lang":"zh-CN","frontmatter":{"icon":"fa-database","date":"2025-03-11T00:00:00.000Z","category":["MySQL","数据库"],"tag":["笔记"],"gitInclude":[]},"headers":[{"level":2,"title":"1.1 通用语法及分类","slug":"_1-1-通用语法及分类","link":"#_1-1-通用语法及分类","children":[{"level":3,"title":"DDL（数据定义语言）","slug":"ddl-数据定义语言","link":"#ddl-数据定义语言","children":[]},{"level":3,"title":"DML（数据操作语言）","slug":"dml-数据操作语言","link":"#dml-数据操作语言","children":[]},{"level":3,"title":"DQL（数据查询语言）","slug":"dql-数据查询语言","link":"#dql-数据查询语言","children":[]},{"level":3,"title":"DCL","slug":"dcl","link":"#dcl","children":[]}]},{"level":2,"title":"1.2 函数","slug":"_1-2-函数","link":"#_1-2-函数","children":[{"level":3,"title":"字符串函数","slug":"字符串函数","link":"#字符串函数","children":[]},{"level":3,"title":"数值函数","slug":"数值函数","link":"#数值函数","children":[]},{"level":3,"title":"日期函数","slug":"日期函数","link":"#日期函数","children":[]},{"level":3,"title":"流程函数","slug":"流程函数","link":"#流程函数","children":[]}]},{"level":2,"title":"1.3 约束","slug":"_1-3-约束","link":"#_1-3-约束","children":[{"level":3,"title":"常用约束","slug":"常用约束","link":"#常用约束","children":[]},{"level":3,"title":"外键约束","slug":"外键约束","link":"#外键约束","children":[]}]},{"level":2,"title":"1.4 多表查询","slug":"_1-4-多表查询","link":"#_1-4-多表查询","children":[{"level":3,"title":"多表关系","slug":"多表关系","link":"#多表关系","children":[]},{"level":3,"title":"查询","slug":"查询","link":"#查询","children":[]},{"level":3,"title":"内连接查询","slug":"内连接查询","link":"#内连接查询","children":[]},{"level":3,"title":"外连接查询","slug":"外连接查询","link":"#外连接查询","children":[]},{"level":3,"title":"自连接查询","slug":"自连接查询","link":"#自连接查询","children":[]},{"level":3,"title":"联合查询 union, union all","slug":"联合查询-union-union-all","link":"#联合查询-union-union-all","children":[]},{"level":3,"title":"子查询","slug":"子查询","link":"#子查询","children":[]}]},{"level":2,"title":"1.5 事务","slug":"_1-5-事务","link":"#_1-5-事务","children":[{"level":3,"title":"四大特性ACID","slug":"四大特性acid","link":"#四大特性acid","children":[]},{"level":3,"title":"并发事务","slug":"并发事务","link":"#并发事务","children":[]}]}],"readingTime":{"minutes":18.54,"words":5562},"filePathRelative":"Database/MySQL/基础/笔记-基础篇.md","localizedDate":"2025年3月11日","excerpt":"\\n<h2>1.1 通用语法及分类</h2>\\n<ul>\\n<li>DDL: 数据定义语言，用来定义数据库对象（数据库、表、字段）</li>\\n<li>DML: 数据操作语言，用来对数据库表中的数据进行增删改</li>\\n<li>DQL: 数据查询语言，用来查询数据库中表的记录</li>\\n<li>DCL: 数据控制语言，用来创建数据库用户、控制数据库的控制权限</li>\\n</ul>\\n"}')}}]);