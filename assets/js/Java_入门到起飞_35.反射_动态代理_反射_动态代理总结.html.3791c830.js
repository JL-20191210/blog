"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[279],{66262:(a,l)=>{l.A=(a,l)=>{const e=a.__vccOpts||a;for(const[a,i]of l)e[a]=i;return e}},93450:(a,l,e)=>{e.r(l),e.d(l,{comp:()=>s,data:()=>h});var i=e(20641);const n={},s=(0,e(66262).A)(n,[["render",function(a,l){return(0,i.uX)(),(0,i.CE)("div",null,l[0]||(l[0]=[(0,i.Fv)('<h1 id="反射-动态代理总结" tabindex="-1"><a class="header-anchor" href="#反射-动态代理总结"><span>反射&amp;动态代理总结</span></a></h1><h2 id="反射" tabindex="-1"><a class="header-anchor" href="#反射"><span>反射</span></a></h2><h3 id="_1-反射的作用" tabindex="-1"><a class="header-anchor" href="#_1-反射的作用"><span>1.反射的作用</span></a></h3><p>①获取任意一个类中的所有信息</p><p>②结合配置文件动态创建对象</p><h3 id="_2-获得class字节码文件对象的三种方式" tabindex="-1"><a class="header-anchor" href="#_2-获得class字节码文件对象的三种方式"><span>2.获得class字节码文件对象的三种方式</span></a></h3><p>①Class.forName(&quot;全类名&quot;)</p><p>②类名.class</p><p>③对象的.getClass</p><h3 id="_3-如何获取构造方法、成员方法、成员变量" tabindex="-1"><a class="header-anchor" href="#_3-如何获取构造方法、成员方法、成员变量"><span>3.如何获取构造方法、成员方法、成员变量</span></a></h3><ul><li>get:获取</li><li>set:设置</li><li>Constructor:构造方法</li><li>Parameter:参数</li><li>Field:成员变量</li><li>Modifiers:修饰符</li><li>Method:方法</li><li>Declared:私有的</li></ul><h2 id="动态代理" tabindex="-1"><a class="header-anchor" href="#动态代理"><span>动态代理</span></a></h2><h3 id="_1-为什么需要代理" tabindex="-1"><a class="header-anchor" href="#_1-为什么需要代理"><span>1.为什么需要代理？</span></a></h3><p>代理可以无侵入的给对象增强其他功能</p><h3 id="_2-代理长什么样" tabindex="-1"><a class="header-anchor" href="#_2-代理长什么样"><span>2.代理长什么样？</span></a></h3><p>代理里面就是对象要被代理的方法</p><h3 id="_3-java通过什么保证代理的样子" tabindex="-1"><a class="header-anchor" href="#_3-java通过什么保证代理的样子"><span>3.Java通过什么保证代理的样子？</span></a></h3><p>通过接口保证。后面的对象和代理需要实现同一个接口，接口中就是被代理的所有方法</p>',18)]))}]]),h=JSON.parse('{"path":"/Java/%E5%85%A5%E9%97%A8%E5%88%B0%E8%B5%B7%E9%A3%9E/35.%E5%8F%8D%E5%B0%84_%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/%E5%8F%8D%E5%B0%84_%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E6%80%BB%E7%BB%93.html","title":"反射&动态代理总结","lang":"zh-CN","frontmatter":{"icon":"fa-brands fa-java","date":"2025-02-10T00:00:00.000Z","category":["Java"],"tag":["高级特性","总结","面试题"],"gitInclude":[]},"headers":[{"level":2,"title":"反射","slug":"反射","link":"#反射","children":[{"level":3,"title":"1.反射的作用","slug":"_1-反射的作用","link":"#_1-反射的作用","children":[]},{"level":3,"title":"2.获得class字节码文件对象的三种方式","slug":"_2-获得class字节码文件对象的三种方式","link":"#_2-获得class字节码文件对象的三种方式","children":[]},{"level":3,"title":"3.如何获取构造方法、成员方法、成员变量","slug":"_3-如何获取构造方法、成员方法、成员变量","link":"#_3-如何获取构造方法、成员方法、成员变量","children":[]}]},{"level":2,"title":"动态代理","slug":"动态代理","link":"#动态代理","children":[{"level":3,"title":"1.为什么需要代理？","slug":"_1-为什么需要代理","link":"#_1-为什么需要代理","children":[]},{"level":3,"title":"2.代理长什么样？","slug":"_2-代理长什么样","link":"#_2-代理长什么样","children":[]},{"level":3,"title":"3.Java通过什么保证代理的样子？","slug":"_3-java通过什么保证代理的样子","link":"#_3-java通过什么保证代理的样子","children":[]}]}],"readingTime":{"minutes":0.8,"words":240},"filePathRelative":"Java/入门到起飞/35.反射&动态代理/反射&动态代理总结.md","localizedDate":"2025年2月10日","excerpt":"\\n<h2>反射</h2>\\n<h3>1.反射的作用</h3>\\n<p>①获取任意一个类中的所有信息</p>\\n<p>②结合配置文件动态创建对象</p>\\n<h3>2.获得class字节码文件对象的三种方式</h3>\\n<p>①Class.forName(\\"全类名\\")</p>\\n<p>②类名.class</p>\\n<p>③对象的.getClass</p>\\n<h3>3.如何获取构造方法、成员方法、成员变量</h3>\\n<ul>\\n<li>get:获取</li>\\n<li>set:设置</li>\\n<li>Constructor:构造方法</li>\\n<li>Parameter:参数</li>\\n<li>Field:成员变量</li>\\n<li>Modifiers:修饰符</li>\\n<li>Method:方法</li>\\n<li>Declared:私有的</li>\\n</ul>"}')}}]);