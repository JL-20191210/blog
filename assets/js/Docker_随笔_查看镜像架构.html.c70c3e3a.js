"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[41032],{66262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,e]of s)a[i]=e;return a}},36084:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>n,data:()=>h});var e=a(20641);const t={},n=(0,a(66262).A)(t,[["render",function(i,s){return(0,e.uX)(),(0,e.CE)("div",null,[s[0]||(s[0]=(0,e.Lk)("h1",{id:"查看镜像架构",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#查看镜像架构"},[(0,e.Lk)("span",null,"查看镜像架构")])],-1)),s[1]||(s[1]=(0,e.Lk)("p",null,[(0,e.eW)("在 Docker 中，查看镜像架构可以帮助确认镜像是否适合当前设备的 CPU 架构（如 "),(0,e.Lk)("code",null,"amd64"),(0,e.eW)(" 或 "),(0,e.Lk)("code",null,"arm64"),(0,e.eW)("）。以下是总结的几种方法：")],-1)),s[2]||(s[2]=(0,e.Lk)("hr",null,null,-1)),(0,e.Q3)(" more "),s[3]||(s[3]=(0,e.Fv)('<h3 id="_1-使用-docker-inspect" tabindex="-1"><a class="header-anchor" href="#_1-使用-docker-inspect"><span><strong>1. 使用 <code>docker inspect</code></strong></span></a></h3><p><code>docker inspect</code> 命令可以显示镜像的详细元信息，包括架构：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> inspect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">镜像名或镜像I</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">D&gt; | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">grep</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Architecture</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>示例</strong>：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> inspect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> justsong/one-api:0.6.4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">grep</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Architecture</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>输出</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>&quot;Architecture&quot;: &quot;amd64&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h3 id="_2-使用-docker-manifest-inspect" tabindex="-1"><a class="header-anchor" href="#_2-使用-docker-manifest-inspect"><span><strong>2. 使用 <code>docker manifest inspect</code></strong></span></a></h3><p>查看镜像的多架构支持（需要 Docker CLI 版本 18.03+）：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> manifest</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> inspect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">镜像</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">名&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>示例</strong>：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> manifest</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> inspect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> justsong/one-api:0.6.4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>输出</strong>： 包含镜像支持的所有架构，如：</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;platform&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;architecture&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;amd64&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;os&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;linux&quot;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">},</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;platform&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;architecture&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;arm64&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;os&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;linux&quot;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_3-使用第三方工具" tabindex="-1"><a class="header-anchor" href="#_3-使用第三方工具"><span><strong>3. 使用第三方工具</strong></span></a></h3><ul><li><strong>Docker Hub</strong>：在 Docker Hub 页面中，部分镜像会列出支持的架构信息。</li><li><strong>Registry API</strong>：通过 Docker Registry API 查询镜像的支持架构：<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">curl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://registry.hub.docker.com/v2/repositories/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">镜像</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">名&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/tags</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">jq</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>或者查询特定镜像的标签：<div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">curl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://registry.hub.docker.com/v2/repositories/library/nginx/tags/latest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">jq</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><hr><h3 id="_4-使用-docker-run-动态验证" tabindex="-1"><a class="header-anchor" href="#_4-使用-docker-run-动态验证"><span><strong>4. 使用 <code>docker run</code> 动态验证</strong></span></a></h3><p>运行镜像时，通过 <code>uname -m</code> 验证架构：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --rm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">镜像</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">名&gt; </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">uname</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>示例</strong>：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --rm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> alpine</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> uname</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>输出</strong>：</p><ul><li><code>x86_64</code>：表示 <code>amd64</code> 架构。</li><li><code>aarch64</code>：表示 <code>arm64</code> 架构。</li></ul><hr><h3 id="_5-强制指定架构运行" tabindex="-1"><a class="header-anchor" href="#_5-强制指定架构运行"><span><strong>5. 强制指定架构运行</strong></span></a></h3><p>如果运行设备支持多架构（如通过 QEMU），可以使用 <code>--platform</code> 参数强制拉取特定架构的镜像：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pull</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --platform</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> linux/arm64</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">镜像</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">名&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或运行时指定架构：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --platform</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> linux/arm64</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">镜像</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">名&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span><strong>总结</strong></span></a></h3><table><thead><tr><th>方法</th><th>命令示例</th><th>功能</th></tr></thead><tbody><tr><td>查看单一架构信息</td><td><code>docker inspect</code></td><td>查看镜像的具体架构</td></tr><tr><td>查看多架构支持</td><td><code>docker manifest inspect</code></td><td>查看镜像支持的所有架构</td></tr><tr><td>通过运行环境验证</td><td><code>docker run --rm &lt;镜像名&gt; uname -m</code></td><td>运行容器时检查镜像实际架构</td></tr><tr><td>指定架构拉取镜像</td><td><code>docker pull --platform linux/arm64 &lt;镜像名&gt;</code></td><td>拉取特定架构的镜像</td></tr></tbody></table><p>通过这些方法，可以快速确定 Docker 镜像的架构以及与设备的兼容性。</p>',36))])}]]),h=JSON.parse('{"path":"/Docker/%E9%9A%8F%E7%AC%94/%E6%9F%A5%E7%9C%8B%E9%95%9C%E5%83%8F%E6%9E%B6%E6%9E%84.html","title":"Nginx","lang":"zh-CN","frontmatter":{"title":"Nginx","icon":"laptop-code","date":"2024-11-23T00:00:00.000Z","category":["docker"],"tag":["镜像"],"gitInclude":[]},"headers":[{"level":3,"title":"1. 使用 docker inspect","slug":"_1-使用-docker-inspect","link":"#_1-使用-docker-inspect","children":[]},{"level":3,"title":"2. 使用 docker manifest inspect","slug":"_2-使用-docker-manifest-inspect","link":"#_2-使用-docker-manifest-inspect","children":[]},{"level":3,"title":"3. 使用第三方工具","slug":"_3-使用第三方工具","link":"#_3-使用第三方工具","children":[]},{"level":3,"title":"4. 使用 docker run 动态验证","slug":"_4-使用-docker-run-动态验证","link":"#_4-使用-docker-run-动态验证","children":[]},{"level":3,"title":"5. 强制指定架构运行","slug":"_5-强制指定架构运行","link":"#_5-强制指定架构运行","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"readingTime":{"minutes":1.68,"words":504},"filePathRelative":"Docker/随笔/查看镜像架构.md","localizedDate":"2024年11月23日","excerpt":"\\n<p>在 Docker 中，查看镜像架构可以帮助确认镜像是否适合当前设备的 CPU 架构（如 <code>amd64</code> 或 <code>arm64</code>）。以下是总结的几种方法：</p>\\n<hr>\\n"}')}}]);