"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[61915],{66262:(n,i)=>{i.A=(n,i)=>{const e=n.__vccOpts||n;for(const[n,l]of i)e[n]=l;return e}},38490:(n,i,e)=>{e.r(i),e.d(i,{comp:()=>t,data:()=>o});var l=e(20641);const c={},t=(0,e(66262).A)(c,[["render",function(n,i){return(0,l.uX)(),(0,l.CE)("div",null,i[0]||(i[0]=[(0,l.Fv)('<h1 id="_10-synchronized和lock有什么区别" tabindex="-1"><a class="header-anchor" href="#_10-synchronized和lock有什么区别"><span>10.synchronized和Lock有什么区别 ?</span></a></h1><div class="hint-container important"><p class="hint-container-title">重要</p><p><strong>参考回答</strong></p><p>第一，语法层面</p><ul><li>synchronized 是关键字，源码在 jvm 中，用 c++ 语言实现，退出同步代码块锁会自动释放</li><li>Lock 是接口，源码由 jdk 提供，用 java 语言实现，需要手动调用 unlock 方法释放锁</li></ul><p>第二，功能层面</p><ul><li>二者均属于悲观锁、都具备基本的互斥、同步、锁重入功能</li><li>Lock 提供了许多 synchronized 不具备的功能，例如获取等待状态、公平锁、可打断、可超时、多条件变量，同时Lock 可以实现不同的场景，如 ReentrantLock， ReentrantReadWriteLock</li></ul><p>第三，性能层面</p><ul><li>在没有竞争时，synchronized 做了很多优化，如偏向锁、轻量级锁，性能不赖</li><li>在竞争激烈时，Lock 的实现通常会提供更好的性能</li></ul><p>统合来看，需要根据不同的场景来选择不同的锁的使用。</p></div>',2)]))}]]),o=JSON.parse('{"path":"/Interview/%E9%BB%91%E9%A9%ACJava2023/08%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/02%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8/10.synchronized%E5%92%8CLock%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB.html","title":"10.synchronized和Lock有什么区别 ?","lang":"zh-CN","frontmatter":{"gitInclude":[]},"headers":[],"readingTime":{"minutes":0.76,"words":229},"filePathRelative":"Interview/黑马Java2023/08并发编程/02并发安全/10.synchronized和Lock有什么区别.md","excerpt":"\\n<div class=\\"hint-container important\\">\\n<p class=\\"hint-container-title\\">重要</p>\\n<p><strong>参考回答</strong></p>\\n<p>第一，语法层面</p>\\n<ul>\\n<li>synchronized 是关键字，源码在 jvm 中，用 c++ 语言实现，退出同步代码块锁会自动释放</li>\\n<li>Lock 是接口，源码由 jdk 提供，用 java 语言实现，需要手动调用 unlock 方法释放锁</li>\\n</ul>\\n<p>第二，功能层面</p>\\n<ul>\\n<li>二者均属于悲观锁、都具备基本的互斥、同步、锁重入功能</li>\\n<li>Lock 提供了许多 synchronized 不具备的功能，例如获取等待状态、公平锁、可打断、可超时、多条件变量，同时Lock 可以实现不同的场景，如 ReentrantLock， ReentrantReadWriteLock</li>\\n</ul>\\n<p>第三，性能层面</p>\\n<ul>\\n<li>在没有竞争时，synchronized 做了很多优化，如偏向锁、轻量级锁，性能不赖</li>\\n<li>在竞争激烈时，Lock 的实现通常会提供更好的性能</li>\\n</ul>\\n<p>统合来看，需要根据不同的场景来选择不同的锁的使用。</p>\\n</div>"}')}}]);